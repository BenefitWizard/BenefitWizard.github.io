/* Generated by Spago v0.93.41 */
(() => {
  // output/Control.Bind/foreign.js
  var arrayBind = function(arr) {
    return function(f) {
      var result = [];
      for (var i2 = 0, l2 = arr.length; i2 < l2; i2++) {
        Array.prototype.push.apply(result, f(arr[i2]));
      }
      return result;
    };
  };

  // output/Control.Apply/foreign.js
  var arrayApply = function(fs) {
    return function(xs) {
      var l2 = fs.length;
      var k = xs.length;
      var result = new Array(l2 * k);
      var n = 0;
      for (var i2 = 0; i2 < l2; i2++) {
        var f = fs[i2];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };

  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b2) {
      return function(a3) {
        return f(a3)(b2);
      };
    };
  };
  var $$const = function(a3) {
    return function(v2) {
      return a3;
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l2 = arr.length;
      var result = new Array(l2);
      for (var i2 = 0; i2 < l2; i2++) {
        result[i2] = f(arr[i2]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var voidLeft = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return function(f) {
      return function(x) {
        return map111($$const(x))(f);
      };
    };
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyArray = {
    apply: arrayApply,
    Functor0: function() {
      return functorArray;
    }
  };
  var apply = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply1 = apply(dictApply);
    var map30 = map(dictApply.Functor0());
    return function(a3) {
      return function(b2) {
        return apply1(map30($$const(identity2))(a3))(b2);
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var unless = function(dictApplicative) {
    var pure15 = pure(dictApplicative);
    return function(v2) {
      return function(v1) {
        if (!v2) {
          return v1;
        }
        ;
        if (v2) {
          return pure15(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
  };
  var when = function(dictApplicative) {
    var pure15 = pure(dictApplicative);
    return function(v2) {
      return function(v1) {
        if (v2) {
          return v1;
        }
        ;
        if (!v2) {
          return pure15(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
  };
  var liftA1 = function(dictApplicative) {
    var apply3 = apply(dictApplicative.Apply0());
    var pure15 = pure(dictApplicative);
    return function(f) {
      return function(a3) {
        return apply3(pure15(f))(a3);
      };
    };
  };

  // output/Control.Bind/index.js
  var discard = function(dict) {
    return dict.discard;
  };
  var bindArray = {
    bind: arrayBind,
    Apply0: function() {
      return applyArray;
    }
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisliFlipped = function(dictBind) {
    var bindFlipped12 = bindFlipped(dictBind);
    return function(f) {
      return function(g) {
        return function(a3) {
          return bindFlipped12(f)(g(a3));
        };
      };
    };
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq3) {
      return function(gt) {
        return function(x) {
          return function(y) {
            return x < y ? lt : x === y ? eq3 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;
  var ordNumberImpl = unsafeCompareImpl;
  var ordStringImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqIntImpl = refEq;
  var eqNumberImpl = refEq;
  var eqStringImpl = refEq;
  var eqArrayImpl = function(f) {
    return function(xs) {
      return function(ys) {
        if (xs.length !== ys.length) return false;
        for (var i2 = 0; i2 < xs.length; i2++) {
          if (!f(xs[i2])(ys[i2])) return false;
        }
        return true;
      };
    };
  };

  // output/Data.Symbol/index.js
  var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
  };

  // output/Record.Unsafe/foreign.js
  var unsafeGet = function(label5) {
    return function(rec) {
      return rec[label5];
    };
  };
  var unsafeSet = function(label5) {
    return function(value12) {
      return function(rec) {
        var copy2 = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy2[key] = rec[key];
          }
        }
        copy2[label5] = value12;
        return copy2;
      };
    };
  };

  // output/Data.Eq/index.js
  var eqUnit = {
    eq: function(v2) {
      return function(v1) {
        return true;
      };
    }
  };
  var eqString = {
    eq: eqStringImpl
  };
  var eqNumber = {
    eq: eqNumberImpl
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eqArray = function(dictEq) {
    return {
      eq: eqArrayImpl(eq(dictEq))
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();
  var eqOrdering = {
    eq: function(v2) {
      return function(v1) {
        if (v2 instanceof LT && v1 instanceof LT) {
          return true;
        }
        ;
        if (v2 instanceof GT && v1 instanceof GT) {
          return true;
        }
        ;
        if (v2 instanceof EQ && v1 instanceof EQ) {
          return true;
        }
        ;
        return false;
      };
    }
  };

  // output/Data.Semiring/foreign.js
  var intAdd = function(x) {
    return function(y) {
      return x + y | 0;
    };
  };
  var intMul = function(x) {
    return function(y) {
      return x * y | 0;
    };
  };

  // output/Data.Semiring/index.js
  var zero = function(dict) {
    return dict.zero;
  };
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };
  var add = function(dict) {
    return dict.add;
  };

  // output/Data.Ord/index.js
  var ordUnit = {
    compare: function(v2) {
      return function(v1) {
        return EQ.value;
      };
    },
    Eq0: function() {
      return eqUnit;
    }
  };
  var ordString = /* @__PURE__ */ function() {
    return {
      compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqString;
      }
    };
  }();
  var ordNumber = /* @__PURE__ */ function() {
    return {
      compare: ordNumberImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqNumber;
      }
    };
  }();
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var compare = function(dict) {
    return dict.compare;
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };
  var showNumberImpl = function(n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
  var showStringImpl = function(s2) {
    var l2 = s2.length;
    return '"' + s2.replace(
      /[\0-\x1F\x7F"\\]/g,
      // eslint-disable-line no-control-regex
      function(c2, i2) {
        switch (c2) {
          case '"':
          case "\\":
            return "\\" + c2;
          case "\x07":
            return "\\a";
          case "\b":
            return "\\b";
          case "\f":
            return "\\f";
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "	":
            return "\\t";
          case "\v":
            return "\\v";
        }
        var k = i2 + 1;
        var empty9 = k < l2 && s2[k] >= "0" && s2[k] <= "9" ? "\\&" : "";
        return "\\" + c2.charCodeAt(0).toString(10) + empty9;
      }
    ) + '"';
  };

  // output/Data.Show/index.js
  var showString = {
    show: showStringImpl
  };
  var showNumber = {
    show: showNumberImpl
  };
  var showInt = {
    show: showIntImpl
  };
  var show = function(dict) {
    return dict.show;
  };

  // output/Data.HeytingAlgebra/foreign.js
  var boolConj = function(b1) {
    return function(b2) {
      return b1 && b2;
    };
  };
  var boolDisj = function(b1) {
    return function(b2) {
      return b1 || b2;
    };
  };
  var boolNot = function(b2) {
    return !b2;
  };

  // output/Data.HeytingAlgebra/index.js
  var tt = function(dict) {
    return dict.tt;
  };
  var not = function(dict) {
    return dict.not;
  };
  var implies = function(dict) {
    return dict.implies;
  };
  var ff = function(dict) {
    return dict.ff;
  };
  var disj = function(dict) {
    return dict.disj;
  };
  var heytingAlgebraBoolean = {
    ff: false,
    tt: true,
    implies: function(a3) {
      return function(b2) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a3))(b2);
      };
    },
    conj: boolConj,
    disj: boolDisj,
    not: boolNot
  };
  var conj = function(dict) {
    return dict.conj;
  };
  var heytingAlgebraFunction = function(dictHeytingAlgebra) {
    var ff1 = ff(dictHeytingAlgebra);
    var tt1 = tt(dictHeytingAlgebra);
    var implies1 = implies(dictHeytingAlgebra);
    var conj1 = conj(dictHeytingAlgebra);
    var disj1 = disj(dictHeytingAlgebra);
    var not1 = not(dictHeytingAlgebra);
    return {
      ff: function(v2) {
        return ff1;
      },
      tt: function(v2) {
        return tt1;
      },
      implies: function(f) {
        return function(g) {
          return function(a3) {
            return implies1(f(a3))(g(a3));
          };
        };
      },
      conj: function(f) {
        return function(g) {
          return function(a3) {
            return conj1(f(a3))(g(a3));
          };
        };
      },
      disj: function(f) {
        return function(g) {
          return function(a3) {
            return disj1(f(a3))(g(a3));
          };
        };
      },
      not: function(f) {
        return function(a3) {
          return not1(f(a3));
        };
      }
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Data.Monoid/index.js
  var mempty = function(dict) {
    return dict.mempty;
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var snd = function(v2) {
    return v2.value1;
  };
  var functorTuple = {
    map: function(f) {
      return function(m2) {
        return new Tuple(m2.value0, f(m2.value1));
      };
    }
  };
  var fst = function(v2) {
    return v2.value0;
  };
  var eqTuple = function(dictEq) {
    var eq3 = eq(dictEq);
    return function(dictEq1) {
      var eq13 = eq(dictEq1);
      return {
        eq: function(x) {
          return function(y) {
            return eq3(x.value0)(y.value0) && eq13(x.value1)(y.value1);
          };
        }
      };
    };
  };
  var ordTuple = function(dictOrd) {
    var compare3 = compare(dictOrd);
    var eqTuple1 = eqTuple(dictOrd.Eq0());
    return function(dictOrd1) {
      var compare12 = compare(dictOrd1);
      var eqTuple2 = eqTuple1(dictOrd1.Eq0());
      return {
        compare: function(x) {
          return function(y) {
            var v2 = compare3(x.value0)(y.value0);
            if (v2 instanceof LT) {
              return LT.value;
            }
            ;
            if (v2 instanceof GT) {
              return GT.value;
            }
            ;
            return compare12(x.value1)(y.value1);
          };
        },
        Eq0: function() {
          return eqTuple2;
        }
      };
    };
  };

  // output/Control.Monad.State.Class/index.js
  var state = function(dict) {
    return dict.state;
  };
  var put = function(dictMonadState) {
    var state1 = state(dictMonadState);
    return function(s2) {
      return state1(function(v2) {
        return new Tuple(unit, s2);
      });
    };
  };
  var modify_ = function(dictMonadState) {
    var state1 = state(dictMonadState);
    return function(f) {
      return state1(function(s2) {
        return new Tuple(unit, f(s2));
      });
    };
  };
  var get = function(dictMonadState) {
    return state(dictMonadState)(function(s2) {
      return new Tuple(s2, s2);
    });
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init2) {
      return function(xs) {
        var acc = init2;
        var len = xs.length;
        for (var i2 = len - 1; i2 >= 0; i2--) {
          acc = f(xs[i2])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init2) {
      return function(xs) {
        var acc = init2;
        var len = xs.length;
        for (var i2 = 0; i2 < len; i2++) {
          acc = f(acc)(xs[i2]);
        }
        return acc;
      };
    };
  };

  // output/Control.Alt/index.js
  var alt = function(dict) {
    return dict.alt;
  };

  // output/Control.Plus/index.js
  var empty = function(dict) {
    return dict.empty;
  };

  // output/Data.Maybe/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22 instanceof Nothing) {
          return v2;
        }
        ;
        if (v22 instanceof Just) {
          return v1(v22.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
  var functorMaybe = {
    map: function(v2) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v2(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe = function(a3) {
    return maybe(a3)(identity3);
  };
  var fromJust = function() {
    return function(v2) {
      if (v2 instanceof Just) {
        return v2.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v2.constructor.name]);
    };
  };
  var eqMaybe = function(dictEq) {
    var eq3 = eq(dictEq);
    return {
      eq: function(x) {
        return function(y) {
          if (x instanceof Nothing && y instanceof Nothing) {
            return true;
          }
          ;
          if (x instanceof Just && y instanceof Just) {
            return eq3(x.value0)(y.value0);
          }
          ;
          return false;
        };
      }
    };
  };
  var applyMaybe = {
    apply: function(v2) {
      return function(v1) {
        if (v2 instanceof Just) {
          return map2(v2.value0)(v1);
        }
        ;
        if (v2 instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v2) {
      return function(v1) {
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        if (v2 instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var applicativeMaybe = /* @__PURE__ */ function() {
    return {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
  }();

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left3(value0) {
      this.value0 = value0;
    }
    ;
    Left3.create = function(value0) {
      return new Left3(value0);
    };
    return Left3;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right3(value0) {
      this.value0 = value0;
    }
    ;
    Right3.create = function(value0) {
      return new Right3(value0);
    };
    return Right3;
  }();
  var functorEither = {
    map: function(f) {
      return function(m2) {
        if (m2 instanceof Left) {
          return new Left(m2.value0);
        }
        ;
        if (m2 instanceof Right) {
          return new Right(f(m2.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };
  var fromRight = function(v2) {
    return function(v1) {
      if (v1 instanceof Right) {
        return v1.value0;
      }
      ;
      return v2;
    };
  };
  var either = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22 instanceof Left) {
          return v2(v22.value0);
        }
        ;
        if (v22 instanceof Right) {
          return v1(v22.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
      };
    };
  };

  // output/Data.Bifunctor/index.js
  var bimap = function(dict) {
    return dict.bimap;
  };

  // output/Data.Monoid.Dual/index.js
  var Dual = function(x) {
    return x;
  };
  var semigroupDual = function(dictSemigroup) {
    var append13 = append(dictSemigroup);
    return {
      append: function(v2) {
        return function(v1) {
          return append13(v1)(v2);
        };
      }
    };
  };
  var monoidDual = function(dictMonoid) {
    var semigroupDual1 = semigroupDual(dictMonoid.Semigroup0());
    return {
      mempty: mempty(dictMonoid),
      Semigroup0: function() {
        return semigroupDual1;
      }
    };
  };

  // output/Data.Monoid.Endo/index.js
  var Endo = function(x) {
    return x;
  };
  var semigroupEndo = function(dictSemigroupoid) {
    var compose2 = compose(dictSemigroupoid);
    return {
      append: function(v2) {
        return function(v1) {
          return compose2(v2)(v1);
        };
      }
    };
  };
  var monoidEndo = function(dictCategory) {
    var semigroupEndo1 = semigroupEndo(dictCategory.Semigroupoid0());
    return {
      mempty: identity(dictCategory),
      Semigroup0: function() {
        return semigroupEndo1;
      }
    };
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var unwrap = function() {
    return coerce2;
  };

  // output/Data.Foldable/index.js
  var eq12 = /* @__PURE__ */ eq(eqOrdering);
  var unwrap2 = /* @__PURE__ */ unwrap();
  var monoidEndo2 = /* @__PURE__ */ monoidEndo(categoryFn);
  var monoidDual2 = /* @__PURE__ */ monoidDual(monoidEndo2);
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond2 = applySecond(dictApplicative.Apply0());
    var pure15 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond2(f($454));
        })(pure15(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_14 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_14(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var maximumBy = function(dictFoldable) {
    var foldl2 = foldl(dictFoldable);
    return function(cmp) {
      var max$prime = function(v2) {
        return function(v1) {
          if (v2 instanceof Nothing) {
            return new Just(v1);
          }
          ;
          if (v2 instanceof Just) {
            return new Just(function() {
              var $303 = eq12(cmp(v2.value0)(v1))(GT.value);
              if ($303) {
                return v2.value0;
              }
              ;
              return v1;
            }());
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 441, column 3 - line 441, column 27): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
      return foldl2(max$prime)(Nothing.value);
    };
  };
  var sum = function(dictFoldable) {
    var foldl2 = foldl(dictFoldable);
    return function(dictSemiring) {
      return foldl2(add(dictSemiring))(zero(dictSemiring));
    };
  };
  var foldableMaybe = {
    foldr: function(v2) {
      return function(v1) {
        return function(v22) {
          if (v22 instanceof Nothing) {
            return v1;
          }
          ;
          if (v22 instanceof Just) {
            return v2(v22.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
        };
      };
    },
    foldl: function(v2) {
      return function(v1) {
        return function(v22) {
          if (v22 instanceof Nothing) {
            return v1;
          }
          ;
          if (v22 instanceof Just) {
            return v2(v1)(v22.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty2 = mempty(dictMonoid);
      return function(v2) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty2;
          }
          ;
          if (v1 instanceof Just) {
            return v2(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append9 = append(dictMonoid.Semigroup0());
      var mempty2 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append9(f(x))(acc);
          };
        })(mempty2);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };
  var foldlDefault = function(dictFoldable) {
    var foldMap2 = foldMap(dictFoldable)(monoidDual2);
    return function(c2) {
      return function(u2) {
        return function(xs) {
          return unwrap2(unwrap2(foldMap2(function() {
            var $457 = flip(c2);
            return function($458) {
              return Dual(Endo($457($458)));
            };
          }())(xs)))(u2);
        };
      };
    };
  };
  var foldrDefault = function(dictFoldable) {
    var foldMap2 = foldMap(dictFoldable)(monoidEndo2);
    return function(c2) {
      return function(u2) {
        return function(xs) {
          return unwrap2(foldMap2(function($459) {
            return Endo(c2($459));
          })(xs))(u2);
        };
      };
    };
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag, _1, _2, _3) {
      this.tag = tag;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }
    function nonCanceler2(error4) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error4) {
        setTimeout(function() {
          throw error4;
        }, 0);
      }
    }
    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error4) {
        return left(error4);
      }
    }
    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error4) {
        k(left(error4))();
        return nonCanceler2;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size5 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size5 !== 0) {
          size5--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb) {
          var i2, tmp;
          if (size5 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size5) % limit] = cb;
          size5++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function() {
          return count === 0;
        },
        killAll: function(killError, cb) {
          return function() {
            if (count === 0) {
              return cb();
            }
            var killCount = 0;
            var kills = {};
            function kill2(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }
            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill2(k);
              }
            }
            fibers = {};
            fiberId = 0;
            count = 0;
            return function(error4) {
              return new Aff2(SYNC, function() {
                for (var k2 in kills) {
                  if (kills.hasOwnProperty(k2)) {
                    kills[k2]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step3 = aff;
      var fail2 = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run3(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step3 = bhead(step3);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail2 = util.left(e);
                step3 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step3)) {
                status = RETURN;
                fail2 = step3;
                step3 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step3 = util.fromRight(step3);
              }
              break;
            case CONTINUE:
              switch (step3.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step3._2;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step3 = util.right(step3._1);
                  } else {
                    status = STEP_BIND;
                    step3 = step3._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step3 = runSync(util.left, util.right, step3._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step3 = runAsync(util.left, step3._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step3 = result2;
                        run3(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail2 = util.left(step3._1);
                  step3 = null;
                  break;
                // Enqueue the Catch so that we can call the error handler later on
                // in case of an exception.
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                // Enqueue the Bracket so that we can call the appropriate handlers
                // after resource acquisition.
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step3._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step3._1) {
                    tmp.run();
                  }
                  step3 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step3 = sequential3(util, supervisor, step3._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step3 = interrupt || fail2 || step3;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  // We cannot recover from an unmasked interrupt. Otherwise we should
                  // continue stepping, or run the exception handler if an exception
                  // was raised.
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail2) {
                      status = CONTINUE;
                      step3 = attempt._2(util.fromLeft(fail2));
                      fail2 = null;
                    }
                    break;
                  // We cannot resume from an unmasked interrupt or exception.
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail2) {
                      status = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status = STEP_BIND;
                      step3 = util.fromRight(step3);
                    }
                    break;
                  // If we have a bracket, we should enqueue the handlers,
                  // and continue with the success branch only if the fiber has
                  // not been interrupted. If the bracket acquisition failed, we
                  // should not run either.
                  case BRACKET:
                    bracketCount--;
                    if (fail2 === null) {
                      result = util.fromRight(step3);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step3 = attempt._3(result);
                      }
                    }
                    break;
                  // Enqueue the appropriate handler. We increase the bracket count
                  // because it should not be cancelled.
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail2), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step3 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail2) {
                      step3 = attempt._1.failed(util.fromLeft(fail2))(attempt._2);
                    } else {
                      step3 = attempt._1.completed(util.fromRight(step3))(attempt._2);
                    }
                    fail2 = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail2), attempts, interrupt);
                    status = CONTINUE;
                    step3 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step3 = attempt._1;
                    fail2 = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k in joins) {
                if (joins.hasOwnProperty(k)) {
                  rethrow = rethrow && joins[k].rethrow;
                  runEff(joins[k].handler(step3));
                }
              }
              joins = null;
              if (interrupt && fail2) {
                setTimeout(function() {
                  throw util.fromLeft(fail2);
                }, 0);
              } else if (util.isLeft(step3) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step3);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join4) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join4.rethrow;
            join4.handler(step3)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join4;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill2(error4, cb) {
        return function() {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error4);
              status = COMPLETED;
              step3 = interrupt;
              run3(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error4);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error4)), attempts, interrupt);
                }
                status = RETURN;
                step3 = null;
                fail2 = null;
                run3(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error4);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step3 = null;
                fail2 = null;
              }
          }
          return canceler;
        };
      }
      function join3(cb) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run3(runTick);
          }
          return canceler;
        };
      }
      return {
        kill: kill2,
        join: join3,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run3(runTick);
              });
            } else {
              run3(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root = EMPTY;
      function kill2(error4, par2, cb2) {
        var step3 = par2;
        var head3 = null;
        var tail = null;
        var count = 0;
        var kills2 = {};
        var tmp, kid;
        loop: while (true) {
          tmp = null;
          switch (step3.tag) {
            case FORKED:
              if (step3._3 === EMPTY) {
                tmp = fibers[step3._1];
                kills2[count++] = tmp.kill(error4, function(result) {
                  return function() {
                    count--;
                    if (count === 0) {
                      cb2(result)();
                    }
                  };
                });
              }
              if (head3 === null) {
                break loop;
              }
              step3 = head3._2;
              if (tail === null) {
                head3 = null;
              } else {
                head3 = tail._1;
                tail = tail._2;
              }
              break;
            case MAP:
              step3 = step3._2;
              break;
            case APPLY:
            case ALT:
              if (head3) {
                tail = new Aff2(CONS, head3, tail);
              }
              head3 = step3;
              step3 = step3._1;
              break;
          }
        }
        if (count === 0) {
          cb2(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join3(result, head3, tail) {
        var fail2, step3, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail2 = result;
          step3 = null;
        } else {
          step3 = result;
          fail2 = null;
        }
        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;
          if (interrupt !== null) {
            return;
          }
          if (head3 === null) {
            cb(fail2 || step3)();
            return;
          }
          if (head3._3 !== EMPTY) {
            return;
          }
          switch (head3.tag) {
            case MAP:
              if (fail2 === null) {
                head3._3 = util.right(head3._1(util.fromRight(step3)));
                step3 = head3._3;
              } else {
                head3._3 = fail2;
              }
              break;
            case APPLY:
              lhs = head3._1._3;
              rhs = head3._2._3;
              if (fail2) {
                head3._3 = fail2;
                tmp = true;
                kid = killId++;
                kills[kid] = kill2(early, fail2 === lhs ? head3._2 : head3._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail === null) {
                      join3(fail2, null, null);
                    } else {
                      join3(fail2, tail._1, tail._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              } else if (lhs === EMPTY || rhs === EMPTY) {
                return;
              } else {
                step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                head3._3 = step3;
              }
              break;
            case ALT:
              lhs = head3._1._3;
              rhs = head3._2._3;
              if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                return;
              }
              if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                fail2 = step3 === lhs ? rhs : lhs;
                step3 = null;
                head3._3 = fail2;
              } else {
                head3._3 = step3;
                tmp = true;
                kid = killId++;
                kills[kid] = kill2(early, step3 === lhs ? head3._2 : head3._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail === null) {
                      join3(step3, null, null);
                    } else {
                      join3(step3, tail._1, tail._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              }
              break;
          }
          if (tail === null) {
            head3 = null;
          } else {
            head3 = tail._1;
            tail = tail._2;
          }
        }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join3(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run3() {
        var status = CONTINUE;
        var step3 = par;
        var head3 = null;
        var tail = null;
        var tmp, fid;
        loop: while (true) {
          tmp = null;
          fid = null;
          switch (status) {
            case CONTINUE:
              switch (step3.tag) {
                case MAP:
                  if (head3) {
                    tail = new Aff2(CONS, head3, tail);
                  }
                  head3 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                  step3 = step3._2;
                  break;
                case APPLY:
                  if (head3) {
                    tail = new Aff2(CONS, head3, tail);
                  }
                  head3 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                case ALT:
                  if (head3) {
                    tail = new Aff2(CONS, head3, tail);
                  }
                  head3 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                default:
                  fid = fiberId++;
                  status = RETURN;
                  tmp = step3;
                  step3 = new Aff2(FORKED, fid, new Aff2(CONS, head3, tail), EMPTY);
                  tmp = Fiber(util, supervisor, tmp);
                  tmp.onComplete({
                    rethrow: false,
                    handler: resolve(step3)
                  })();
                  fibers[fid] = tmp;
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
              }
              break;
            case RETURN:
              if (head3 === null) {
                break loop;
              }
              if (head3._1 === EMPTY) {
                head3._1 = step3;
                status = CONTINUE;
                step3 = head3._2;
                head3._2 = EMPTY;
              } else {
                head3._2 = step3;
                step3 = head3;
                if (tail === null) {
                  head3 = null;
                } else {
                  head3 = tail._1;
                  tail = tail._2;
                }
              }
          }
        }
        root = step3;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error4, cb2) {
        interrupt = util.left(error4);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill2(error4, root, cb2);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler2;
            };
          });
        };
      }
      run3();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential3(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb) {
        return function() {
          return runPar(util, supervisor, par, cb);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler2;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _catchError(aff) {
    return function(k) {
      return Aff.Catch(aff, k);
    };
  }
  function _map(f) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function(value12) {
          return Aff.Pure(f(value12));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k) {
      return Aff.Bind(aff, k);
    };
  }
  function _fork(immediate) {
    return function(aff) {
      return Aff.Fork(immediate, aff);
    };
  }
  var _liftEffect = Aff.Sync;
  function _parAffMap(f) {
    return function(aff) {
      return Aff.ParMap(f, aff);
    };
  }
  function _parAffApply(aff1) {
    return function(aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  }
  var makeAff = Aff.Async;
  function generalBracket(acquire) {
    return function(options2) {
      return function(k) {
        return Aff.Bracket(acquire, options2, k);
      };
    };
  }
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _sequential = Aff.Seq;

  // output/Control.Monad/index.js
  var unlessM = function(dictMonad) {
    var bind11 = bind(dictMonad.Bind1());
    var unless2 = unless(dictMonad.Applicative0());
    return function(mb) {
      return function(m2) {
        return bind11(mb)(function(b2) {
          return unless2(b2)(m2);
        });
      };
    };
  };
  var ap = function(dictMonad) {
    var bind11 = bind(dictMonad.Bind1());
    var pure15 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a3) {
        return bind11(f)(function(f$prime) {
          return bind11(a3)(function(a$prime) {
            return pure15(f$prime(a$prime));
          });
        });
      };
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a3) {
    return function() {
      return a3;
    };
  };
  var bindE = function(a3) {
    return function(f) {
      return function() {
        return f(a3())();
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);

  // output/Effect.Exception/foreign.js
  function error(msg) {
    return new Error(msg);
  }
  function throwException(e) {
    return function() {
      throw e;
    };
  }

  // output/Effect.Exception/index.js
  var $$throw = function($4) {
    return throwException(error($4));
  };

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };
  var catchError = function(dict) {
    return dict.catchError;
  };
  var $$try = function(dictMonadError) {
    var catchError1 = catchError(dictMonadError);
    var Monad0 = dictMonadError.MonadThrow0().Monad0();
    var map30 = map(Monad0.Bind1().Apply0().Functor0());
    var pure15 = pure(Monad0.Applicative0());
    return function(a3) {
      return catchError1(map30(Right.create)(a3))(function($52) {
        return pure15(Left.create($52));
      });
    };
  };

  // output/Data.Identity/index.js
  var Identity = function(x) {
    return x;
  };
  var functorIdentity = {
    map: function(f) {
      return function(m2) {
        return f(m2);
      };
    }
  };
  var applyIdentity = {
    apply: function(v2) {
      return function(v1) {
        return v2(v1);
      };
    },
    Functor0: function() {
      return functorIdentity;
    }
  };
  var bindIdentity = {
    bind: function(v2) {
      return function(f) {
        return f(v2);
      };
    },
    Apply0: function() {
      return applyIdentity;
    }
  };
  var applicativeIdentity = {
    pure: Identity,
    Apply0: function() {
      return applyIdentity;
    }
  };
  var monadIdentity = {
    Applicative0: function() {
      return applicativeIdentity;
    },
    Bind1: function() {
      return bindIdentity;
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref3) {
    return function() {
      return ref3.value;
    };
  };
  var modifyImpl = function(f) {
    return function(ref3) {
      return function() {
        var t2 = f(ref3.value);
        ref3.value = t2.state;
        return t2.value;
      };
    };
  };
  var write = function(val) {
    return function(ref3) {
      return function() {
        ref3.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var $$new = _new;
  var modify$prime = modifyImpl;
  var modify = function(f) {
    return modify$prime(function(s2) {
      var s$prime = f(s2);
      return {
        state: s$prime,
        value: s$prime
      };
    });
  };
  var modify_2 = function(f) {
    return function(s2) {
      return $$void2(modify(f)(s2));
    };
  };

  // output/Control.Monad.Rec.Class/index.js
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var map3 = /* @__PURE__ */ map(functorEffect);
  var Loop = /* @__PURE__ */ function() {
    function Loop2(value0) {
      this.value0 = value0;
    }
    ;
    Loop2.create = function(value0) {
      return new Loop2(value0);
    };
    return Loop2;
  }();
  var Done = /* @__PURE__ */ function() {
    function Done2(value0) {
      this.value0 = value0;
    }
    ;
    Done2.create = function(value0) {
      return new Done2(value0);
    };
    return Done2;
  }();
  var tailRecM = function(dict) {
    return dict.tailRecM;
  };
  var monadRecEffect = {
    tailRecM: function(f) {
      return function(a3) {
        var fromDone = function(v2) {
          if (v2 instanceof Done) {
            return v2.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44): " + [v2.constructor.name]);
        };
        return function __do2() {
          var r = bindFlipped2($$new)(f(a3))();
          (function() {
            while (!function __do3() {
              var v2 = read(r)();
              if (v2 instanceof Loop) {
                var e = f(v2.value0)();
                write(e)(r)();
                return false;
              }
              ;
              if (v2 instanceof Done) {
                return true;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28): " + [v2.constructor.name]);
            }()) {
            }
            ;
            return {};
          })();
          return map3(fromDone)(read(r))();
        };
      };
    },
    Monad0: function() {
      return monadEffect;
    }
  };

  // output/Effect.Class/index.js
  var monadEffectEffect = {
    liftEffect: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/Control.Monad.Except.Trans/index.js
  var map4 = /* @__PURE__ */ map(functorEither);
  var ExceptT = function(x) {
    return x;
  };
  var runExceptT = function(v2) {
    return v2;
  };
  var mapExceptT = function(f) {
    return function(v2) {
      return f(v2);
    };
  };
  var functorExceptT = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return {
      map: function(f) {
        return mapExceptT(map111(map4(f)));
      }
    };
  };
  var monadExceptT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeExceptT(dictMonad);
      },
      Bind1: function() {
        return bindExceptT(dictMonad);
      }
    };
  };
  var bindExceptT = function(dictMonad) {
    var bind11 = bind(dictMonad.Bind1());
    var pure15 = pure(dictMonad.Applicative0());
    return {
      bind: function(v2) {
        return function(k) {
          return bind11(v2)(either(function($193) {
            return pure15(Left.create($193));
          })(function(a3) {
            var v1 = k(a3);
            return v1;
          }));
        };
      },
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var applyExceptT = function(dictMonad) {
    var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadExceptT(dictMonad)),
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
  var applicativeExceptT = function(dictMonad) {
    return {
      pure: function() {
        var $194 = pure(dictMonad.Applicative0());
        return function($195) {
          return ExceptT($194(Right.create($195)));
        };
      }(),
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var monadThrowExceptT = function(dictMonad) {
    var monadExceptT1 = monadExceptT(dictMonad);
    return {
      throwError: function() {
        var $204 = pure(dictMonad.Applicative0());
        return function($205) {
          return ExceptT($204(Left.create($205)));
        };
      }(),
      Monad0: function() {
        return monadExceptT1;
      }
    };
  };
  var altExceptT = function(dictSemigroup) {
    var append9 = append(dictSemigroup);
    return function(dictMonad) {
      var Bind1 = dictMonad.Bind1();
      var bind11 = bind(Bind1);
      var pure15 = pure(dictMonad.Applicative0());
      var functorExceptT1 = functorExceptT(Bind1.Apply0().Functor0());
      return {
        alt: function(v2) {
          return function(v1) {
            return bind11(v2)(function(rm) {
              if (rm instanceof Right) {
                return pure15(new Right(rm.value0));
              }
              ;
              if (rm instanceof Left) {
                return bind11(v1)(function(rn) {
                  if (rn instanceof Right) {
                    return pure15(new Right(rn.value0));
                  }
                  ;
                  if (rn instanceof Left) {
                    return pure15(new Left(append9(rm.value0)(rn.value0)));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 87, column 9 - line 89, column 49): " + [rn.constructor.name]);
                });
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 83, column 5 - line 89, column 49): " + [rm.constructor.name]);
            });
          };
        },
        Functor0: function() {
          return functorExceptT1;
        }
      };
    };
  };

  // output/Control.Parallel.Class/index.js
  var sequential = function(dict) {
    return dict.sequential;
  };
  var parallel = function(dict) {
    return dict.parallel;
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = /* @__PURE__ */ function() {
    function array1(a3) {
      return [a3];
    }
    function array2(a3) {
      return function(b2) {
        return [a3, b2];
      };
    }
    function array3(a3) {
      return function(b2) {
        return function(c2) {
          return [a3, b2, c2];
        };
      };
    }
    function concat2(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply3) {
      return function(map30) {
        return function(pure15) {
          return function(f) {
            return function(array) {
              function go2(bot, top3) {
                switch (top3 - bot) {
                  case 0:
                    return pure15([]);
                  case 1:
                    return map30(array1)(f(array[bot]));
                  case 2:
                    return apply3(map30(array2)(f(array[bot])))(f(array[bot + 1]));
                  case 3:
                    return apply3(apply3(map30(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top3 - bot) / 4) * 2;
                    return apply3(map30(concat2)(go2(bot, pivot)))(go2(pivot, top3));
                }
              }
              return go2(0, array.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Traversable/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var traverse = function(dict) {
    return dict.traverse;
  };
  var sequenceDefault = function(dictTraversable) {
    var traverse22 = traverse(dictTraversable);
    return function(dictApplicative) {
      return traverse22(dictApplicative)(identity4);
    };
  };
  var traversableArray = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      return traverseArrayImpl(apply(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
    },
    sequence: function(dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
    },
    Functor0: function() {
      return functorArray;
    },
    Foldable1: function() {
      return foldableArray;
    }
  };

  // output/Control.Parallel/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var parTraverse_ = function(dictParallel) {
    var sequential3 = sequential(dictParallel);
    var parallel4 = parallel(dictParallel);
    return function(dictApplicative) {
      var traverse_7 = traverse_(dictApplicative);
      return function(dictFoldable) {
        var traverse_14 = traverse_7(dictFoldable);
        return function(f) {
          var $51 = traverse_14(function($53) {
            return parallel4(f($53));
          });
          return function($52) {
            return sequential3($51($52));
          };
        };
      };
    };
  };
  var parSequence_ = function(dictParallel) {
    var parTraverse_1 = parTraverse_(dictParallel);
    return function(dictApplicative) {
      var parTraverse_2 = parTraverse_1(dictApplicative);
      return function(dictFoldable) {
        return parTraverse_2(dictFoldable)(identity5);
      };
    };
  };

  // output/Effect.Unsafe/foreign.js
  var unsafePerformEffect = function(f) {
    return f();
  };

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f) {
    return f();
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg) {
    throw new Error(msg);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg) {
    return unsafePartial(function() {
      return crashWith2(msg);
    });
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy2 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var pure2 = /* @__PURE__ */ pure(applicativeEffect);
  var $$void3 = /* @__PURE__ */ $$void(functorEffect);
  var map5 = /* @__PURE__ */ map(functorEffect);
  var Canceler = function(x) {
    return x;
  };
  var suspendAff = /* @__PURE__ */ _fork(false);
  var functorParAff = {
    map: _parAffMap
  };
  var functorAff = {
    map: _map
  };
  var map1 = /* @__PURE__ */ map(functorAff);
  var forkAff = /* @__PURE__ */ _fork(true);
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v2) {
      if (v2 instanceof Right) {
        return v2.value0;
      }
      ;
      if (v2 instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 412, column 21 - line 414, column 54): " + [v2.constructor.name]);
    };
    var unsafeFromLeft = function(v2) {
      if (v2 instanceof Left) {
        return v2.value0;
      }
      ;
      if (v2 instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 20 - line 409, column 55): " + [v2.constructor.name]);
    };
    var isLeft = function(v2) {
      if (v2 instanceof Left) {
        return true;
      }
      ;
      if (v2 instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 12 - line 404, column 21): " + [v2.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do2() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var bracket = function(acquire) {
    return function(completed) {
      return generalBracket(acquire)({
        killed: $$const(completed),
        failed: $$const(completed),
        completed: $$const(completed)
      });
    };
  };
  var applyParAff = {
    apply: _parAffApply,
    Functor0: function() {
      return functorParAff;
    }
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy2("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var applyAff = /* @__PURE__ */ $lazy_applyAff(73);
  var pure22 = /* @__PURE__ */ pure(applicativeAff);
  var bind1 = /* @__PURE__ */ bind(bindAff);
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindAff);
  var $$finally = function(fin) {
    return function(a3) {
      return bracket(pure22(unit))($$const(fin))($$const(a3));
    };
  };
  var parallelAff = {
    parallel: unsafeCoerce2,
    sequential: _sequential,
    Apply0: function() {
      return applyAff;
    },
    Apply1: function() {
      return applyParAff;
    }
  };
  var parallel2 = /* @__PURE__ */ parallel(parallelAff);
  var applicativeParAff = {
    pure: function($76) {
      return parallel2(pure22($76));
    },
    Apply0: function() {
      return applyParAff;
    }
  };
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var effectCanceler = function($77) {
    return Canceler($$const(liftEffect2($77)));
  };
  var joinFiber = function(v2) {
    return makeAff(function(k) {
      return map5(effectCanceler)(v2.join(k));
    });
  };
  var functorFiber = {
    map: function(f) {
      return function(t2) {
        return unsafePerformEffect(makeFiber(map1(f)(joinFiber(t2))));
      };
    }
  };
  var killFiber = function(e) {
    return function(v2) {
      return bind1(liftEffect2(v2.isSuspended))(function(suspended) {
        if (suspended) {
          return liftEffect2($$void3(v2.kill(e, $$const(pure2(unit)))));
        }
        ;
        return makeAff(function(k) {
          return map5(effectCanceler)(v2.kill(e, k));
        });
      });
    };
  };
  var monadThrowAff = {
    throwError: _throwError,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadErrorAff = {
    catchError: _catchError,
    MonadThrow0: function() {
      return monadThrowAff;
    }
  };
  var $$try2 = /* @__PURE__ */ $$try(monadErrorAff);
  var runAff = function(k) {
    return function(aff) {
      return launchAff(bindFlipped3(function($83) {
        return liftEffect2(k($83));
      })($$try2(aff)));
    };
  };
  var runAff_ = function(k) {
    return function(aff) {
      return $$void3(runAff(k)(aff));
    };
  };
  var monadRecAff = {
    tailRecM: function(k) {
      var go2 = function(a3) {
        return bind1(k(a3))(function(res) {
          if (res instanceof Done) {
            return pure22(res.value0);
          }
          ;
          if (res instanceof Loop) {
            return go2(res.value0);
          }
          ;
          throw new Error("Failed pattern match at Effect.Aff (line 104, column 7 - line 106, column 23): " + [res.constructor.name]);
        });
      };
      return go2;
    },
    Monad0: function() {
      return monadAff;
    }
  };
  var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure22(unit));

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp = function(name15) {
    return function(node) {
      return function() {
        return node[name15];
      };
    };
  };
  var children = getEffProp("children");
  var _firstElementChild = getEffProp("firstElementChild");
  var _lastElementChild = getEffProp("lastElementChild");
  var childElementCount = getEffProp("childElementCount");
  function _querySelector(selector) {
    return function(node) {
      return function() {
        return node.querySelector(selector);
      };
    };
  }

  // output/Data.Nullable/foreign.js
  var nullImpl = null;
  function nullable(a3, r, f) {
    return a3 == null ? r : f(a3);
  }
  function notNull(x) {
    return x;
  }

  // output/Data.Nullable/index.js
  var toNullable = /* @__PURE__ */ maybe(nullImpl)(notNull);
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Web.DOM.ParentNode/index.js
  var map6 = /* @__PURE__ */ map(functorEffect);
  var querySelector = function(qs) {
    var $2 = map6(toMaybe);
    var $3 = _querySelector(qs);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Web.Event.EventTarget/foreign.js
  function eventListener(fn) {
    return function() {
      return function(event) {
        return fn(event)();
      };
    };
  }
  function addEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target6) {
          return function() {
            return target6.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }
  function removeEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target6) {
          return function() {
            return target6.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.Common/index.js
  var ClassName = function(x) {
    return x;
  };

  // output/Web.HTML.HTMLDocument/foreign.js
  function _readyState(doc) {
    return doc.readyState;
  }

  // output/Web.HTML.HTMLDocument.ReadyState/index.js
  var Loading = /* @__PURE__ */ function() {
    function Loading2() {
    }
    ;
    Loading2.value = new Loading2();
    return Loading2;
  }();
  var Interactive = /* @__PURE__ */ function() {
    function Interactive2() {
    }
    ;
    Interactive2.value = new Interactive2();
    return Interactive2;
  }();
  var Complete = /* @__PURE__ */ function() {
    function Complete2() {
    }
    ;
    Complete2.value = new Complete2();
    return Complete2;
  }();
  var parse = function(v2) {
    if (v2 === "loading") {
      return new Just(Loading.value);
    }
    ;
    if (v2 === "interactive") {
      return new Just(Interactive.value);
    }
    ;
    if (v2 === "complete") {
      return new Just(Complete.value);
    }
    ;
    return Nothing.value;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var map7 = /* @__PURE__ */ map(functorEffect);
  var toParentNode = unsafeCoerce2;
  var toDocument = unsafeCoerce2;
  var readyState = function(doc) {
    return map7(function() {
      var $4 = fromMaybe(Loading.value);
      return function($5) {
        return $4(parse($5));
      };
    }())(function() {
      return _readyState(doc);
    });
  };

  // output/Web.HTML.HTMLElement/foreign.js
  function _read(nothing, just, value12) {
    var tag = Object.prototype.toString.call(value12);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value12);
    } else {
      return nothing;
    }
  }

  // output/Web.HTML.HTMLElement/index.js
  var toNode = unsafeCoerce2;
  var fromElement = function(x) {
    return _read(Nothing.value, Just.create, x);
  };

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn2 = function mkEffectFn22(fn) {
    return function(a3, b2) {
      return fn(a3)(b2)();
    };
  };
  var runEffectFn1 = function runEffectFn12(fn) {
    return function(a3) {
      return function() {
        return fn(a3);
      };
    };
  };
  var runEffectFn3 = function runEffectFn32(fn) {
    return function(a3) {
      return function(b2) {
        return function(c2) {
          return function() {
            return fn(a3, b2, c2);
          };
        };
      };
    };
  };

  // output/Web.HTML.Window/foreign.js
  function document(window2) {
    return function() {
      return window2.document;
    };
  }
  function scrollX(window2) {
    return function() {
      return window2.scrollX;
    };
  }
  function scrollY(window2) {
    return function() {
      return window2.scrollY;
    };
  }

  // output/Web.HTML.Window/index.js
  var toEventTarget = unsafeCoerce2;

  // output/Web.HTML.Event.EventTypes/index.js
  var domcontentloaded = "DOMContentLoaded";

  // output/Halogen.Aff.Util/index.js
  var bind2 = /* @__PURE__ */ bind(bindAff);
  var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindEffect);
  var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(bindEffect);
  var pure3 = /* @__PURE__ */ pure(applicativeAff);
  var bindFlipped1 = /* @__PURE__ */ bindFlipped(bindMaybe);
  var pure1 = /* @__PURE__ */ pure(applicativeEffect);
  var map8 = /* @__PURE__ */ map(functorEffect);
  var discard2 = /* @__PURE__ */ discard(discardUnit);
  var throwError2 = /* @__PURE__ */ throwError(monadThrowAff);
  var selectElement = function(query3) {
    return bind2(liftEffect3(bindFlipped4(composeKleisliFlipped2(function() {
      var $16 = querySelector(query3);
      return function($17) {
        return $16(toParentNode($17));
      };
    }())(document))(windowImpl)))(function(mel) {
      return pure3(bindFlipped1(fromElement)(mel));
    });
  };
  var runHalogenAff = /* @__PURE__ */ runAff_(/* @__PURE__ */ either(throwException)(/* @__PURE__ */ $$const(/* @__PURE__ */ pure1(unit))));
  var awaitLoad = /* @__PURE__ */ makeAff(function(callback) {
    return function __do2() {
      var rs = bindFlipped4(readyState)(bindFlipped4(document)(windowImpl))();
      if (rs instanceof Loading) {
        var et = map8(toEventTarget)(windowImpl)();
        var listener = eventListener(function(v2) {
          return callback(new Right(unit));
        })();
        addEventListener(domcontentloaded)(listener)(false)(et)();
        return effectCanceler(removeEventListener(domcontentloaded)(listener)(false)(et));
      }
      ;
      callback(new Right(unit))();
      return nonCanceler;
    };
  });
  var awaitBody = /* @__PURE__ */ discard2(bindAff)(awaitLoad)(function() {
    return bind2(selectElement("body"))(function(body2) {
      return maybe(throwError2(error("Could not find body")))(pure3)(body2);
    });
  });

  // output/Data.Exists/index.js
  var runExists = unsafeCoerce2;
  var mkExists = unsafeCoerce2;

  // output/Data.Coyoneda/index.js
  var CoyonedaF = /* @__PURE__ */ function() {
    function CoyonedaF2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CoyonedaF2.create = function(value0) {
      return function(value1) {
        return new CoyonedaF2(value0, value1);
      };
    };
    return CoyonedaF2;
  }();
  var unCoyoneda = function(f) {
    return function(v2) {
      return runExists(function(v1) {
        return f(v1.value0)(v1.value1);
      })(v2);
    };
  };
  var coyoneda = function(k) {
    return function(fi) {
      return mkExists(new CoyonedaF(k, fi));
    };
  };
  var functorCoyoneda = {
    map: function(f) {
      return function(v2) {
        return runExists(function(v1) {
          return coyoneda(function($180) {
            return f(v1.value0($180));
          })(v1.value1);
        })(v2);
      };
    }
  };
  var liftCoyoneda = /* @__PURE__ */ coyoneda(/* @__PURE__ */ identity(categoryFn));

  // output/Data.FunctorWithIndex/index.js
  var mapWithIndex = function(dict) {
    return dict.mapWithIndex;
  };

  // output/Data.FoldableWithIndex/index.js
  var unwrap3 = /* @__PURE__ */ unwrap();
  var monoidEndo3 = /* @__PURE__ */ monoidEndo(categoryFn);
  var monoidDual3 = /* @__PURE__ */ monoidDual(monoidEndo3);
  var foldMapWithIndex = function(dict) {
    return dict.foldMapWithIndex;
  };
  var foldlWithIndexDefault = function(dictFoldableWithIndex) {
    var foldMapWithIndex1 = foldMapWithIndex(dictFoldableWithIndex)(monoidDual3);
    return function(c2) {
      return function(u2) {
        return function(xs) {
          return unwrap3(unwrap3(foldMapWithIndex1(function(i2) {
            var $313 = flip(c2(i2));
            return function($314) {
              return Dual(Endo($313($314)));
            };
          })(xs)))(u2);
        };
      };
    };
  };
  var foldrWithIndexDefault = function(dictFoldableWithIndex) {
    var foldMapWithIndex1 = foldMapWithIndex(dictFoldableWithIndex)(monoidEndo3);
    return function(c2) {
      return function(u2) {
        return function(xs) {
          return unwrap3(foldMapWithIndex1(function(i2) {
            var $315 = c2(i2);
            return function($316) {
              return Endo($315($316));
            };
          })(xs))(u2);
        };
      };
    };
  };

  // output/Data.NonEmpty/index.js
  var NonEmpty = /* @__PURE__ */ function() {
    function NonEmpty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NonEmpty2.create = function(value0) {
      return function(value1) {
        return new NonEmpty2(value0, value1);
      };
    };
    return NonEmpty2;
  }();
  var singleton2 = function(dictPlus) {
    var empty9 = empty(dictPlus);
    return function(a3) {
      return new NonEmpty(a3, empty9);
    };
  };

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil2() {
    }
    ;
    Nil2.value = new Nil2();
    return Nil2;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons2.create = function(value0) {
      return function(value1) {
        return new Cons2(value0, value1);
      };
    };
    return Cons2;
  }();
  var NonEmptyList = function(x) {
    return x;
  };
  var toList = function(v2) {
    return new Cons(v2.value0, v2.value1);
  };
  var listMap = function(f) {
    var chunkedRevMap = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v2, v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Cons)) {
            $tco_var_v = new Cons(v1, v2);
            $copy_v1 = v1.value1.value1.value1;
            return;
          }
          ;
          var unrolledMap = function(v22) {
            if (v22 instanceof Cons && (v22.value1 instanceof Cons && v22.value1.value1 instanceof Nil)) {
              return new Cons(f(v22.value0), new Cons(f(v22.value1.value0), Nil.value));
            }
            ;
            if (v22 instanceof Cons && v22.value1 instanceof Nil) {
              return new Cons(f(v22.value0), Nil.value);
            }
            ;
            return Nil.value;
          };
          var reverseUnrolledMap = function($copy_v2) {
            return function($copy_v3) {
              var $tco_var_v2 = $copy_v2;
              var $tco_done1 = false;
              var $tco_result2;
              function $tco_loop2(v22, v3) {
                if (v22 instanceof Cons && (v22.value0 instanceof Cons && (v22.value0.value1 instanceof Cons && v22.value0.value1.value1 instanceof Cons))) {
                  $tco_var_v2 = v22.value1;
                  $copy_v3 = new Cons(f(v22.value0.value0), new Cons(f(v22.value0.value1.value0), new Cons(f(v22.value0.value1.value1.value0), v3)));
                  return;
                }
                ;
                $tco_done1 = true;
                return v3;
              }
              ;
              while (!$tco_done1) {
                $tco_result2 = $tco_loop2($tco_var_v2, $copy_v3);
              }
              ;
              return $tco_result2;
            };
          };
          $tco_done = true;
          return reverseUnrolledMap(v2)(unrolledMap(v1));
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return chunkedRevMap(Nil.value);
  };
  var functorList = {
    map: listMap
  };
  var foldableList = {
    foldr: function(f) {
      return function(b2) {
        var rev3 = function() {
          var go2 = function($copy_v) {
            return function($copy_v1) {
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v2, v1) {
                if (v1 instanceof Nil) {
                  $tco_done = true;
                  return v2;
                }
                ;
                if (v1 instanceof Cons) {
                  $tco_var_v = new Cons(v1.value0, v2);
                  $copy_v1 = v1.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [v2.constructor.name, v1.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $copy_v1);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $284 = foldl(foldableList)(flip(f))(b2);
        return function($285) {
          return $284(rev3($285));
        };
      };
    },
    foldl: function(f) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b2, v2) {
            if (v2 instanceof Nil) {
              $tco_done1 = true;
              return b2;
            }
            ;
            if (v2 instanceof Cons) {
              $tco_var_b = f(b2)(v2.value0);
              $copy_v = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v2.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append22 = append(dictMonoid.Semigroup0());
      var mempty2 = mempty(dictMonoid);
      return function(f) {
        return foldl(foldableList)(function(acc) {
          var $286 = append22(acc);
          return function($287) {
            return $286(f($287));
          };
        })(mempty2);
      };
    }
  };
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var semigroupList = {
    append: function(xs) {
      return function(ys) {
        return foldr2(Cons.create)(ys)(xs);
      };
    }
  };
  var append1 = /* @__PURE__ */ append(semigroupList);
  var semigroupNonEmptyList = {
    append: function(v2) {
      return function(as$prime) {
        return new NonEmpty(v2.value0, append1(v2.value1)(toList(as$prime)));
      };
    }
  };
  var altList = {
    alt: append1,
    Functor0: function() {
      return functorList;
    }
  };
  var plusList = /* @__PURE__ */ function() {
    return {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
  }();

  // output/Data.Map.Internal/index.js
  var $runtime_lazy3 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var map9 = /* @__PURE__ */ map(functorMaybe);
  var Leaf = /* @__PURE__ */ function() {
    function Leaf2() {
    }
    ;
    Leaf2.value = new Leaf2();
    return Leaf2;
  }();
  var Node = /* @__PURE__ */ function() {
    function Node2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    Node2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new Node2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return Node2;
  }();
  var Split = /* @__PURE__ */ function() {
    function Split2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Split2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Split2(value0, value1, value22);
        };
      };
    };
    return Split2;
  }();
  var SplitLast = /* @__PURE__ */ function() {
    function SplitLast2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    SplitLast2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new SplitLast2(value0, value1, value22);
        };
      };
    };
    return SplitLast2;
  }();
  var unsafeNode = function(k, v2, l2, r) {
    if (l2 instanceof Leaf) {
      if (r instanceof Leaf) {
        return new Node(1, 1, k, v2, l2, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + r.value0 | 0, 1 + r.value1 | 0, k, v2, l2, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 702, column 5 - line 706, column 39): " + [r.constructor.name]);
    }
    ;
    if (l2 instanceof Node) {
      if (r instanceof Leaf) {
        return new Node(1 + l2.value0 | 0, 1 + l2.value1 | 0, k, v2, l2, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + function() {
          var $280 = l2.value0 > r.value0;
          if ($280) {
            return l2.value0;
          }
          ;
          return r.value0;
        }() | 0, (1 + l2.value1 | 0) + r.value1 | 0, k, v2, l2, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 708, column 5 - line 712, column 68): " + [r.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 700, column 32 - line 712, column 68): " + [l2.constructor.name]);
  };
  var singleton3 = function(k) {
    return function(v2) {
      return new Node(1, 1, k, v2, Leaf.value, Leaf.value);
    };
  };
  var unsafeBalancedNode = /* @__PURE__ */ function() {
    var height8 = function(v2) {
      if (v2 instanceof Leaf) {
        return 0;
      }
      ;
      if (v2 instanceof Node) {
        return v2.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 757, column 12 - line 759, column 26): " + [v2.constructor.name]);
    };
    var rotateLeft = function(k, v2, l2, rk, rv, rl, rr) {
      if (rl instanceof Node && rl.value0 > height8(rr)) {
        return unsafeNode(rl.value2, rl.value3, unsafeNode(k, v2, l2, rl.value4), unsafeNode(rk, rv, rl.value5, rr));
      }
      ;
      return unsafeNode(rk, rv, unsafeNode(k, v2, l2, rl), rr);
    };
    var rotateRight = function(k, v2, lk, lv, ll, lr, r) {
      if (lr instanceof Node && height8(ll) <= lr.value0) {
        return unsafeNode(lr.value2, lr.value3, unsafeNode(lk, lv, ll, lr.value4), unsafeNode(k, v2, lr.value5, r));
      }
      ;
      return unsafeNode(lk, lv, ll, unsafeNode(k, v2, lr, r));
    };
    return function(k, v2, l2, r) {
      if (l2 instanceof Leaf) {
        if (r instanceof Leaf) {
          return singleton3(k)(v2);
        }
        ;
        if (r instanceof Node && r.value0 > 1) {
          return rotateLeft(k, v2, l2, r.value2, r.value3, r.value4, r.value5);
        }
        ;
        return unsafeNode(k, v2, l2, r);
      }
      ;
      if (l2 instanceof Node) {
        if (r instanceof Node) {
          if (r.value0 > (l2.value0 + 1 | 0)) {
            return rotateLeft(k, v2, l2, r.value2, r.value3, r.value4, r.value5);
          }
          ;
          if (l2.value0 > (r.value0 + 1 | 0)) {
            return rotateRight(k, v2, l2.value2, l2.value3, l2.value4, l2.value5, r);
          }
          ;
        }
        ;
        if (r instanceof Leaf && l2.value0 > 1) {
          return rotateRight(k, v2, l2.value2, l2.value3, l2.value4, l2.value5, r);
        }
        ;
        return unsafeNode(k, v2, l2, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 717, column 40 - line 738, column 34): " + [l2.constructor.name]);
    };
  }();
  var $lazy_unsafeSplit = /* @__PURE__ */ $runtime_lazy3("unsafeSplit", "Data.Map.Internal", function() {
    return function(comp, k, m2) {
      if (m2 instanceof Leaf) {
        return new Split(Nothing.value, Leaf.value, Leaf.value);
      }
      ;
      if (m2 instanceof Node) {
        var v2 = comp(k)(m2.value2);
        if (v2 instanceof LT) {
          var v1 = $lazy_unsafeSplit(793)(comp, k, m2.value4);
          return new Split(v1.value0, v1.value1, unsafeBalancedNode(m2.value2, m2.value3, v1.value2, m2.value5));
        }
        ;
        if (v2 instanceof GT) {
          var v1 = $lazy_unsafeSplit(796)(comp, k, m2.value5);
          return new Split(v1.value0, unsafeBalancedNode(m2.value2, m2.value3, m2.value4, v1.value1), v1.value2);
        }
        ;
        if (v2 instanceof EQ) {
          return new Split(new Just(m2.value3), m2.value4, m2.value5);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 791, column 5 - line 799, column 30): " + [v2.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 787, column 34 - line 799, column 30): " + [m2.constructor.name]);
    };
  });
  var unsafeSplit = /* @__PURE__ */ $lazy_unsafeSplit(786);
  var $lazy_unsafeSplitLast = /* @__PURE__ */ $runtime_lazy3("unsafeSplitLast", "Data.Map.Internal", function() {
    return function(k, v2, l2, r) {
      if (r instanceof Leaf) {
        return new SplitLast(k, v2, l2);
      }
      ;
      if (r instanceof Node) {
        var v1 = $lazy_unsafeSplitLast(779)(r.value2, r.value3, r.value4, r.value5);
        return new SplitLast(v1.value0, v1.value1, unsafeBalancedNode(k, v2, l2, v1.value2));
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 776, column 37 - line 780, column 57): " + [r.constructor.name]);
    };
  });
  var unsafeSplitLast = /* @__PURE__ */ $lazy_unsafeSplitLast(775);
  var unsafeJoinNodes = function(v2, v1) {
    if (v2 instanceof Leaf) {
      return v1;
    }
    ;
    if (v2 instanceof Node) {
      var v22 = unsafeSplitLast(v2.value2, v2.value3, v2.value4, v2.value5);
      return unsafeBalancedNode(v22.value0, v22.value1, v22.value2, v1);
    }
    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 764, column 25 - line 768, column 38): " + [v2.constructor.name, v1.constructor.name]);
  };
  var pop = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(k) {
      return function(m2) {
        var v2 = unsafeSplit(compare3, k, m2);
        return map9(function(a3) {
          return new Tuple(a3, unsafeJoinNodes(v2.value1, v2.value2));
        })(v2.value0);
      };
    };
  };
  var lookup = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(k) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v2) {
          if (v2 instanceof Leaf) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v2 instanceof Node) {
            var v1 = compare3(k)(v2.value2);
            if (v1 instanceof LT) {
              $copy_v = v2.value4;
              return;
            }
            ;
            if (v1 instanceof GT) {
              $copy_v = v2.value5;
              return;
            }
            ;
            if (v1 instanceof EQ) {
              $tco_done = true;
              return new Just(v2.value3);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 283, column 7 - line 286, column 22): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 8 - line 286, column 22): " + [v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var insert = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(k) {
      return function(v2) {
        var go2 = function(v1) {
          if (v1 instanceof Leaf) {
            return singleton3(k)(v2);
          }
          ;
          if (v1 instanceof Node) {
            var v22 = compare3(k)(v1.value2);
            if (v22 instanceof LT) {
              return unsafeBalancedNode(v1.value2, v1.value3, go2(v1.value4), v1.value5);
            }
            ;
            if (v22 instanceof GT) {
              return unsafeBalancedNode(v1.value2, v1.value3, v1.value4, go2(v1.value5));
            }
            ;
            if (v22 instanceof EQ) {
              return new Node(v1.value0, v1.value1, k, v2, v1.value4, v1.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 471, column 7 - line 474, column 35): " + [v22.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 8 - line 474, column 35): " + [v1.constructor.name]);
        };
        return go2;
      };
    };
  };
  var foldableMap = {
    foldr: function(f) {
      return function(z2) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(m$prime, z$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(172)(m$prime.value4, f(m$prime.value3)($lazy_go(172)(m$prime.value5, z$prime)));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 169, column 26 - line 172, column 43): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(169);
        return function(m2) {
          return go2(m2, z2);
        };
      };
    },
    foldl: function(f) {
      return function(z2) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(z$prime, m$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(178)(f($lazy_go(178)(z$prime, m$prime.value4))(m$prime.value3), m$prime.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 175, column 26 - line 178, column 43): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(175);
        return function(m2) {
          return go2(z2, m2);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty2 = mempty(dictMonoid);
      var append13 = append(dictMonoid.Semigroup0());
      return function(f) {
        var go2 = function(v2) {
          if (v2 instanceof Leaf) {
            return mempty2;
          }
          ;
          if (v2 instanceof Node) {
            return append13(go2(v2.value4))(append13(f(v2.value3))(go2(v2.value5)));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 181, column 10 - line 184, column 28): " + [v2.constructor.name]);
        };
        return go2;
      };
    }
  };
  var empty2 = /* @__PURE__ */ function() {
    return Leaf.value;
  }();
  var $$delete = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(k) {
      var go2 = function(v2) {
        if (v2 instanceof Leaf) {
          return Leaf.value;
        }
        ;
        if (v2 instanceof Node) {
          var v1 = compare3(k)(v2.value2);
          if (v1 instanceof LT) {
            return unsafeBalancedNode(v2.value2, v2.value3, go2(v2.value4), v2.value5);
          }
          ;
          if (v1 instanceof GT) {
            return unsafeBalancedNode(v2.value2, v2.value3, v2.value4, go2(v2.value5));
          }
          ;
          if (v1 instanceof EQ) {
            return unsafeJoinNodes(v2.value4, v2.value5);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 7 - line 501, column 43): " + [v1.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 8 - line 501, column 43): " + [v2.constructor.name]);
      };
      return go2;
    };
  };
  var alter = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(f) {
      return function(k) {
        return function(m2) {
          var v2 = unsafeSplit(compare3, k, m2);
          var v22 = f(v2.value0);
          if (v22 instanceof Nothing) {
            return unsafeJoinNodes(v2.value1, v2.value2);
          }
          ;
          if (v22 instanceof Just) {
            return unsafeBalancedNode(k, v22.value0, v2.value1, v2.value2);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 514, column 3 - line 518, column 41): " + [v22.constructor.name]);
        };
      };
    };
  };

  // output/Halogen.Data.OrdBox/index.js
  var OrdBox = /* @__PURE__ */ function() {
    function OrdBox2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    OrdBox2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new OrdBox2(value0, value1, value22);
        };
      };
    };
    return OrdBox2;
  }();
  var mkOrdBox = function(dictOrd) {
    return OrdBox.create(eq(dictOrd.Eq0()))(compare(dictOrd));
  };
  var eqOrdBox = {
    eq: function(v2) {
      return function(v1) {
        return v2.value0(v2.value2)(v1.value2);
      };
    }
  };
  var ordOrdBox = {
    compare: function(v2) {
      return function(v1) {
        return v2.value1(v2.value2)(v1.value2);
      };
    },
    Eq0: function() {
      return eqOrdBox;
    }
  };

  // output/Halogen.Data.Slot/index.js
  var ordTuple2 = /* @__PURE__ */ ordTuple(ordString)(ordOrdBox);
  var pop1 = /* @__PURE__ */ pop(ordTuple2);
  var lookup1 = /* @__PURE__ */ lookup(ordTuple2);
  var insert1 = /* @__PURE__ */ insert(ordTuple2);
  var pop2 = function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(dictOrd) {
        var mkOrdBox2 = mkOrdBox(dictOrd);
        return function(sym) {
          return function(key) {
            return function(v2) {
              return pop1(new Tuple(reflectSymbol2(sym), mkOrdBox2(key)))(v2);
            };
          };
        };
      };
    };
  };
  var lookup2 = function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(dictOrd) {
        var mkOrdBox2 = mkOrdBox(dictOrd);
        return function(sym) {
          return function(key) {
            return function(v2) {
              return lookup1(new Tuple(reflectSymbol2(sym), mkOrdBox2(key)))(v2);
            };
          };
        };
      };
    };
  };
  var insert2 = function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(dictOrd) {
        var mkOrdBox2 = mkOrdBox(dictOrd);
        return function(sym) {
          return function(key) {
            return function(val) {
              return function(v2) {
                return insert1(new Tuple(reflectSymbol2(sym), mkOrdBox2(key)))(val)(v2);
              };
            };
          };
        };
      };
    };
  };
  var foreachSlot = function(dictApplicative) {
    var traverse_7 = traverse_(dictApplicative)(foldableMap);
    return function(v2) {
      return function(k) {
        return traverse_7(function($54) {
          return k($54);
        })(v2);
      };
    };
  };
  var empty3 = empty2;

  // output/Data.String.Common/foreign.js
  var toUpper = function(s2) {
    return s2.toUpperCase();
  };
  var joinWith = function(s2) {
    return function(xs) {
      return xs.join(s2);
    };
  };

  // output/Halogen.Query.Input/index.js
  var RefUpdate = /* @__PURE__ */ function() {
    function RefUpdate2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    RefUpdate2.create = function(value0) {
      return function(value1) {
        return new RefUpdate2(value0, value1);
      };
    };
    return RefUpdate2;
  }();
  var Action = /* @__PURE__ */ function() {
    function Action3(value0) {
      this.value0 = value0;
    }
    ;
    Action3.create = function(value0) {
      return new Action3(value0);
    };
    return Action3;
  }();

  // output/Data.Array/foreign.js
  var rangeImpl = function(start2, end) {
    var step3 = start2 > end ? -1 : 1;
    var result = new Array(step3 * (end - start2) + 1);
    var i2 = start2, n = 0;
    while (i2 !== end) {
      result[n++] = i2;
      i2 += step3;
    }
    result[n] = i2;
    return result;
  };
  var replicateFill = function(count, value12) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value12);
  };
  var replicatePolyfill = function(count, value12) {
    var result = [];
    var n = 0;
    for (var i2 = 0; i2 < count; i2++) {
      result[n++] = value12;
    }
    return result;
  };
  var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var length3 = function(xs) {
    return xs.length;
  };
  var findIndexImpl = function(just, nothing, f, xs) {
    for (var i2 = 0, l2 = xs.length; i2 < l2; i2++) {
      if (f(xs[i2])) return just(i2);
    }
    return nothing;
  };
  var _deleteAt = function(just, nothing, i2, l2) {
    if (i2 < 0 || i2 >= l2.length) return nothing;
    var l1 = l2.slice();
    l1.splice(i2, 1);
    return just(l1);
  };
  var concat = function(xss) {
    if (xss.length <= 1e4) {
      return Array.prototype.concat.apply([], xss);
    }
    var result = [];
    for (var i2 = 0, l2 = xss.length; i2 < l2; i2++) {
      var xs = xss[i2];
      for (var j = 0, m2 = xs.length; j < m2; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };
  var filterImpl = function(f, xs) {
    return xs.filter(f);
  };
  var sliceImpl = function(s2, e, l2) {
    return l2.slice(s2, e);
  };

  // output/Data.Array.ST/foreign.js
  function unsafeFreezeThawImpl(xs) {
    return xs;
  }
  var unsafeFreezeImpl = unsafeFreezeThawImpl;
  function copyImpl(xs) {
    return xs.slice();
  }
  var thawImpl = copyImpl;
  var pushImpl = function(a3, xs) {
    return xs.push(a3);
  };

  // output/Control.Monad.ST.Uncurried/foreign.js
  var runSTFn1 = function runSTFn12(fn) {
    return function(a3) {
      return function() {
        return fn(a3);
      };
    };
  };
  var runSTFn2 = function runSTFn22(fn) {
    return function(a3) {
      return function(b2) {
        return function() {
          return fn(a3, b2);
        };
      };
    };
  };

  // output/Data.Array.ST/index.js
  var unsafeFreeze = /* @__PURE__ */ runSTFn1(unsafeFreezeImpl);
  var thaw = /* @__PURE__ */ runSTFn1(thawImpl);
  var withArray = function(f) {
    return function(xs) {
      return function __do2() {
        var result = thaw(xs)();
        f(result)();
        return unsafeFreeze(result)();
      };
    };
  };
  var push = /* @__PURE__ */ runSTFn2(pushImpl);

  // output/Data.Function.Uncurried/foreign.js
  var runFn2 = function(fn) {
    return function(a3) {
      return function(b2) {
        return fn(a3, b2);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a3) {
      return function(b2) {
        return function(c2) {
          return fn(a3, b2, c2);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a3) {
      return function(b2) {
        return function(c2) {
          return function(d2) {
            return fn(a3, b2, c2, d2);
          };
        };
      };
    };
  };

  // output/Data.Array/index.js
  var fromJust2 = /* @__PURE__ */ fromJust();
  var snoc = function(xs) {
    return function(x) {
      return withArray(push(x))(xs)();
    };
  };
  var slice = /* @__PURE__ */ runFn3(sliceImpl);
  var take = function(n) {
    return function(xs) {
      var $152 = n < 1;
      if ($152) {
        return [];
      }
      ;
      return slice(0)(n)(xs);
    };
  };
  var singleton4 = function(a3) {
    return [a3];
  };
  var range2 = /* @__PURE__ */ runFn2(rangeImpl);
  var findIndex = /* @__PURE__ */ function() {
    return runFn4(findIndexImpl)(Just.create)(Nothing.value);
  }();
  var filter = /* @__PURE__ */ runFn2(filterImpl);
  var drop = function(n) {
    return function(xs) {
      var $173 = n < 1;
      if ($173) {
        return xs;
      }
      ;
      return slice(n)(length3(xs))(xs);
    };
  };
  var deleteAt = /* @__PURE__ */ function() {
    return runFn4(_deleteAt)(Just.create)(Nothing.value);
  }();
  var deleteBy = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22.length === 0) {
          return [];
        }
        ;
        return maybe(v22)(function(i2) {
          return fromJust2(deleteAt(i2)(v22));
        })(findIndex(v2(v1))(v22));
      };
    };
  };
  var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
  var mapMaybe = function(f) {
    return concatMap(function() {
      var $189 = maybe([])(singleton4);
      return function($190) {
        return $189(f($190));
      };
    }());
  };
  var catMaybes = /* @__PURE__ */ mapMaybe(/* @__PURE__ */ identity(categoryFn));

  // output/Halogen.VDom.Machine/index.js
  var Step = /* @__PURE__ */ function() {
    function Step3(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Step3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Step3(value0, value1, value22, value32);
          };
        };
      };
    };
    return Step3;
  }();
  var unStep = unsafeCoerce2;
  var step2 = function(v2, a3) {
    return v2.value2(v2.value1, a3);
  };
  var mkStep = unsafeCoerce2;
  var halt = function(v2) {
    return v2.value3(v2.value1);
  };
  var extract2 = /* @__PURE__ */ unStep(function(v2) {
    return v2.value0;
  });

  // output/Halogen.VDom.Types/index.js
  var map10 = /* @__PURE__ */ map(functorArray);
  var map12 = /* @__PURE__ */ map(functorTuple);
  var Text = /* @__PURE__ */ function() {
    function Text2(value0) {
      this.value0 = value0;
    }
    ;
    Text2.create = function(value0) {
      return new Text2(value0);
    };
    return Text2;
  }();
  var Elem = /* @__PURE__ */ function() {
    function Elem2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Elem2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Elem2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Elem2;
  }();
  var Keyed = /* @__PURE__ */ function() {
    function Keyed2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Keyed2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Keyed2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Keyed2;
  }();
  var Widget = /* @__PURE__ */ function() {
    function Widget2(value0) {
      this.value0 = value0;
    }
    ;
    Widget2.create = function(value0) {
      return new Widget2(value0);
    };
    return Widget2;
  }();
  var Grafted = /* @__PURE__ */ function() {
    function Grafted2(value0) {
      this.value0 = value0;
    }
    ;
    Grafted2.create = function(value0) {
      return new Grafted2(value0);
    };
    return Grafted2;
  }();
  var Graft = /* @__PURE__ */ function() {
    function Graft2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Graft2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Graft2(value0, value1, value22);
        };
      };
    };
    return Graft2;
  }();
  var unGraft = function(f) {
    return function($61) {
      return f($61);
    };
  };
  var graft = unsafeCoerce2;
  var bifunctorGraft = {
    bimap: function(f) {
      return function(g) {
        return unGraft(function(v2) {
          return graft(new Graft(function($63) {
            return f(v2.value0($63));
          }, function($64) {
            return g(v2.value1($64));
          }, v2.value2));
        });
      };
    }
  };
  var bimap2 = /* @__PURE__ */ bimap(bifunctorGraft);
  var runGraft = /* @__PURE__ */ unGraft(function(v2) {
    var go2 = function(v22) {
      if (v22 instanceof Text) {
        return new Text(v22.value0);
      }
      ;
      if (v22 instanceof Elem) {
        return new Elem(v22.value0, v22.value1, v2.value0(v22.value2), map10(go2)(v22.value3));
      }
      ;
      if (v22 instanceof Keyed) {
        return new Keyed(v22.value0, v22.value1, v2.value0(v22.value2), map10(map12(go2))(v22.value3));
      }
      ;
      if (v22 instanceof Widget) {
        return new Widget(v2.value1(v22.value0));
      }
      ;
      if (v22 instanceof Grafted) {
        return new Grafted(bimap2(v2.value0)(v2.value1)(v22.value0));
      }
      ;
      throw new Error("Failed pattern match at Halogen.VDom.Types (line 86, column 7 - line 86, column 27): " + [v22.constructor.name]);
    };
    return go2(v2.value2);
  });

  // output/Halogen.VDom.Util/foreign.js
  function unsafeGetAny(key, obj) {
    return obj[key];
  }
  function unsafeHasAny(key, obj) {
    return obj.hasOwnProperty(key);
  }
  function unsafeSetAny(key, val, obj) {
    obj[key] = val;
  }
  function forE2(a3, f) {
    var b2 = [];
    for (var i2 = 0; i2 < a3.length; i2++) {
      b2.push(f(i2, a3[i2]));
    }
    return b2;
  }
  function forEachE(a3, f) {
    for (var i2 = 0; i2 < a3.length; i2++) {
      f(a3[i2]);
    }
  }
  function forInE(o, f) {
    var ks = Object.keys(o);
    for (var i2 = 0; i2 < ks.length; i2++) {
      var k = ks[i2];
      f(k, o[k]);
    }
  }
  function diffWithIxE(a1, a22, f1, f2, f3) {
    var a3 = [];
    var l1 = a1.length;
    var l2 = a22.length;
    var i2 = 0;
    while (1) {
      if (i2 < l1) {
        if (i2 < l2) {
          a3.push(f1(i2, a1[i2], a22[i2]));
        } else {
          f2(i2, a1[i2]);
        }
      } else if (i2 < l2) {
        a3.push(f3(i2, a22[i2]));
      } else {
        break;
      }
      i2++;
    }
    return a3;
  }
  function strMapWithIxE(as, fk, f) {
    var o = {};
    for (var i2 = 0; i2 < as.length; i2++) {
      var a3 = as[i2];
      var k = fk(a3);
      o[k] = f(k, i2, a3);
    }
    return o;
  }
  function diffWithKeyAndIxE(o1, as, fk, f1, f2, f3) {
    var o2 = {};
    for (var i2 = 0; i2 < as.length; i2++) {
      var a3 = as[i2];
      var k = fk(a3);
      if (o1.hasOwnProperty(k)) {
        o2[k] = f1(k, i2, o1[k], a3);
      } else {
        o2[k] = f3(k, i2, a3);
      }
    }
    for (var k in o1) {
      if (k in o2) {
        continue;
      }
      f2(k, o1[k]);
    }
    return o2;
  }
  function refEq2(a3, b2) {
    return a3 === b2;
  }
  function createTextNode(s2, doc) {
    return doc.createTextNode(s2);
  }
  function setTextContent(s2, n) {
    n.textContent = s2;
  }
  function createElement(ns, name15, doc) {
    if (ns != null) {
      return doc.createElementNS(ns, name15);
    } else {
      return doc.createElement(name15);
    }
  }
  function insertChildIx(i2, a3, b2) {
    var n = b2.childNodes.item(i2) || null;
    if (n !== a3) {
      b2.insertBefore(a3, n);
    }
  }
  function removeChild(a3, b2) {
    if (b2 && a3.parentNode === b2) {
      b2.removeChild(a3);
    }
  }
  function parentNode(a3) {
    return a3.parentNode;
  }
  function setAttribute(ns, attr3, val, el) {
    if (ns != null) {
      el.setAttributeNS(ns, attr3, val);
    } else {
      el.setAttribute(attr3, val);
    }
  }
  function removeAttribute(ns, attr3, el) {
    if (ns != null) {
      el.removeAttributeNS(ns, attr3);
    } else {
      el.removeAttribute(attr3);
    }
  }
  function hasAttribute(ns, attr3, el) {
    if (ns != null) {
      return el.hasAttributeNS(ns, attr3);
    } else {
      return el.hasAttribute(attr3);
    }
  }
  function addEventListener2(ev, listener, el) {
    el.addEventListener(ev, listener, false);
  }
  function removeEventListener2(ev, listener, el) {
    el.removeEventListener(ev, listener, false);
  }
  var jsUndefined = void 0;

  // output/Foreign.Object.ST/foreign.js
  var newImpl = function() {
    return {};
  };

  // output/Halogen.VDom.Util/index.js
  var unsafeLookup = unsafeGetAny;
  var unsafeFreeze2 = unsafeCoerce2;
  var pokeMutMap = unsafeSetAny;
  var newMutMap = newImpl;

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name15) {
    return function(doctype) {
      return doctype[name15];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function getBoundingClientRect(el) {
    return function() {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height,
        x: rect.x,
        y: rect.y
      };
    };
  }

  // output/Web.DOM.Element/index.js
  var toNode2 = unsafeCoerce2;

  // output/Halogen.VDom.DOM/index.js
  var $runtime_lazy4 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var haltWidget = function(v2) {
    return halt(v2.widget);
  };
  var $lazy_patchWidget = /* @__PURE__ */ $runtime_lazy4("patchWidget", "Halogen.VDom.DOM", function() {
    return function(state3, vdom) {
      if (vdom instanceof Grafted) {
        return $lazy_patchWidget(291)(state3, runGraft(vdom.value0));
      }
      ;
      if (vdom instanceof Widget) {
        var res = step2(state3.widget, vdom.value0);
        var res$prime = unStep(function(v2) {
          return mkStep(new Step(v2.value0, {
            build: state3.build,
            widget: res
          }, $lazy_patchWidget(296), haltWidget));
        })(res);
        return res$prime;
      }
      ;
      haltWidget(state3);
      return state3.build(vdom);
    };
  });
  var patchWidget = /* @__PURE__ */ $lazy_patchWidget(286);
  var haltText = function(v2) {
    var parent2 = parentNode(v2.node);
    return removeChild(v2.node, parent2);
  };
  var $lazy_patchText = /* @__PURE__ */ $runtime_lazy4("patchText", "Halogen.VDom.DOM", function() {
    return function(state3, vdom) {
      if (vdom instanceof Grafted) {
        return $lazy_patchText(82)(state3, runGraft(vdom.value0));
      }
      ;
      if (vdom instanceof Text) {
        if (state3.value === vdom.value0) {
          return mkStep(new Step(state3.node, state3, $lazy_patchText(85), haltText));
        }
        ;
        if (otherwise) {
          var nextState = {
            build: state3.build,
            node: state3.node,
            value: vdom.value0
          };
          setTextContent(vdom.value0, state3.node);
          return mkStep(new Step(state3.node, nextState, $lazy_patchText(89), haltText));
        }
        ;
      }
      ;
      haltText(state3);
      return state3.build(vdom);
    };
  });
  var patchText = /* @__PURE__ */ $lazy_patchText(77);
  var haltKeyed = function(v2) {
    var parent2 = parentNode(v2.node);
    removeChild(v2.node, parent2);
    forInE(v2.children, function(v1, s2) {
      return halt(s2);
    });
    return halt(v2.attrs);
  };
  var haltElem = function(v2) {
    var parent2 = parentNode(v2.node);
    removeChild(v2.node, parent2);
    forEachE(v2.children, halt);
    return halt(v2.attrs);
  };
  var eqElemSpec = function(ns1, v2, ns2, v1) {
    var $63 = v2 === v1;
    if ($63) {
      if (ns1 instanceof Just && (ns2 instanceof Just && ns1.value0 === ns2.value0)) {
        return true;
      }
      ;
      if (ns1 instanceof Nothing && ns2 instanceof Nothing) {
        return true;
      }
      ;
      return false;
    }
    ;
    return false;
  };
  var $lazy_patchElem = /* @__PURE__ */ $runtime_lazy4("patchElem", "Halogen.VDom.DOM", function() {
    return function(state3, vdom) {
      if (vdom instanceof Grafted) {
        return $lazy_patchElem(135)(state3, runGraft(vdom.value0));
      }
      ;
      if (vdom instanceof Elem && eqElemSpec(state3.ns, state3.name, vdom.value0, vdom.value1)) {
        var v2 = length3(vdom.value3);
        var v1 = length3(state3.children);
        if (v1 === 0 && v2 === 0) {
          var attrs2 = step2(state3.attrs, vdom.value2);
          var nextState = {
            build: state3.build,
            node: state3.node,
            attrs: attrs2,
            ns: vdom.value0,
            name: vdom.value1,
            children: state3.children
          };
          return mkStep(new Step(state3.node, nextState, $lazy_patchElem(149), haltElem));
        }
        ;
        var onThis = function(v22, s2) {
          return halt(s2);
        };
        var onThese = function(ix, s2, v22) {
          var res = step2(s2, v22);
          insertChildIx(ix, extract2(res), state3.node);
          return res;
        };
        var onThat = function(ix, v22) {
          var res = state3.build(v22);
          insertChildIx(ix, extract2(res), state3.node);
          return res;
        };
        var children2 = diffWithIxE(state3.children, vdom.value3, onThese, onThis, onThat);
        var attrs2 = step2(state3.attrs, vdom.value2);
        var nextState = {
          build: state3.build,
          node: state3.node,
          attrs: attrs2,
          ns: vdom.value0,
          name: vdom.value1,
          children: children2
        };
        return mkStep(new Step(state3.node, nextState, $lazy_patchElem(172), haltElem));
      }
      ;
      haltElem(state3);
      return state3.build(vdom);
    };
  });
  var patchElem = /* @__PURE__ */ $lazy_patchElem(130);
  var $lazy_patchKeyed = /* @__PURE__ */ $runtime_lazy4("patchKeyed", "Halogen.VDom.DOM", function() {
    return function(state3, vdom) {
      if (vdom instanceof Grafted) {
        return $lazy_patchKeyed(222)(state3, runGraft(vdom.value0));
      }
      ;
      if (vdom instanceof Keyed && eqElemSpec(state3.ns, state3.name, vdom.value0, vdom.value1)) {
        var v2 = length3(vdom.value3);
        if (state3.length === 0 && v2 === 0) {
          var attrs2 = step2(state3.attrs, vdom.value2);
          var nextState = {
            build: state3.build,
            node: state3.node,
            attrs: attrs2,
            ns: vdom.value0,
            name: vdom.value1,
            children: state3.children,
            length: 0
          };
          return mkStep(new Step(state3.node, nextState, $lazy_patchKeyed(237), haltKeyed));
        }
        ;
        var onThis = function(v22, s2) {
          return halt(s2);
        };
        var onThese = function(v22, ix$prime, s2, v3) {
          var res = step2(s2, v3.value1);
          insertChildIx(ix$prime, extract2(res), state3.node);
          return res;
        };
        var onThat = function(v22, ix, v3) {
          var res = state3.build(v3.value1);
          insertChildIx(ix, extract2(res), state3.node);
          return res;
        };
        var children2 = diffWithKeyAndIxE(state3.children, vdom.value3, fst, onThese, onThis, onThat);
        var attrs2 = step2(state3.attrs, vdom.value2);
        var nextState = {
          build: state3.build,
          node: state3.node,
          attrs: attrs2,
          ns: vdom.value0,
          name: vdom.value1,
          children: children2,
          length: v2
        };
        return mkStep(new Step(state3.node, nextState, $lazy_patchKeyed(261), haltKeyed));
      }
      ;
      haltKeyed(state3);
      return state3.build(vdom);
    };
  });
  var patchKeyed = /* @__PURE__ */ $lazy_patchKeyed(217);
  var buildWidget = function(v2, build, w) {
    var res = v2.buildWidget(v2)(w);
    var res$prime = unStep(function(v1) {
      return mkStep(new Step(v1.value0, {
        build,
        widget: res
      }, patchWidget, haltWidget));
    })(res);
    return res$prime;
  };
  var buildText = function(v2, build, s2) {
    var node = createTextNode(s2, v2.document);
    var state3 = {
      build,
      node,
      value: s2
    };
    return mkStep(new Step(node, state3, patchText, haltText));
  };
  var buildKeyed = function(v2, build, ns1, name1, as1, ch1) {
    var el = createElement(toNullable(ns1), name1, v2.document);
    var node = toNode2(el);
    var onChild = function(v1, ix, v22) {
      var res = build(v22.value1);
      insertChildIx(ix, extract2(res), node);
      return res;
    };
    var children2 = strMapWithIxE(ch1, fst, onChild);
    var attrs = v2.buildAttributes(el)(as1);
    var state3 = {
      build,
      node,
      attrs,
      ns: ns1,
      name: name1,
      children: children2,
      length: length3(ch1)
    };
    return mkStep(new Step(node, state3, patchKeyed, haltKeyed));
  };
  var buildElem = function(v2, build, ns1, name1, as1, ch1) {
    var el = createElement(toNullable(ns1), name1, v2.document);
    var node = toNode2(el);
    var onChild = function(ix, child) {
      var res = build(child);
      insertChildIx(ix, extract2(res), node);
      return res;
    };
    var children2 = forE2(ch1, onChild);
    var attrs = v2.buildAttributes(el)(as1);
    var state3 = {
      build,
      node,
      attrs,
      ns: ns1,
      name: name1,
      children: children2
    };
    return mkStep(new Step(node, state3, patchElem, haltElem));
  };
  var buildVDom = function(spec) {
    var $lazy_build = $runtime_lazy4("build", "Halogen.VDom.DOM", function() {
      return function(v2) {
        if (v2 instanceof Text) {
          return buildText(spec, $lazy_build(59), v2.value0);
        }
        ;
        if (v2 instanceof Elem) {
          return buildElem(spec, $lazy_build(60), v2.value0, v2.value1, v2.value2, v2.value3);
        }
        ;
        if (v2 instanceof Keyed) {
          return buildKeyed(spec, $lazy_build(61), v2.value0, v2.value1, v2.value2, v2.value3);
        }
        ;
        if (v2 instanceof Widget) {
          return buildWidget(spec, $lazy_build(62), v2.value0);
        }
        ;
        if (v2 instanceof Grafted) {
          return $lazy_build(63)(runGraft(v2.value0));
        }
        ;
        throw new Error("Failed pattern match at Halogen.VDom.DOM (line 58, column 27 - line 63, column 52): " + [v2.constructor.name]);
      };
    });
    var build = $lazy_build(58);
    return build;
  };

  // output/Foreign/foreign.js
  function typeOf(value12) {
    return typeof value12;
  }
  function tagOf(value12) {
    return Object.prototype.toString.call(value12).slice(8, -1);
  }
  var isArray = Array.isArray || function(value12) {
    return Object.prototype.toString.call(value12) === "[object Array]";
  };

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  var round = Math.round;
  var sqrt = Math.sqrt;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x) {
    if (!isFiniteImpl(x)) {
      return 0;
    }
    ;
    if (x >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
  };
  var round2 = function($37) {
    return unsafeClamp(round($37));
  };

  // output/Data.List/index.js
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v2, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v2;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v2);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v2.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();
  var $$null = function(v2) {
    if (v2 instanceof Nil) {
      return true;
    }
    ;
    return false;
  };

  // output/Data.List.NonEmpty/index.js
  var singleton5 = /* @__PURE__ */ function() {
    var $200 = singleton2(plusList);
    return function($201) {
      return NonEmptyList($200($201));
    };
  }();
  var cons = function(y) {
    return function(v2) {
      return new NonEmpty(y, new Cons(v2.value0, v2.value1));
    };
  };

  // output/Foreign/index.js
  var TypeMismatch = /* @__PURE__ */ function() {
    function TypeMismatch2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TypeMismatch2.create = function(value0) {
      return function(value1) {
        return new TypeMismatch2(value0, value1);
      };
    };
    return TypeMismatch2;
  }();
  var unsafeFromForeign = unsafeCoerce2;
  var fail = function(dictMonad) {
    var $153 = throwError(monadThrowExceptT(dictMonad));
    return function($154) {
      return $153(singleton5($154));
    };
  };
  var readArray = function(dictMonad) {
    var pure15 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(value12) {
      if (isArray(value12)) {
        return pure15(unsafeFromForeign(value12));
      }
      ;
      if (otherwise) {
        return fail1(new TypeMismatch("array", tagOf(value12)));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 164, column 1 - line 164, column 99): " + [value12.constructor.name]);
    };
  };
  var unsafeReadTagged = function(dictMonad) {
    var pure15 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(tag) {
      return function(value12) {
        if (tagOf(value12) === tag) {
          return pure15(unsafeFromForeign(value12));
        }
        ;
        if (otherwise) {
          return fail1(new TypeMismatch(tag, tagOf(value12)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag.constructor.name, value12.constructor.name]);
      };
    };
  };
  var readNumber = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("Number");
  };

  // output/Foreign.Object/foreign.js
  function _lookup(no, yes, k, m2) {
    return k in m2 ? yes(m2[k]) : no;
  }
  function toArrayWithKey(f) {
    return function(m2) {
      var r = [];
      for (var k in m2) {
        if (hasOwnProperty.call(m2, k)) {
          r.push(f(k)(m2[k]));
        }
      }
      return r;
    };
  }
  var keys = Object.keys || toArrayWithKey(function(k) {
    return function() {
      return k;
    };
  });

  // output/Foreign.Object/index.js
  var lookup3 = /* @__PURE__ */ function() {
    return runFn4(_lookup)(Nothing.value)(Just.create);
  }();

  // output/Halogen.VDom.DOM.Prop/index.js
  var $runtime_lazy5 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var Created = /* @__PURE__ */ function() {
    function Created2(value0) {
      this.value0 = value0;
    }
    ;
    Created2.create = function(value0) {
      return new Created2(value0);
    };
    return Created2;
  }();
  var Removed = /* @__PURE__ */ function() {
    function Removed2(value0) {
      this.value0 = value0;
    }
    ;
    Removed2.create = function(value0) {
      return new Removed2(value0);
    };
    return Removed2;
  }();
  var Attribute = /* @__PURE__ */ function() {
    function Attribute2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Attribute2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Attribute2(value0, value1, value22);
        };
      };
    };
    return Attribute2;
  }();
  var Property = /* @__PURE__ */ function() {
    function Property2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Property2.create = function(value0) {
      return function(value1) {
        return new Property2(value0, value1);
      };
    };
    return Property2;
  }();
  var Handler = /* @__PURE__ */ function() {
    function Handler2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Handler2.create = function(value0) {
      return function(value1) {
        return new Handler2(value0, value1);
      };
    };
    return Handler2;
  }();
  var Ref = /* @__PURE__ */ function() {
    function Ref2(value0) {
      this.value0 = value0;
    }
    ;
    Ref2.create = function(value0) {
      return new Ref2(value0);
    };
    return Ref2;
  }();
  var unsafeGetProperty = unsafeGetAny;
  var setProperty = unsafeSetAny;
  var removeProperty = function(key, el) {
    var v2 = hasAttribute(nullImpl, key, el);
    if (v2) {
      return removeAttribute(nullImpl, key, el);
    }
    ;
    var v1 = typeOf(unsafeGetAny(key, el));
    if (v1 === "string") {
      return unsafeSetAny(key, "", el);
    }
    ;
    if (key === "rowSpan") {
      return unsafeSetAny(key, 1, el);
    }
    ;
    if (key === "colSpan") {
      return unsafeSetAny(key, 1, el);
    }
    ;
    return unsafeSetAny(key, jsUndefined, el);
  };
  var propToStrKey = function(v2) {
    if (v2 instanceof Attribute && v2.value0 instanceof Just) {
      return "attr/" + (v2.value0.value0 + (":" + v2.value1));
    }
    ;
    if (v2 instanceof Attribute) {
      return "attr/:" + v2.value1;
    }
    ;
    if (v2 instanceof Property) {
      return "prop/" + v2.value0;
    }
    ;
    if (v2 instanceof Handler) {
      return "handler/" + v2.value0;
    }
    ;
    if (v2 instanceof Ref) {
      return "ref";
    }
    ;
    throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 182, column 16 - line 187, column 16): " + [v2.constructor.name]);
  };
  var propFromString = unsafeCoerce2;
  var buildProp = function(emit) {
    return function(el) {
      var removeProp = function(prevEvents) {
        return function(v2, v1) {
          if (v1 instanceof Attribute) {
            return removeAttribute(toNullable(v1.value0), v1.value1, el);
          }
          ;
          if (v1 instanceof Property) {
            return removeProperty(v1.value0, el);
          }
          ;
          if (v1 instanceof Handler) {
            var handler3 = unsafeLookup(v1.value0, prevEvents);
            return removeEventListener2(v1.value0, fst(handler3), el);
          }
          ;
          if (v1 instanceof Ref) {
            return unit;
          }
          ;
          throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 169, column 5 - line 179, column 18): " + [v1.constructor.name]);
        };
      };
      var mbEmit = function(v2) {
        if (v2 instanceof Just) {
          return emit(v2.value0)();
        }
        ;
        return unit;
      };
      var haltProp = function(state3) {
        var v2 = lookup3("ref")(state3.props);
        if (v2 instanceof Just && v2.value0 instanceof Ref) {
          return mbEmit(v2.value0.value0(new Removed(el)));
        }
        ;
        return unit;
      };
      var diffProp = function(prevEvents, events) {
        return function(v2, v1, v11, v22) {
          if (v11 instanceof Attribute && v22 instanceof Attribute) {
            var $66 = v11.value2 === v22.value2;
            if ($66) {
              return v22;
            }
            ;
            setAttribute(toNullable(v22.value0), v22.value1, v22.value2, el);
            return v22;
          }
          ;
          if (v11 instanceof Property && v22 instanceof Property) {
            var v4 = refEq2(v11.value1, v22.value1);
            if (v4) {
              return v22;
            }
            ;
            if (v22.value0 === "value") {
              var elVal = unsafeGetProperty("value", el);
              var $75 = refEq2(elVal, v22.value1);
              if ($75) {
                return v22;
              }
              ;
              setProperty(v22.value0, v22.value1, el);
              return v22;
            }
            ;
            setProperty(v22.value0, v22.value1, el);
            return v22;
          }
          ;
          if (v11 instanceof Handler && v22 instanceof Handler) {
            var handler3 = unsafeLookup(v22.value0, prevEvents);
            write(v22.value1)(snd(handler3))();
            pokeMutMap(v22.value0, handler3, events);
            return v22;
          }
          ;
          return v22;
        };
      };
      var applyProp = function(events) {
        return function(v2, v1, v22) {
          if (v22 instanceof Attribute) {
            setAttribute(toNullable(v22.value0), v22.value1, v22.value2, el);
            return v22;
          }
          ;
          if (v22 instanceof Property) {
            setProperty(v22.value0, v22.value1, el);
            return v22;
          }
          ;
          if (v22 instanceof Handler) {
            var v3 = unsafeGetAny(v22.value0, events);
            if (unsafeHasAny(v22.value0, events)) {
              write(v22.value1)(snd(v3))();
              return v22;
            }
            ;
            var ref3 = $$new(v22.value1)();
            var listener = eventListener(function(ev) {
              return function __do2() {
                var f$prime = read(ref3)();
                return mbEmit(f$prime(ev));
              };
            })();
            pokeMutMap(v22.value0, new Tuple(listener, ref3), events);
            addEventListener2(v22.value0, listener, el);
            return v22;
          }
          ;
          if (v22 instanceof Ref) {
            mbEmit(v22.value0(new Created(el)));
            return v22;
          }
          ;
          throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop (line 113, column 5 - line 135, column 15): " + [v22.constructor.name]);
        };
      };
      var $lazy_patchProp = $runtime_lazy5("patchProp", "Halogen.VDom.DOM.Prop", function() {
        return function(state3, ps2) {
          var events = newMutMap();
          var onThis = removeProp(state3.events);
          var onThese = diffProp(state3.events, events);
          var onThat = applyProp(events);
          var props = diffWithKeyAndIxE(state3.props, ps2, propToStrKey, onThese, onThis, onThat);
          var nextState = {
            events: unsafeFreeze2(events),
            props
          };
          return mkStep(new Step(unit, nextState, $lazy_patchProp(100), haltProp));
        };
      });
      var patchProp = $lazy_patchProp(87);
      var renderProp = function(ps1) {
        var events = newMutMap();
        var ps1$prime = strMapWithIxE(ps1, propToStrKey, applyProp(events));
        var state3 = {
          events: unsafeFreeze2(events),
          props: ps1$prime
        };
        return mkStep(new Step(unit, state3, patchProp, haltProp));
      };
      return renderProp;
    };
  };

  // output/Halogen.HTML.Core/index.js
  var HTML = function(x) {
    return x;
  };
  var widget = function($28) {
    return HTML(Widget.create($28));
  };
  var toPropValue = function(dict) {
    return dict.toPropValue;
  };
  var text5 = function($29) {
    return HTML(Text.create($29));
  };
  var ref = function(f) {
    return new Ref(function($30) {
      return f(function(v2) {
        if (v2 instanceof Created) {
          return new Just(v2.value0);
        }
        ;
        if (v2 instanceof Removed) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Halogen.HTML.Core (line 109, column 21 - line 111, column 23): " + [v2.constructor.name]);
      }($30));
    });
  };
  var prop = function(dictIsProp) {
    var toPropValue1 = toPropValue(dictIsProp);
    return function(v2) {
      var $31 = Property.create(v2);
      return function($32) {
        return $31(toPropValue1($32));
      };
    };
  };
  var isPropString = {
    toPropValue: propFromString
  };
  var handler = /* @__PURE__ */ function() {
    return Handler.create;
  }();
  var element = function(ns) {
    return function(name15) {
      return function(props) {
        return function(children2) {
          return new Elem(ns, name15, props, children2);
        };
      };
    };
  };
  var attr = function(ns) {
    return function(v2) {
      return Attribute.create(ns)(v2);
    };
  };

  // output/Control.Applicative.Free/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var Pure = /* @__PURE__ */ function() {
    function Pure2(value0) {
      this.value0 = value0;
    }
    ;
    Pure2.create = function(value0) {
      return new Pure2(value0);
    };
    return Pure2;
  }();
  var Lift = /* @__PURE__ */ function() {
    function Lift3(value0) {
      this.value0 = value0;
    }
    ;
    Lift3.create = function(value0) {
      return new Lift3(value0);
    };
    return Lift3;
  }();
  var Ap = /* @__PURE__ */ function() {
    function Ap2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Ap2.create = function(value0) {
      return function(value1) {
        return new Ap2(value0, value1);
      };
    };
    return Ap2;
  }();
  var mkAp = function(fba) {
    return function(fb) {
      return new Ap(fba, fb);
    };
  };
  var liftFreeAp = /* @__PURE__ */ function() {
    return Lift.create;
  }();
  var goLeft = function(dictApplicative) {
    var pure15 = pure(dictApplicative);
    return function(fStack) {
      return function(valStack) {
        return function(nat) {
          return function(func) {
            return function(count) {
              if (func instanceof Pure) {
                return new Tuple(new Cons({
                  func: pure15(func.value0),
                  count
                }, fStack), valStack);
              }
              ;
              if (func instanceof Lift) {
                return new Tuple(new Cons({
                  func: nat(func.value0),
                  count
                }, fStack), valStack);
              }
              ;
              if (func instanceof Ap) {
                return goLeft(dictApplicative)(fStack)(cons(func.value1)(valStack))(nat)(func.value0)(count + 1 | 0);
              }
              ;
              throw new Error("Failed pattern match at Control.Applicative.Free (line 102, column 41 - line 105, column 81): " + [func.constructor.name]);
            };
          };
        };
      };
    };
  };
  var goApply = function(dictApplicative) {
    var apply3 = apply(dictApplicative.Apply0());
    return function(fStack) {
      return function(vals) {
        return function(gVal) {
          if (fStack instanceof Nil) {
            return new Left(gVal);
          }
          ;
          if (fStack instanceof Cons) {
            var gRes = apply3(fStack.value0.func)(gVal);
            var $31 = fStack.value0.count === 1;
            if ($31) {
              if (fStack.value1 instanceof Nil) {
                return new Left(gRes);
              }
              ;
              return goApply(dictApplicative)(fStack.value1)(vals)(gRes);
            }
            ;
            if (vals instanceof Nil) {
              return new Left(gRes);
            }
            ;
            if (vals instanceof Cons) {
              return new Right(new Tuple(new Cons({
                func: gRes,
                count: fStack.value0.count - 1 | 0
              }, fStack.value1), new NonEmpty(vals.value0, vals.value1)));
            }
            ;
            throw new Error("Failed pattern match at Control.Applicative.Free (line 83, column 11 - line 88, column 50): " + [vals.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Control.Applicative.Free (line 72, column 3 - line 88, column 50): " + [fStack.constructor.name]);
        };
      };
    };
  };
  var functorFreeAp = {
    map: function(f) {
      return function(x) {
        return mkAp(new Pure(f))(x);
      };
    }
  };
  var foldFreeAp = function(dictApplicative) {
    var goApply1 = goApply(dictApplicative);
    var pure15 = pure(dictApplicative);
    var goLeft1 = goLeft(dictApplicative);
    return function(nat) {
      return function(z2) {
        var go2 = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v2) {
            if (v2.value1.value0 instanceof Pure) {
              var v1 = goApply1(v2.value0)(v2.value1.value1)(pure15(v2.value1.value0.value0));
              if (v1 instanceof Left) {
                $tco_done = true;
                return v1.value0;
              }
              ;
              if (v1 instanceof Right) {
                $copy_v = v1.value0;
                return;
              }
              ;
              throw new Error("Failed pattern match at Control.Applicative.Free (line 54, column 17 - line 56, column 24): " + [v1.constructor.name]);
            }
            ;
            if (v2.value1.value0 instanceof Lift) {
              var v1 = goApply1(v2.value0)(v2.value1.value1)(nat(v2.value1.value0.value0));
              if (v1 instanceof Left) {
                $tco_done = true;
                return v1.value0;
              }
              ;
              if (v1 instanceof Right) {
                $copy_v = v1.value0;
                return;
              }
              ;
              throw new Error("Failed pattern match at Control.Applicative.Free (line 57, column 17 - line 59, column 24): " + [v1.constructor.name]);
            }
            ;
            if (v2.value1.value0 instanceof Ap) {
              var nextVals = new NonEmpty(v2.value1.value0.value1, v2.value1.value1);
              $copy_v = goLeft1(v2.value0)(nextVals)(nat)(v2.value1.value0.value0)(1);
              return;
            }
            ;
            throw new Error("Failed pattern match at Control.Applicative.Free (line 53, column 5 - line 62, column 47): " + [v2.value1.value0.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go2(new Tuple(Nil.value, singleton5(z2)));
      };
    };
  };
  var retractFreeAp = function(dictApplicative) {
    return foldFreeAp(dictApplicative)(identity6);
  };
  var applyFreeAp = {
    apply: function(fba) {
      return function(fb) {
        return mkAp(fba)(fb);
      };
    },
    Functor0: function() {
      return functorFreeAp;
    }
  };
  var applicativeFreeAp = /* @__PURE__ */ function() {
    return {
      pure: Pure.create,
      Apply0: function() {
        return applyFreeAp;
      }
    };
  }();
  var foldFreeAp1 = /* @__PURE__ */ foldFreeAp(applicativeFreeAp);
  var hoistFreeAp = function(f) {
    return foldFreeAp1(function($54) {
      return liftFreeAp(f($54));
    });
  };

  // output/Data.CatQueue/index.js
  var CatQueue = /* @__PURE__ */ function() {
    function CatQueue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatQueue2.create = function(value0) {
      return function(value1) {
        return new CatQueue2(value0, value1);
      };
    };
    return CatQueue2;
  }();
  var uncons2 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v2) {
      if (v2.value0 instanceof Nil && v2.value1 instanceof Nil) {
        $tco_done = true;
        return Nothing.value;
      }
      ;
      if (v2.value0 instanceof Nil) {
        $copy_v = new CatQueue(reverse2(v2.value1), Nil.value);
        return;
      }
      ;
      if (v2.value0 instanceof Cons) {
        $tco_done = true;
        return new Just(new Tuple(v2.value0.value0, new CatQueue(v2.value0.value1, v2.value1)));
      }
      ;
      throw new Error("Failed pattern match at Data.CatQueue (line 82, column 1 - line 82, column 63): " + [v2.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var snoc3 = function(v2) {
    return function(a3) {
      return new CatQueue(v2.value0, new Cons(a3, v2.value1));
    };
  };
  var $$null2 = function(v2) {
    if (v2.value0 instanceof Nil && v2.value1 instanceof Nil) {
      return true;
    }
    ;
    return false;
  };
  var empty5 = /* @__PURE__ */ function() {
    return new CatQueue(Nil.value, Nil.value);
  }();

  // output/Data.CatList/index.js
  var CatNil = /* @__PURE__ */ function() {
    function CatNil2() {
    }
    ;
    CatNil2.value = new CatNil2();
    return CatNil2;
  }();
  var CatCons = /* @__PURE__ */ function() {
    function CatCons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatCons2.create = function(value0) {
      return function(value1) {
        return new CatCons2(value0, value1);
      };
    };
    return CatCons2;
  }();
  var link = function(v2) {
    return function(v1) {
      if (v2 instanceof CatNil) {
        return v1;
      }
      ;
      if (v1 instanceof CatNil) {
        return v2;
      }
      ;
      if (v2 instanceof CatCons) {
        return new CatCons(v2.value0, snoc3(v2.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.CatList (line 108, column 1 - line 108, column 54): " + [v2.constructor.name, v1.constructor.name]);
    };
  };
  var foldr3 = function(k) {
    return function(b2) {
      return function(q3) {
        var foldl2 = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v2, v1, v22) {
                if (v22 instanceof Nil) {
                  $tco_done = true;
                  return v1;
                }
                ;
                if (v22 instanceof Cons) {
                  $tco_var_v = v2;
                  $tco_var_v1 = v2(v1)(v22.value0);
                  $copy_v2 = v22.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 124, column 3 - line 124, column 59): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        var go2 = function($copy_xs) {
          return function($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
              var v2 = uncons2(xs);
              if (v2 instanceof Nothing) {
                $tco_done1 = true;
                return foldl2(function(x) {
                  return function(i2) {
                    return i2(x);
                  };
                })(b2)(ys);
              }
              ;
              if (v2 instanceof Just) {
                $tco_var_xs = v2.value0.value1;
                $copy_ys = new Cons(k(v2.value0.value0), ys);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.CatList (line 120, column 14 - line 122, column 67): " + [v2.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            }
            ;
            return $tco_result;
          };
        };
        return go2(q3)(Nil.value);
      };
    };
  };
  var uncons3 = function(v2) {
    if (v2 instanceof CatNil) {
      return Nothing.value;
    }
    ;
    if (v2 instanceof CatCons) {
      return new Just(new Tuple(v2.value0, function() {
        var $66 = $$null2(v2.value1);
        if ($66) {
          return CatNil.value;
        }
        ;
        return foldr3(link)(CatNil.value)(v2.value1);
      }()));
    }
    ;
    throw new Error("Failed pattern match at Data.CatList (line 99, column 1 - line 99, column 61): " + [v2.constructor.name]);
  };
  var empty6 = /* @__PURE__ */ function() {
    return CatNil.value;
  }();
  var append2 = link;
  var semigroupCatList = {
    append: append2
  };
  var snoc4 = function(cat) {
    return function(a3) {
      return append2(cat)(new CatCons(a3, empty5));
    };
  };

  // output/Control.Monad.Free/index.js
  var $runtime_lazy6 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var append3 = /* @__PURE__ */ append(semigroupCatList);
  var Free = /* @__PURE__ */ function() {
    function Free2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Free2.create = function(value0) {
      return function(value1) {
        return new Free2(value0, value1);
      };
    };
    return Free2;
  }();
  var Return = /* @__PURE__ */ function() {
    function Return2(value0) {
      this.value0 = value0;
    }
    ;
    Return2.create = function(value0) {
      return new Return2(value0);
    };
    return Return2;
  }();
  var Bind = /* @__PURE__ */ function() {
    function Bind2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bind2.create = function(value0) {
      return function(value1) {
        return new Bind2(value0, value1);
      };
    };
    return Bind2;
  }();
  var toView = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v2) {
      var runExpF = function(v23) {
        return v23;
      };
      var concatF = function(v23) {
        return function(r) {
          return new Free(v23.value0, append3(v23.value1)(r));
        };
      };
      if (v2.value0 instanceof Return) {
        var v22 = uncons3(v2.value1);
        if (v22 instanceof Nothing) {
          $tco_done = true;
          return new Return(v2.value0.value0);
        }
        ;
        if (v22 instanceof Just) {
          $copy_v = concatF(runExpF(v22.value0.value0)(v2.value0.value0))(v22.value0.value1);
          return;
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v22.constructor.name]);
      }
      ;
      if (v2.value0 instanceof Bind) {
        $tco_done = true;
        return new Bind(v2.value0.value0, function(a3) {
          return concatF(v2.value0.value1(a3))(v2.value1);
        });
      }
      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v2.value0.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var fromView = function(f) {
    return new Free(f, empty6);
  };
  var freeMonad = {
    Applicative0: function() {
      return freeApplicative;
    },
    Bind1: function() {
      return freeBind;
    }
  };
  var freeFunctor = {
    map: function(k) {
      return function(f) {
        return bindFlipped(freeBind)(function() {
          var $189 = pure(freeApplicative);
          return function($190) {
            return $189(k($190));
          };
        }())(f);
      };
    }
  };
  var freeBind = {
    bind: function(v2) {
      return function(k) {
        return new Free(v2.value0, snoc4(v2.value1)(k));
      };
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var freeApplicative = {
    pure: function($191) {
      return fromView(Return.create($191));
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var $lazy_freeApply = /* @__PURE__ */ $runtime_lazy6("freeApply", "Control.Monad.Free", function() {
    return {
      apply: ap(freeMonad),
      Functor0: function() {
        return freeFunctor;
      }
    };
  });
  var pure4 = /* @__PURE__ */ pure(freeApplicative);
  var liftF = function(f) {
    return fromView(new Bind(f, function($192) {
      return pure4($192);
    }));
  };
  var foldFree = function(dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var map111 = map(Monad0.Bind1().Apply0().Functor0());
    var pure15 = pure(Monad0.Applicative0());
    var tailRecM4 = tailRecM(dictMonadRec);
    return function(k) {
      var go2 = function(f) {
        var v2 = toView(f);
        if (v2 instanceof Return) {
          return map111(Done.create)(pure15(v2.value0));
        }
        ;
        if (v2 instanceof Bind) {
          return map111(function($199) {
            return Loop.create(v2.value1($199));
          })(k(v2.value0));
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [v2.constructor.name]);
      };
      return tailRecM4(go2);
    };
  };

  // output/Halogen.Query.ChildQuery/index.js
  var ChildQuery = /* @__PURE__ */ function() {
    function ChildQuery3(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    ChildQuery3.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new ChildQuery3(value0, value1, value22);
        };
      };
    };
    return ChildQuery3;
  }();
  var unChildQueryBox = unsafeCoerce2;
  var mkChildQueryBox = unsafeCoerce2;

  // output/Unsafe.Reference/foreign.js
  function reallyUnsafeRefEq(a3) {
    return function(b2) {
      return a3 === b2;
    };
  }

  // output/Unsafe.Reference/index.js
  var unsafeRefEq = reallyUnsafeRefEq;

  // output/Halogen.Subscription/index.js
  var $$void4 = /* @__PURE__ */ $$void(functorEffect);
  var bind3 = /* @__PURE__ */ bind(bindEffect);
  var append4 = /* @__PURE__ */ append(semigroupArray);
  var traverse_2 = /* @__PURE__ */ traverse_(applicativeEffect);
  var traverse_1 = /* @__PURE__ */ traverse_2(foldableArray);
  var unsubscribe = function(v2) {
    return v2;
  };
  var subscribe = function(v2) {
    return function(k) {
      return v2(function($76) {
        return $$void4(k($76));
      });
    };
  };
  var notify = function(v2) {
    return function(a3) {
      return v2(a3);
    };
  };
  var create3 = function __do() {
    var subscribers = $$new([])();
    return {
      emitter: function(k) {
        return function __do2() {
          modify_2(function(v2) {
            return append4(v2)([k]);
          })(subscribers)();
          return modify_2(deleteBy(unsafeRefEq)(k))(subscribers);
        };
      },
      listener: function(a3) {
        return bind3(read(subscribers))(traverse_1(function(k) {
          return k(a3);
        }));
      }
    };
  };

  // output/Halogen.Query.HalogenM/index.js
  var identity7 = /* @__PURE__ */ identity(categoryFn);
  var lookup4 = /* @__PURE__ */ lookup2();
  var SubscriptionId = function(x) {
    return x;
  };
  var ForkId = function(x) {
    return x;
  };
  var State = /* @__PURE__ */ function() {
    function State2(value0) {
      this.value0 = value0;
    }
    ;
    State2.create = function(value0) {
      return new State2(value0);
    };
    return State2;
  }();
  var Subscribe = /* @__PURE__ */ function() {
    function Subscribe2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Subscribe2.create = function(value0) {
      return function(value1) {
        return new Subscribe2(value0, value1);
      };
    };
    return Subscribe2;
  }();
  var Unsubscribe = /* @__PURE__ */ function() {
    function Unsubscribe2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Unsubscribe2.create = function(value0) {
      return function(value1) {
        return new Unsubscribe2(value0, value1);
      };
    };
    return Unsubscribe2;
  }();
  var Lift2 = /* @__PURE__ */ function() {
    function Lift3(value0) {
      this.value0 = value0;
    }
    ;
    Lift3.create = function(value0) {
      return new Lift3(value0);
    };
    return Lift3;
  }();
  var ChildQuery2 = /* @__PURE__ */ function() {
    function ChildQuery3(value0) {
      this.value0 = value0;
    }
    ;
    ChildQuery3.create = function(value0) {
      return new ChildQuery3(value0);
    };
    return ChildQuery3;
  }();
  var Raise = /* @__PURE__ */ function() {
    function Raise2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Raise2.create = function(value0) {
      return function(value1) {
        return new Raise2(value0, value1);
      };
    };
    return Raise2;
  }();
  var Par = /* @__PURE__ */ function() {
    function Par2(value0) {
      this.value0 = value0;
    }
    ;
    Par2.create = function(value0) {
      return new Par2(value0);
    };
    return Par2;
  }();
  var Fork = /* @__PURE__ */ function() {
    function Fork2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Fork2.create = function(value0) {
      return function(value1) {
        return new Fork2(value0, value1);
      };
    };
    return Fork2;
  }();
  var Join = /* @__PURE__ */ function() {
    function Join2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Join2.create = function(value0) {
      return function(value1) {
        return new Join2(value0, value1);
      };
    };
    return Join2;
  }();
  var Kill = /* @__PURE__ */ function() {
    function Kill2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Kill2.create = function(value0) {
      return function(value1) {
        return new Kill2(value0, value1);
      };
    };
    return Kill2;
  }();
  var GetRef = /* @__PURE__ */ function() {
    function GetRef2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    GetRef2.create = function(value0) {
      return function(value1) {
        return new GetRef2(value0, value1);
      };
    };
    return GetRef2;
  }();
  var HalogenM = function(x) {
    return x;
  };
  var subscribe2 = function(es) {
    return liftF(new Subscribe(function(v2) {
      return es;
    }, identity7));
  };
  var raise = function(o) {
    return liftF(new Raise(o, unit));
  };
  var query = function() {
    return function(dictIsSymbol) {
      var lookup14 = lookup4(dictIsSymbol);
      return function(dictOrd) {
        var lookup23 = lookup14(dictOrd);
        return function(label5) {
          return function(p2) {
            return function(q3) {
              return liftF(new ChildQuery2(mkChildQueryBox(new ChildQuery(function(dictApplicative) {
                var pure15 = pure(dictApplicative);
                return function(k) {
                  var $177 = maybe(pure15(Nothing.value))(k);
                  var $178 = lookup23(label5)(p2);
                  return function($179) {
                    return $177($178($179));
                  };
                };
              }, q3, identity7))));
            };
          };
        };
      };
    };
  };
  var ordSubscriptionId = ordInt;
  var ordForkId = ordInt;
  var monadHalogenM = freeMonad;
  var monadStateHalogenM = {
    state: function($181) {
      return HalogenM(liftF(State.create($181)));
    },
    Monad0: function() {
      return monadHalogenM;
    }
  };
  var monadEffectHalogenM = function(dictMonadEffect) {
    return {
      liftEffect: function() {
        var $186 = liftEffect(dictMonadEffect);
        return function($187) {
          return HalogenM(liftF(Lift2.create($186($187))));
        };
      }(),
      Monad0: function() {
        return monadHalogenM;
      }
    };
  };
  var getRef = function(p2) {
    return liftF(new GetRef(p2, identity7));
  };
  var functorHalogenM = freeFunctor;
  var bindHalogenM = freeBind;
  var applicativeHalogenM = freeApplicative;

  // output/Halogen.Query.HalogenQ/index.js
  var Initialize = /* @__PURE__ */ function() {
    function Initialize2(value0) {
      this.value0 = value0;
    }
    ;
    Initialize2.create = function(value0) {
      return new Initialize2(value0);
    };
    return Initialize2;
  }();
  var Finalize = /* @__PURE__ */ function() {
    function Finalize2(value0) {
      this.value0 = value0;
    }
    ;
    Finalize2.create = function(value0) {
      return new Finalize2(value0);
    };
    return Finalize2;
  }();
  var Receive = /* @__PURE__ */ function() {
    function Receive2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Receive2.create = function(value0) {
      return function(value1) {
        return new Receive2(value0, value1);
      };
    };
    return Receive2;
  }();
  var Action2 = /* @__PURE__ */ function() {
    function Action3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Action3.create = function(value0) {
      return function(value1) {
        return new Action3(value0, value1);
      };
    };
    return Action3;
  }();
  var Query = /* @__PURE__ */ function() {
    function Query2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Query2.create = function(value0) {
      return function(value1) {
        return new Query2(value0, value1);
      };
    };
    return Query2;
  }();

  // output/Halogen.VDom.Thunk/index.js
  var $runtime_lazy7 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var unsafeEqThunk = function(v2, v1) {
    return refEq2(v2.value0, v1.value0) && (refEq2(v2.value1, v1.value1) && v2.value1(v2.value3, v1.value3));
  };
  var runThunk = function(v2) {
    return v2.value2(v2.value3);
  };
  var buildThunk = function(toVDom) {
    var haltThunk = function(state3) {
      return halt(state3.vdom);
    };
    var $lazy_patchThunk = $runtime_lazy7("patchThunk", "Halogen.VDom.Thunk", function() {
      return function(state3, t2) {
        var $48 = unsafeEqThunk(state3.thunk, t2);
        if ($48) {
          return mkStep(new Step(extract2(state3.vdom), state3, $lazy_patchThunk(112), haltThunk));
        }
        ;
        var vdom = step2(state3.vdom, toVDom(runThunk(t2)));
        return mkStep(new Step(extract2(vdom), {
          vdom,
          thunk: t2
        }, $lazy_patchThunk(115), haltThunk));
      };
    });
    var patchThunk = $lazy_patchThunk(108);
    var renderThunk = function(spec) {
      return function(t2) {
        var vdom = buildVDom(spec)(toVDom(runThunk(t2)));
        return mkStep(new Step(extract2(vdom), {
          thunk: t2,
          vdom
        }, patchThunk, haltThunk));
      };
    };
    return renderThunk;
  };

  // output/Halogen.Component/index.js
  var voidLeft2 = /* @__PURE__ */ voidLeft(functorHalogenM);
  var traverse_3 = /* @__PURE__ */ traverse_(applicativeHalogenM)(foldableMaybe);
  var map11 = /* @__PURE__ */ map(functorHalogenM);
  var pure5 = /* @__PURE__ */ pure(applicativeHalogenM);
  var lookup5 = /* @__PURE__ */ lookup2();
  var pop3 = /* @__PURE__ */ pop2();
  var insert3 = /* @__PURE__ */ insert2();
  var ComponentSlot = /* @__PURE__ */ function() {
    function ComponentSlot2(value0) {
      this.value0 = value0;
    }
    ;
    ComponentSlot2.create = function(value0) {
      return new ComponentSlot2(value0);
    };
    return ComponentSlot2;
  }();
  var ThunkSlot = /* @__PURE__ */ function() {
    function ThunkSlot2(value0) {
      this.value0 = value0;
    }
    ;
    ThunkSlot2.create = function(value0) {
      return new ThunkSlot2(value0);
    };
    return ThunkSlot2;
  }();
  var unComponentSlot = unsafeCoerce2;
  var unComponent = unsafeCoerce2;
  var mkEval = function(args) {
    return function(v2) {
      if (v2 instanceof Initialize) {
        return voidLeft2(traverse_3(args.handleAction)(args.initialize))(v2.value0);
      }
      ;
      if (v2 instanceof Finalize) {
        return voidLeft2(traverse_3(args.handleAction)(args.finalize))(v2.value0);
      }
      ;
      if (v2 instanceof Receive) {
        return voidLeft2(traverse_3(args.handleAction)(args.receive(v2.value0)))(v2.value1);
      }
      ;
      if (v2 instanceof Action2) {
        return voidLeft2(args.handleAction(v2.value0))(v2.value1);
      }
      ;
      if (v2 instanceof Query) {
        return unCoyoneda(function(g) {
          var $45 = map11(maybe(v2.value1(unit))(g));
          return function($46) {
            return $45(args.handleQuery($46));
          };
        })(v2.value0);
      }
      ;
      throw new Error("Failed pattern match at Halogen.Component (line 182, column 15 - line 192, column 71): " + [v2.constructor.name]);
    };
  };
  var mkComponentSlot = unsafeCoerce2;
  var mkComponent = unsafeCoerce2;
  var defaultEval = /* @__PURE__ */ function() {
    return {
      handleAction: $$const(pure5(unit)),
      handleQuery: $$const(pure5(Nothing.value)),
      receive: $$const(Nothing.value),
      initialize: Nothing.value,
      finalize: Nothing.value
    };
  }();
  var componentSlot = function() {
    return function(dictIsSymbol) {
      var lookup14 = lookup5(dictIsSymbol);
      var pop12 = pop3(dictIsSymbol);
      var insert13 = insert3(dictIsSymbol);
      return function(dictOrd) {
        var lookup23 = lookup14(dictOrd);
        var pop22 = pop12(dictOrd);
        var insert23 = insert13(dictOrd);
        return function(label5) {
          return function(p2) {
            return function(comp) {
              return function(input3) {
                return function(output2) {
                  return mkComponentSlot({
                    get: lookup23(label5)(p2),
                    pop: pop22(label5)(p2),
                    set: insert23(label5)(p2),
                    component: comp,
                    input: input3,
                    output: output2
                  });
                };
              };
            };
          };
        };
      };
    };
  };

  // output/Halogen.HTML.Elements/index.js
  var pure6 = /* @__PURE__ */ pure(applicativeMaybe);
  var elementNS = function($15) {
    return element(pure6($15));
  };
  var element2 = /* @__PURE__ */ function() {
    return element(Nothing.value);
  }();
  var h1 = /* @__PURE__ */ element2("h1");
  var h1_ = /* @__PURE__ */ h1([]);
  var h2 = /* @__PURE__ */ element2("h2");
  var h3 = /* @__PURE__ */ element2("h3");
  var img = function(props) {
    return element2("img")(props)([]);
  };
  var li = /* @__PURE__ */ element2("li");
  var li_ = /* @__PURE__ */ li([]);
  var p = /* @__PURE__ */ element2("p");
  var table = /* @__PURE__ */ element2("table");
  var td = /* @__PURE__ */ element2("td");
  var td_ = /* @__PURE__ */ td([]);
  var tr = /* @__PURE__ */ element2("tr");
  var tr_ = /* @__PURE__ */ tr([]);
  var ul = /* @__PURE__ */ element2("ul");
  var ul_ = /* @__PURE__ */ ul([]);
  var div2 = /* @__PURE__ */ element2("div");
  var div_ = /* @__PURE__ */ div2([]);
  var button = /* @__PURE__ */ element2("button");

  // output/Halogen.HTML.Properties/index.js
  var unwrap4 = /* @__PURE__ */ unwrap();
  var ref2 = /* @__PURE__ */ function() {
    var go2 = function(p2) {
      return function(mel) {
        return new Just(new RefUpdate(p2, mel));
      };
    };
    return function($29) {
      return ref(go2($29));
    };
  }();
  var prop2 = function(dictIsProp) {
    return prop(dictIsProp);
  };
  var prop22 = /* @__PURE__ */ prop2(isPropString);
  var src9 = /* @__PURE__ */ prop22("src");
  var id2 = /* @__PURE__ */ prop22("id");
  var classes = /* @__PURE__ */ function() {
    var $32 = prop22("className");
    var $33 = joinWith(" ");
    var $34 = map(functorArray)(unwrap4);
    return function($35) {
      return $32($33($34($35)));
    };
  }();
  var attr2 = /* @__PURE__ */ function() {
    return attr(Nothing.value);
  }();

  // output/Halogen.HTML/index.js
  var componentSlot2 = /* @__PURE__ */ componentSlot();
  var slot_ = function() {
    return function(dictIsSymbol) {
      var componentSlot1 = componentSlot2(dictIsSymbol);
      return function(dictOrd) {
        var componentSlot22 = componentSlot1(dictOrd);
        return function(label5) {
          return function(p2) {
            return function(component) {
              return function(input3) {
                return widget(new ComponentSlot(componentSlot22(label5)(p2)(component)(input3)($$const(Nothing.value))));
              };
            };
          };
        };
      };
    };
  };
  var slot = function() {
    return function(dictIsSymbol) {
      var componentSlot1 = componentSlot2(dictIsSymbol);
      return function(dictOrd) {
        var componentSlot22 = componentSlot1(dictOrd);
        return function(label5) {
          return function(p2) {
            return function(component) {
              return function(input3) {
                return function(outputQuery) {
                  return widget(new ComponentSlot(componentSlot22(label5)(p2)(component)(input3)(function($11) {
                    return Just.create(outputQuery($11));
                  })));
                };
              };
            };
          };
        };
      };
    };
  };

  // output/Control.Monad.Except/index.js
  var unwrap5 = /* @__PURE__ */ unwrap();
  var runExcept = function($3) {
    return unwrap5(runExceptT($3));
  };

  // output/Foreign.Index/foreign.js
  function unsafeReadPropImpl(f, s2, key, value12) {
    return value12 == null ? f : s2(value12[key]);
  }

  // output/Foreign.Index/index.js
  var unsafeReadProp = function(dictMonad) {
    var fail2 = fail(dictMonad);
    var pure15 = pure(applicativeExceptT(dictMonad));
    return function(k) {
      return function(value12) {
        return unsafeReadPropImpl(fail2(new TypeMismatch("object", typeOf(value12))), pure15, k, value12);
      };
    };
  };
  var readProp = function(dictMonad) {
    return unsafeReadProp(dictMonad);
  };

  // output/Web.UIEvent.MouseEvent.EventTypes/index.js
  var click2 = "click";

  // output/Halogen.HTML.Events/index.js
  var mouseHandler = unsafeCoerce2;
  var handler2 = function(et) {
    return function(f) {
      return handler(et)(function(ev) {
        return new Just(new Action(f(ev)));
      });
    };
  };
  var onClick = /* @__PURE__ */ function() {
    var $15 = handler2(click2);
    return function($16) {
      return $15(mouseHandler($16));
    };
  }();

  // output/Halogen.Query/index.js
  var $$void5 = /* @__PURE__ */ $$void(functorHalogenM);
  var query2 = /* @__PURE__ */ query();
  var identity8 = /* @__PURE__ */ identity(categoryFn);
  var tell2 = function() {
    return function(dictIsSymbol) {
      var query1 = query2(dictIsSymbol);
      return function(dictOrd) {
        var query22 = query1(dictOrd);
        return function(slot3) {
          return function(label5) {
            return function(req) {
              return $$void5(query22(slot3)(label5)(req(unit)));
            };
          };
        };
      };
    };
  };
  var request = function() {
    return function(dictIsSymbol) {
      var query1 = query2(dictIsSymbol);
      return function(dictOrd) {
        var query22 = query1(dictOrd);
        return function(slot3) {
          return function(label5) {
            return function(req) {
              return query22(slot3)(label5)(req(identity8));
            };
          };
        };
      };
    };
  };

  // output/Control.Monad.Fork.Class/index.js
  var monadForkAff = {
    suspend: suspendAff,
    fork: forkAff,
    join: joinFiber,
    Monad0: function() {
      return monadAff;
    },
    Functor1: function() {
      return functorFiber;
    }
  };
  var fork2 = function(dict) {
    return dict.fork;
  };

  // output/Effect.Console/foreign.js
  var log2 = function(s2) {
    return function() {
      console.log(s2);
    };
  };
  var warn = function(s2) {
    return function() {
      console.warn(s2);
    };
  };

  // output/Effect.Console/index.js
  var logShow = function(dictShow) {
    var show10 = show(dictShow);
    return function(a3) {
      return log2(show10(a3));
    };
  };

  // output/Halogen.Aff.Driver.State/index.js
  var unRenderStateX = unsafeCoerce2;
  var unDriverStateX = unsafeCoerce2;
  var renderStateX_ = function(dictApplicative) {
    var traverse_7 = traverse_(dictApplicative)(foldableMaybe);
    return function(f) {
      return unDriverStateX(function(st) {
        return traverse_7(f)(st.rendering);
      });
    };
  };
  var mkRenderStateX = unsafeCoerce2;
  var renderStateX = function(dictFunctor) {
    return function(f) {
      return unDriverStateX(function(st) {
        return mkRenderStateX(f(st.rendering));
      });
    };
  };
  var mkDriverStateXRef = unsafeCoerce2;
  var mapDriverState = function(f) {
    return function(v2) {
      return f(v2);
    };
  };
  var initDriverState = function(component) {
    return function(input3) {
      return function(handler3) {
        return function(lchs) {
          return function __do2() {
            var selfRef = $$new({})();
            var childrenIn = $$new(empty3)();
            var childrenOut = $$new(empty3)();
            var handlerRef = $$new(handler3)();
            var pendingQueries = $$new(new Just(Nil.value))();
            var pendingOuts = $$new(new Just(Nil.value))();
            var pendingHandlers = $$new(Nothing.value)();
            var fresh2 = $$new(1)();
            var subscriptions = $$new(new Just(empty2))();
            var forks = $$new(empty2)();
            var ds = {
              component,
              state: component.initialState(input3),
              refs: empty2,
              children: empty3,
              childrenIn,
              childrenOut,
              selfRef,
              handlerRef,
              pendingQueries,
              pendingOuts,
              pendingHandlers,
              rendering: Nothing.value,
              fresh: fresh2,
              subscriptions,
              forks,
              lifecycleHandlers: lchs
            };
            write(ds)(selfRef)();
            return mkDriverStateXRef(selfRef);
          };
        };
      };
    };
  };

  // output/Halogen.Aff.Driver.Eval/index.js
  var traverse_4 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var bindFlipped5 = /* @__PURE__ */ bindFlipped(bindMaybe);
  var lookup6 = /* @__PURE__ */ lookup(ordSubscriptionId);
  var bind12 = /* @__PURE__ */ bind(bindAff);
  var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var discard3 = /* @__PURE__ */ discard(discardUnit);
  var discard1 = /* @__PURE__ */ discard3(bindAff);
  var traverse_12 = /* @__PURE__ */ traverse_(applicativeAff);
  var traverse_22 = /* @__PURE__ */ traverse_12(foldableList);
  var fork3 = /* @__PURE__ */ fork2(monadForkAff);
  var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(applicativeParAff)(foldableList);
  var pure7 = /* @__PURE__ */ pure(applicativeAff);
  var map14 = /* @__PURE__ */ map(functorCoyoneda);
  var parallel3 = /* @__PURE__ */ parallel(parallelAff);
  var map15 = /* @__PURE__ */ map(functorAff);
  var sequential2 = /* @__PURE__ */ sequential(parallelAff);
  var map22 = /* @__PURE__ */ map(functorMaybe);
  var insert4 = /* @__PURE__ */ insert(ordSubscriptionId);
  var retractFreeAp2 = /* @__PURE__ */ retractFreeAp(applicativeParAff);
  var $$delete2 = /* @__PURE__ */ $$delete(ordForkId);
  var unlessM2 = /* @__PURE__ */ unlessM(monadEffect);
  var insert12 = /* @__PURE__ */ insert(ordForkId);
  var traverse_32 = /* @__PURE__ */ traverse_12(foldableMaybe);
  var lookup12 = /* @__PURE__ */ lookup(ordForkId);
  var lookup22 = /* @__PURE__ */ lookup(ordString);
  var foldFree2 = /* @__PURE__ */ foldFree(monadRecAff);
  var alter2 = /* @__PURE__ */ alter(ordString);
  var unsubscribe3 = function(sid) {
    return function(ref3) {
      return function __do2() {
        var v2 = read(ref3)();
        var subs = read(v2.subscriptions)();
        return traverse_4(unsubscribe)(bindFlipped5(lookup6(sid))(subs))();
      };
    };
  };
  var queueOrRun = function(ref3) {
    return function(au) {
      return bind12(liftEffect4(read(ref3)))(function(v2) {
        if (v2 instanceof Nothing) {
          return au;
        }
        ;
        if (v2 instanceof Just) {
          return liftEffect4(write(new Just(new Cons(au, v2.value0)))(ref3));
        }
        ;
        throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 188, column 33 - line 190, column 57): " + [v2.constructor.name]);
      });
    };
  };
  var handleLifecycle = function(lchs) {
    return function(f) {
      return discard1(liftEffect4(write({
        initializers: Nil.value,
        finalizers: Nil.value
      })(lchs)))(function() {
        return bind12(liftEffect4(f))(function(result) {
          return bind12(liftEffect4(read(lchs)))(function(v2) {
            return discard1(traverse_22(fork3)(v2.finalizers))(function() {
              return discard1(parSequence_2(v2.initializers))(function() {
                return pure7(result);
              });
            });
          });
        });
      });
    };
  };
  var handleAff = /* @__PURE__ */ runAff_(/* @__PURE__ */ either(throwException)(/* @__PURE__ */ $$const(/* @__PURE__ */ pure(applicativeEffect)(unit))));
  var fresh = function(f) {
    return function(ref3) {
      return bind12(liftEffect4(read(ref3)))(function(v2) {
        return liftEffect4(modify$prime(function(i2) {
          return {
            state: i2 + 1 | 0,
            value: f(i2)
          };
        })(v2.fresh));
      });
    };
  };
  var evalQ = function(render) {
    return function(ref3) {
      return function(q3) {
        return bind12(liftEffect4(read(ref3)))(function(v2) {
          return evalM(render)(ref3)(v2["component"]["eval"](new Query(map14(Just.create)(liftCoyoneda(q3)), $$const(Nothing.value))));
        });
      };
    };
  };
  var evalM = function(render) {
    return function(initRef) {
      return function(v2) {
        var evalChildQuery = function(ref3) {
          return function(cqb) {
            return bind12(liftEffect4(read(ref3)))(function(v1) {
              return unChildQueryBox(function(v22) {
                var evalChild = function(v3) {
                  return parallel3(bind12(liftEffect4(read(v3)))(function(dsx) {
                    return unDriverStateX(function(ds) {
                      return evalQ(render)(ds.selfRef)(v22.value1);
                    })(dsx);
                  }));
                };
                return map15(v22.value2)(sequential2(v22.value0(applicativeParAff)(evalChild)(v1.children)));
              })(cqb);
            });
          };
        };
        var go2 = function(ref3) {
          return function(v1) {
            if (v1 instanceof State) {
              return bind12(liftEffect4(read(ref3)))(function(v22) {
                var v3 = v1.value0(v22.state);
                if (unsafeRefEq(v22.state)(v3.value1)) {
                  return pure7(v3.value0);
                }
                ;
                if (otherwise) {
                  return discard1(liftEffect4(write({
                    component: v22.component,
                    refs: v22.refs,
                    children: v22.children,
                    childrenIn: v22.childrenIn,
                    childrenOut: v22.childrenOut,
                    selfRef: v22.selfRef,
                    handlerRef: v22.handlerRef,
                    pendingQueries: v22.pendingQueries,
                    pendingOuts: v22.pendingOuts,
                    pendingHandlers: v22.pendingHandlers,
                    rendering: v22.rendering,
                    fresh: v22.fresh,
                    subscriptions: v22.subscriptions,
                    forks: v22.forks,
                    lifecycleHandlers: v22.lifecycleHandlers,
                    state: v3.value1
                  })(ref3)))(function() {
                    return discard1(handleLifecycle(v22.lifecycleHandlers)(render(v22.lifecycleHandlers)(ref3)))(function() {
                      return pure7(v3.value0);
                    });
                  });
                }
                ;
                throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 86, column 7 - line 92, column 21): " + [v3.constructor.name]);
              });
            }
            ;
            if (v1 instanceof Subscribe) {
              return bind12(fresh(SubscriptionId)(ref3))(function(sid) {
                return bind12(liftEffect4(subscribe(v1.value0(sid))(function(act) {
                  return handleAff(evalF(render)(ref3)(new Action(act)));
                })))(function(finalize) {
                  return bind12(liftEffect4(read(ref3)))(function(v22) {
                    return discard1(liftEffect4(modify_2(map22(insert4(sid)(finalize)))(v22.subscriptions)))(function() {
                      return pure7(v1.value1(sid));
                    });
                  });
                });
              });
            }
            ;
            if (v1 instanceof Unsubscribe) {
              return discard1(liftEffect4(unsubscribe3(v1.value0)(ref3)))(function() {
                return pure7(v1.value1);
              });
            }
            ;
            if (v1 instanceof Lift2) {
              return v1.value0;
            }
            ;
            if (v1 instanceof ChildQuery2) {
              return evalChildQuery(ref3)(v1.value0);
            }
            ;
            if (v1 instanceof Raise) {
              return bind12(liftEffect4(read(ref3)))(function(v22) {
                return bind12(liftEffect4(read(v22.handlerRef)))(function(handler3) {
                  return discard1(queueOrRun(v22.pendingOuts)(handler3(v1.value0)))(function() {
                    return pure7(v1.value1);
                  });
                });
              });
            }
            ;
            if (v1 instanceof Par) {
              return sequential2(retractFreeAp2(hoistFreeAp(function() {
                var $119 = evalM(render)(ref3);
                return function($120) {
                  return parallel3($119($120));
                };
              }())(v1.value0)));
            }
            ;
            if (v1 instanceof Fork) {
              return bind12(fresh(ForkId)(ref3))(function(fid) {
                return bind12(liftEffect4(read(ref3)))(function(v22) {
                  return bind12(liftEffect4($$new(false)))(function(doneRef) {
                    return bind12(fork3($$finally(liftEffect4(function __do2() {
                      modify_2($$delete2(fid))(v22.forks)();
                      return write(true)(doneRef)();
                    }))(evalM(render)(ref3)(v1.value0))))(function(fiber) {
                      return discard1(liftEffect4(unlessM2(read(doneRef))(modify_2(insert12(fid)(fiber))(v22.forks))))(function() {
                        return pure7(v1.value1(fid));
                      });
                    });
                  });
                });
              });
            }
            ;
            if (v1 instanceof Join) {
              return bind12(liftEffect4(read(ref3)))(function(v22) {
                return bind12(liftEffect4(read(v22.forks)))(function(forkMap) {
                  return discard1(traverse_32(joinFiber)(lookup12(v1.value0)(forkMap)))(function() {
                    return pure7(v1.value1);
                  });
                });
              });
            }
            ;
            if (v1 instanceof Kill) {
              return bind12(liftEffect4(read(ref3)))(function(v22) {
                return bind12(liftEffect4(read(v22.forks)))(function(forkMap) {
                  return discard1(traverse_32(killFiber(error("Cancelled")))(lookup12(v1.value0)(forkMap)))(function() {
                    return pure7(v1.value1);
                  });
                });
              });
            }
            ;
            if (v1 instanceof GetRef) {
              return bind12(liftEffect4(read(ref3)))(function(v22) {
                return pure7(v1.value1(lookup22(v1.value0)(v22.refs)));
              });
            }
            ;
            throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 83, column 12 - line 139, column 33): " + [v1.constructor.name]);
          };
        };
        return foldFree2(go2(initRef))(v2);
      };
    };
  };
  var evalF = function(render) {
    return function(ref3) {
      return function(v2) {
        if (v2 instanceof RefUpdate) {
          return liftEffect4(flip(modify_2)(ref3)(mapDriverState(function(st) {
            return {
              component: st.component,
              state: st.state,
              children: st.children,
              childrenIn: st.childrenIn,
              childrenOut: st.childrenOut,
              selfRef: st.selfRef,
              handlerRef: st.handlerRef,
              pendingQueries: st.pendingQueries,
              pendingOuts: st.pendingOuts,
              pendingHandlers: st.pendingHandlers,
              rendering: st.rendering,
              fresh: st.fresh,
              subscriptions: st.subscriptions,
              forks: st.forks,
              lifecycleHandlers: st.lifecycleHandlers,
              refs: alter2($$const(v2.value1))(v2.value0)(st.refs)
            };
          })));
        }
        ;
        if (v2 instanceof Action) {
          return bind12(liftEffect4(read(ref3)))(function(v1) {
            return evalM(render)(ref3)(v1["component"]["eval"](new Action2(v2.value0, unit)));
          });
        }
        ;
        throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval (line 52, column 20 - line 58, column 62): " + [v2.constructor.name]);
      };
    };
  };

  // output/Halogen.Aff.Driver/index.js
  var bind4 = /* @__PURE__ */ bind(bindEffect);
  var discard4 = /* @__PURE__ */ discard(discardUnit);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var traverse_5 = /* @__PURE__ */ traverse_(applicativeAff)(foldableList);
  var fork4 = /* @__PURE__ */ fork2(monadForkAff);
  var bindFlipped6 = /* @__PURE__ */ bindFlipped(bindEffect);
  var traverse_13 = /* @__PURE__ */ traverse_(applicativeEffect);
  var traverse_23 = /* @__PURE__ */ traverse_13(foldableMaybe);
  var traverse_33 = /* @__PURE__ */ traverse_13(foldableMap);
  var discard22 = /* @__PURE__ */ discard4(bindAff);
  var parSequence_3 = /* @__PURE__ */ parSequence_(parallelAff)(applicativeParAff)(foldableList);
  var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var pure8 = /* @__PURE__ */ pure(applicativeEffect);
  var map16 = /* @__PURE__ */ map(functorEffect);
  var pure12 = /* @__PURE__ */ pure(applicativeAff);
  var when2 = /* @__PURE__ */ when(applicativeEffect);
  var renderStateX2 = /* @__PURE__ */ renderStateX(functorEffect);
  var $$void6 = /* @__PURE__ */ $$void(functorAff);
  var foreachSlot2 = /* @__PURE__ */ foreachSlot(applicativeEffect);
  var renderStateX_2 = /* @__PURE__ */ renderStateX_(applicativeEffect);
  var tailRecM3 = /* @__PURE__ */ tailRecM(monadRecEffect);
  var voidLeft3 = /* @__PURE__ */ voidLeft(functorEffect);
  var bind13 = /* @__PURE__ */ bind(bindAff);
  var liftEffect1 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var newLifecycleHandlers = /* @__PURE__ */ function() {
    return $$new({
      initializers: Nil.value,
      finalizers: Nil.value
    });
  }();
  var handlePending = function(ref3) {
    return function __do2() {
      var queue = read(ref3)();
      write(Nothing.value)(ref3)();
      return for_2(queue)(function() {
        var $59 = traverse_5(fork4);
        return function($60) {
          return handleAff($59(reverse2($60)));
        };
      }())();
    };
  };
  var cleanupSubscriptionsAndForks = function(v2) {
    return function __do2() {
      bindFlipped6(traverse_23(traverse_33(unsubscribe)))(read(v2.subscriptions))();
      write(Nothing.value)(v2.subscriptions)();
      bindFlipped6(traverse_33(function() {
        var $61 = killFiber(error("finalized"));
        return function($62) {
          return handleAff($61($62));
        };
      }()))(read(v2.forks))();
      return write(empty2)(v2.forks)();
    };
  };
  var runUI = function(renderSpec2) {
    return function(component) {
      return function(i2) {
        var squashChildInitializers = function(lchs) {
          return function(preInits) {
            return unDriverStateX(function(st) {
              var parentInitializer = evalM(render)(st.selfRef)(st["component"]["eval"](new Initialize(unit)));
              return modify_2(function(handlers) {
                return {
                  initializers: new Cons(discard22(parSequence_3(reverse2(handlers.initializers)))(function() {
                    return discard22(parentInitializer)(function() {
                      return liftEffect5(function __do2() {
                        handlePending(st.pendingQueries)();
                        return handlePending(st.pendingOuts)();
                      });
                    });
                  }), preInits),
                  finalizers: handlers.finalizers
                };
              })(lchs);
            });
          };
        };
        var runComponent = function(lchs) {
          return function(handler3) {
            return function(j) {
              return unComponent(function(c2) {
                return function __do2() {
                  var lchs$prime = newLifecycleHandlers();
                  var $$var2 = initDriverState(c2)(j)(handler3)(lchs$prime)();
                  var pre2 = read(lchs)();
                  write({
                    initializers: Nil.value,
                    finalizers: pre2.finalizers
                  })(lchs)();
                  bindFlipped6(unDriverStateX(function() {
                    var $63 = render(lchs);
                    return function($64) {
                      return $63(function(v2) {
                        return v2.selfRef;
                      }($64));
                    };
                  }()))(read($$var2))();
                  bindFlipped6(squashChildInitializers(lchs)(pre2.initializers))(read($$var2))();
                  return $$var2;
                };
              });
            };
          };
        };
        var renderChild = function(lchs) {
          return function(handler3) {
            return function(childrenInRef) {
              return function(childrenOutRef) {
                return unComponentSlot(function(slot3) {
                  return function __do2() {
                    var childrenIn = map16(slot3.pop)(read(childrenInRef))();
                    var $$var2 = function() {
                      if (childrenIn instanceof Just) {
                        write(childrenIn.value0.value1)(childrenInRef)();
                        var dsx = read(childrenIn.value0.value0)();
                        unDriverStateX(function(st) {
                          return function __do3() {
                            flip(write)(st.handlerRef)(function() {
                              var $65 = maybe(pure12(unit))(handler3);
                              return function($66) {
                                return $65(slot3.output($66));
                              };
                            }())();
                            return handleAff(evalM(render)(st.selfRef)(st["component"]["eval"](new Receive(slot3.input, unit))))();
                          };
                        })(dsx)();
                        return childrenIn.value0.value0;
                      }
                      ;
                      if (childrenIn instanceof Nothing) {
                        return runComponent(lchs)(function() {
                          var $67 = maybe(pure12(unit))(handler3);
                          return function($68) {
                            return $67(slot3.output($68));
                          };
                        }())(slot3.input)(slot3.component)();
                      }
                      ;
                      throw new Error("Failed pattern match at Halogen.Aff.Driver (line 213, column 14 - line 222, column 98): " + [childrenIn.constructor.name]);
                    }();
                    var isDuplicate = map16(function($69) {
                      return isJust(slot3.get($69));
                    })(read(childrenOutRef))();
                    when2(isDuplicate)(warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur"))();
                    modify_2(slot3.set($$var2))(childrenOutRef)();
                    return bind4(read($$var2))(renderStateX2(function(v2) {
                      if (v2 instanceof Nothing) {
                        return $$throw("Halogen internal error: child was not initialized in renderChild");
                      }
                      ;
                      if (v2 instanceof Just) {
                        return pure8(renderSpec2.renderChild(v2.value0));
                      }
                      ;
                      throw new Error("Failed pattern match at Halogen.Aff.Driver (line 227, column 37 - line 229, column 50): " + [v2.constructor.name]);
                    }))();
                  };
                });
              };
            };
          };
        };
        var render = function(lchs) {
          return function($$var2) {
            return function __do2() {
              var v2 = read($$var2)();
              var shouldProcessHandlers = map16(isNothing)(read(v2.pendingHandlers))();
              when2(shouldProcessHandlers)(write(new Just(Nil.value))(v2.pendingHandlers))();
              write(empty3)(v2.childrenOut)();
              write(v2.children)(v2.childrenIn)();
              var handler3 = function() {
                var $70 = queueOrRun(v2.pendingHandlers);
                var $71 = evalF(render)(v2.selfRef);
                return function($72) {
                  return $70($$void6($71($72)));
                };
              }();
              var childHandler = function() {
                var $73 = queueOrRun(v2.pendingQueries);
                return function($74) {
                  return $73(handler3(Action.create($74)));
                };
              }();
              var rendering = renderSpec2.render(function($75) {
                return handleAff(handler3($75));
              })(renderChild(lchs)(childHandler)(v2.childrenIn)(v2.childrenOut))(v2.component.render(v2.state))(v2.rendering)();
              var children2 = read(v2.childrenOut)();
              var childrenIn = read(v2.childrenIn)();
              foreachSlot2(childrenIn)(function(v1) {
                return function __do3() {
                  var childDS = read(v1)();
                  renderStateX_2(renderSpec2.removeChild)(childDS)();
                  return finalize(lchs)(childDS)();
                };
              })();
              flip(modify_2)(v2.selfRef)(mapDriverState(function(ds$prime) {
                return {
                  component: ds$prime.component,
                  state: ds$prime.state,
                  refs: ds$prime.refs,
                  childrenIn: ds$prime.childrenIn,
                  childrenOut: ds$prime.childrenOut,
                  selfRef: ds$prime.selfRef,
                  handlerRef: ds$prime.handlerRef,
                  pendingQueries: ds$prime.pendingQueries,
                  pendingOuts: ds$prime.pendingOuts,
                  pendingHandlers: ds$prime.pendingHandlers,
                  fresh: ds$prime.fresh,
                  subscriptions: ds$prime.subscriptions,
                  forks: ds$prime.forks,
                  lifecycleHandlers: ds$prime.lifecycleHandlers,
                  rendering: new Just(rendering),
                  children: children2
                };
              }))();
              return when2(shouldProcessHandlers)(flip(tailRecM3)(unit)(function(v1) {
                return function __do3() {
                  var handlers = read(v2.pendingHandlers)();
                  write(new Just(Nil.value))(v2.pendingHandlers)();
                  traverse_23(function() {
                    var $76 = traverse_5(fork4);
                    return function($77) {
                      return handleAff($76(reverse2($77)));
                    };
                  }())(handlers)();
                  var mmore = read(v2.pendingHandlers)();
                  var $52 = maybe(false)($$null)(mmore);
                  if ($52) {
                    return voidLeft3(write(Nothing.value)(v2.pendingHandlers))(new Done(unit))();
                  }
                  ;
                  return new Loop(unit);
                };
              }))();
            };
          };
        };
        var finalize = function(lchs) {
          return unDriverStateX(function(st) {
            return function __do2() {
              cleanupSubscriptionsAndForks(st)();
              var f = evalM(render)(st.selfRef)(st["component"]["eval"](new Finalize(unit)));
              modify_2(function(handlers) {
                return {
                  initializers: handlers.initializers,
                  finalizers: new Cons(f, handlers.finalizers)
                };
              })(lchs)();
              return foreachSlot2(st.children)(function(v2) {
                return function __do3() {
                  var dsx = read(v2)();
                  return finalize(lchs)(dsx)();
                };
              })();
            };
          });
        };
        var evalDriver = function(disposed) {
          return function(ref3) {
            return function(q3) {
              return bind13(liftEffect5(read(disposed)))(function(v2) {
                if (v2) {
                  return pure12(Nothing.value);
                }
                ;
                return evalQ(render)(ref3)(q3);
              });
            };
          };
        };
        var dispose = function(disposed) {
          return function(lchs) {
            return function(dsx) {
              return handleLifecycle(lchs)(function __do2() {
                var v2 = read(disposed)();
                if (v2) {
                  return unit;
                }
                ;
                write(true)(disposed)();
                finalize(lchs)(dsx)();
                return unDriverStateX(function(v1) {
                  return function __do3() {
                    var v22 = liftEffect1(read(v1.selfRef))();
                    return for_2(v22.rendering)(renderSpec2.dispose)();
                  };
                })(dsx)();
              });
            };
          };
        };
        return bind13(liftEffect5(newLifecycleHandlers))(function(lchs) {
          return bind13(liftEffect5($$new(false)))(function(disposed) {
            return handleLifecycle(lchs)(function __do2() {
              var sio = create3();
              var dsx = bindFlipped6(read)(runComponent(lchs)(function() {
                var $78 = notify(sio.listener);
                return function($79) {
                  return liftEffect5($78($79));
                };
              }())(i2)(component))();
              return unDriverStateX(function(st) {
                return pure8({
                  query: evalDriver(disposed)(st.selfRef),
                  messages: sio.emitter,
                  dispose: dispose(disposed)(lchs)(dsx)
                });
              })(dsx)();
            });
          });
        });
      };
    };
  };

  // output/Web.DOM.Node/foreign.js
  var getEffProp2 = function(name15) {
    return function(node) {
      return function() {
        return node[name15];
      };
    };
  };
  var baseURI = getEffProp2("baseURI");
  var _ownerDocument = getEffProp2("ownerDocument");
  var _parentNode = getEffProp2("parentNode");
  var _parentElement = getEffProp2("parentElement");
  var childNodes = getEffProp2("childNodes");
  var _firstChild = getEffProp2("firstChild");
  var _lastChild = getEffProp2("lastChild");
  var _previousSibling = getEffProp2("previousSibling");
  var _nextSibling = getEffProp2("nextSibling");
  var _nodeValue = getEffProp2("nodeValue");
  var textContent = getEffProp2("textContent");
  function insertBefore(node1) {
    return function(node2) {
      return function(parent2) {
        return function() {
          parent2.insertBefore(node1, node2);
        };
      };
    };
  }
  function appendChild(node) {
    return function(parent2) {
      return function() {
        parent2.appendChild(node);
      };
    };
  }
  function removeChild2(node) {
    return function(parent2) {
      return function() {
        parent2.removeChild(node);
      };
    };
  }

  // output/Web.DOM.Node/index.js
  var map17 = /* @__PURE__ */ map(functorEffect);
  var parentNode2 = /* @__PURE__ */ function() {
    var $6 = map17(toMaybe);
    return function($7) {
      return $6(_parentNode($7));
    };
  }();
  var nextSibling = /* @__PURE__ */ function() {
    var $15 = map17(toMaybe);
    return function($16) {
      return $15(_nextSibling($16));
    };
  }();

  // output/Halogen.VDom.Driver/index.js
  var $runtime_lazy8 = function(name15, moduleName, init2) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init2();
      state3 = 2;
      return val;
    };
  };
  var $$void7 = /* @__PURE__ */ $$void(functorEffect);
  var pure9 = /* @__PURE__ */ pure(applicativeEffect);
  var traverse_6 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var unwrap6 = /* @__PURE__ */ unwrap();
  var when3 = /* @__PURE__ */ when(applicativeEffect);
  var not2 = /* @__PURE__ */ not(/* @__PURE__ */ heytingAlgebraFunction(/* @__PURE__ */ heytingAlgebraFunction(heytingAlgebraBoolean)));
  var identity9 = /* @__PURE__ */ identity(categoryFn);
  var bind14 = /* @__PURE__ */ bind(bindAff);
  var liftEffect6 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var map18 = /* @__PURE__ */ map(functorEffect);
  var bindFlipped7 = /* @__PURE__ */ bindFlipped(bindEffect);
  var substInParent = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v1 instanceof Just && v22 instanceof Just) {
          return $$void7(insertBefore(v2)(v1.value0)(v22.value0));
        }
        ;
        if (v1 instanceof Nothing && v22 instanceof Just) {
          return $$void7(appendChild(v2)(v22.value0));
        }
        ;
        return pure9(unit);
      };
    };
  };
  var removeChild3 = function(v2) {
    return function __do2() {
      var npn = parentNode2(v2.node)();
      return traverse_6(function(pn) {
        return removeChild2(v2.node)(pn);
      })(npn)();
    };
  };
  var mkSpec = function(handler3) {
    return function(renderChildRef) {
      return function(document2) {
        var getNode = unRenderStateX(function(v2) {
          return v2.node;
        });
        var done = function(st) {
          if (st instanceof Just) {
            return halt(st.value0);
          }
          ;
          return unit;
        };
        var buildWidget2 = function(spec) {
          var buildThunk2 = buildThunk(unwrap6)(spec);
          var $lazy_patch = $runtime_lazy8("patch", "Halogen.VDom.Driver", function() {
            return function(st, slot3) {
              if (st instanceof Just) {
                if (slot3 instanceof ComponentSlot) {
                  halt(st.value0);
                  return $lazy_renderComponentSlot(100)(slot3.value0);
                }
                ;
                if (slot3 instanceof ThunkSlot) {
                  var step$prime = step2(st.value0, slot3.value0);
                  return mkStep(new Step(extract2(step$prime), new Just(step$prime), $lazy_patch(103), done));
                }
                ;
                throw new Error("Failed pattern match at Halogen.VDom.Driver (line 97, column 22 - line 103, column 79): " + [slot3.constructor.name]);
              }
              ;
              return $lazy_render(104)(slot3);
            };
          });
          var $lazy_render = $runtime_lazy8("render", "Halogen.VDom.Driver", function() {
            return function(slot3) {
              if (slot3 instanceof ComponentSlot) {
                return $lazy_renderComponentSlot(86)(slot3.value0);
              }
              ;
              if (slot3 instanceof ThunkSlot) {
                var step3 = buildThunk2(slot3.value0);
                return mkStep(new Step(extract2(step3), new Just(step3), $lazy_patch(89), done));
              }
              ;
              throw new Error("Failed pattern match at Halogen.VDom.Driver (line 84, column 7 - line 89, column 75): " + [slot3.constructor.name]);
            };
          });
          var $lazy_renderComponentSlot = $runtime_lazy8("renderComponentSlot", "Halogen.VDom.Driver", function() {
            return function(cs) {
              var renderChild = read(renderChildRef)();
              var rsx = renderChild(cs)();
              var node = getNode(rsx);
              return mkStep(new Step(node, Nothing.value, $lazy_patch(117), done));
            };
          });
          var patch = $lazy_patch(91);
          var render = $lazy_render(82);
          var renderComponentSlot = $lazy_renderComponentSlot(109);
          return render;
        };
        var buildAttributes = buildProp(handler3);
        return {
          buildWidget: buildWidget2,
          buildAttributes,
          document: document2
        };
      };
    };
  };
  var renderSpec = function(document2) {
    return function(container) {
      var render = function(handler3) {
        return function(child) {
          return function(v2) {
            return function(v1) {
              if (v1 instanceof Nothing) {
                return function __do2() {
                  var renderChildRef = $$new(child)();
                  var spec = mkSpec(handler3)(renderChildRef)(document2);
                  var machine = buildVDom(spec)(v2);
                  var node = extract2(machine);
                  $$void7(appendChild(node)(toNode(container)))();
                  return {
                    machine,
                    node,
                    renderChildRef
                  };
                };
              }
              ;
              if (v1 instanceof Just) {
                return function __do2() {
                  write(child)(v1.value0.renderChildRef)();
                  var parent2 = parentNode2(v1.value0.node)();
                  var nextSib = nextSibling(v1.value0.node)();
                  var machine$prime = step2(v1.value0.machine, v2);
                  var newNode = extract2(machine$prime);
                  when3(not2(unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(nextSib)(parent2))();
                  return {
                    machine: machine$prime,
                    node: newNode,
                    renderChildRef: v1.value0.renderChildRef
                  };
                };
              }
              ;
              throw new Error("Failed pattern match at Halogen.VDom.Driver (line 157, column 5 - line 173, column 80): " + [v1.constructor.name]);
            };
          };
        };
      };
      return {
        render,
        renderChild: identity9,
        removeChild: removeChild3,
        dispose: removeChild3
      };
    };
  };
  var runUI2 = function(component) {
    return function(i2) {
      return function(element4) {
        return bind14(liftEffect6(map18(toDocument)(bindFlipped7(document)(windowImpl))))(function(document2) {
          return runUI(renderSpec(document2)(element4))(component)(i2);
        });
      };
    };
  };

  // output/Data.HashMap/foreign.js
  function MapNode(datamap, nodemap, content3) {
    this.datamap = datamap;
    this.nodemap = nodemap;
    this.content = content3;
  }
  MapNode.prototype.lookup = function lookup7(Nothing2, Just2, keyEquals, key, keyHash, shift) {
    var bit = mask(keyHash, shift);
    if ((this.datamap & bit) !== 0) {
      var i2 = index3(this.datamap, bit);
      if (keyEquals(key)(this.content[i2 * 2]))
        return Just2(this.content[i2 * 2 + 1]);
      return Nothing2;
    }
    if ((this.nodemap & bit) !== 0) {
      return this.content[this.content.length - 1 - index3(this.nodemap, bit)].lookup(Nothing2, Just2, keyEquals, key, keyHash, shift + 5);
    }
    return Nothing2;
  };
  function remove2insert1Mut(a3, removeIndex, insertIndex, v1) {
    for (var i2 = removeIndex; i2 < insertIndex; i2++) a3[i2] = a3[i2 + 2];
    a3[i2++] = v1;
    for (; i2 < a3.length - 1; i2++) a3[i2] = a3[i2 + 1];
    a3.length = a3.length - 1;
  }
  MapNode.prototype.insertMut = function insertMut(keyEquals, hashFunction, key, keyHash, value12, shift) {
    var bit = mask(keyHash, shift);
    var i2 = index3(this.datamap, bit);
    if ((this.datamap & bit) !== 0) {
      var k = this.content[i2 * 2];
      if (keyEquals(k)(key)) {
        this.content[i2 * 2 + 1] = value12;
      } else {
        var newNode = binaryNode(k, hashFunction(k), this.content[i2 * 2 + 1], key, keyHash, value12, shift + 5);
        this.datamap = this.datamap ^ bit;
        this.nodemap = this.nodemap | bit;
        remove2insert1Mut(this.content, i2 * 2, this.content.length - index3(this.nodemap, bit) - 2, newNode);
      }
    } else if ((this.nodemap & bit) !== 0) {
      var n = this.content.length - 1 - index3(this.nodemap, bit);
      this.content[n].insertMut(keyEquals, hashFunction, key, keyHash, value12, shift + 5);
    } else {
      this.datamap = this.datamap | bit;
      this.content.splice(i2 * 2, 0, key, value12);
    }
  };
  MapNode.prototype.insert = function insert5(keyEquals, hashFunction, key, keyHash, value12, shift) {
    var bit = mask(keyHash, shift);
    var i2 = index3(this.datamap, bit);
    if ((this.datamap & bit) !== 0) {
      var k = this.content[i2 * 2];
      if (keyEquals(k)(key))
        return new MapNode(this.datamap, this.nodemap, overwriteTwoElements(this.content, i2 * 2, key, value12));
      var newNode = binaryNode(k, hashFunction(k), this.content[i2 * 2 + 1], key, keyHash, value12, shift + 5);
      return new MapNode(this.datamap ^ bit, this.nodemap | bit, remove2insert1(this.content, i2 * 2, this.content.length - index3(this.nodemap, bit) - 2, newNode));
    }
    if ((this.nodemap & bit) !== 0) {
      var n = this.content.length - 1 - index3(this.nodemap, bit);
      return new MapNode(
        this.datamap,
        this.nodemap,
        copyAndOverwriteOrExtend1(
          this.content,
          n,
          this.content[n].insert(keyEquals, hashFunction, key, keyHash, value12, shift + 5)
        )
      );
    }
    return new MapNode(this.datamap | bit, this.nodemap, insert22(this.content, i2 * 2, key, value12));
  };
  MapNode.prototype.insertWith = function insertWith(keyEquals, hashFunction, f, key, keyHash, value12, shift) {
    var bit = mask(keyHash, shift);
    var i2 = index3(this.datamap, bit);
    if ((this.datamap & bit) !== 0) {
      var k = this.content[i2 * 2];
      if (keyEquals(k)(key))
        return new MapNode(this.datamap, this.nodemap, overwriteTwoElements(this.content, i2 * 2, key, f(this.content[i2 * 2 + 1])(value12)));
      var newNode = binaryNode(k, hashFunction(k), this.content[i2 * 2 + 1], key, keyHash, value12, shift + 5);
      return new MapNode(this.datamap ^ bit, this.nodemap | bit, remove2insert1(this.content, i2 * 2, this.content.length - index3(this.nodemap, bit) - 2, newNode));
    }
    if ((this.nodemap & bit) !== 0) {
      var n = this.content.length - 1 - index3(this.nodemap, bit);
      return new MapNode(
        this.datamap,
        this.nodemap,
        copyAndOverwriteOrExtend1(
          this.content,
          n,
          this.content[n].insertWith(keyEquals, hashFunction, f, key, keyHash, value12, shift + 5)
        )
      );
    }
    return new MapNode(this.datamap | bit, this.nodemap, insert22(this.content, i2 * 2, key, value12));
  };
  MapNode.prototype.delet = function delet(keyEquals, key, keyHash, shift) {
    var bit = mask(keyHash, shift);
    if ((this.datamap & bit) !== 0) {
      var dataIndex = index3(this.datamap, bit);
      if (keyEquals(this.content[dataIndex * 2])(key)) {
        if (this.nodemap === 0 && this.content.length === 2) return empty7;
        return new MapNode(this.datamap ^ bit, this.nodemap, remove2(this.content, dataIndex * 2));
      }
      return this;
    }
    if ((this.nodemap & bit) !== 0) {
      var nodeIndex = index3(this.nodemap, bit);
      var recNode = this.content[this.content.length - 1 - nodeIndex];
      var recRes = recNode.delet(keyEquals, key, keyHash, shift + 5);
      if (recNode === recRes) return this;
      if (recRes.isSingleton()) {
        if (this.content.length === 1) {
          recRes.datamap = this.nodemap;
          return recRes;
        }
        return new MapNode(
          this.datamap | bit,
          this.nodemap ^ bit,
          insert2remove1(this.content, 2 * index3(this.datamap, bit), recRes.content[0], recRes.content[1], this.content.length - 1 - nodeIndex)
        );
      }
      return new MapNode(this.datamap, this.nodemap, copyAndOverwriteOrExtend1(this.content, this.content.length - 1 - nodeIndex, recRes));
    }
    return this;
  };
  MapNode.prototype.toArrayBy = function(f, res) {
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      var k = this.content[i2++];
      var v2 = this.content[i2++];
      res.push(f(k)(v2));
    }
    for (; i2 < this.content.length; i2++)
      this.content[i2].toArrayBy(f, res);
  };
  MapNode.prototype.isSingleton = function() {
    return this.nodemap === 0 && this.content.length === 2;
  };
  MapNode.prototype.eq = function(kf, vf, that) {
    if (this === that) return true;
    if (this.constructor !== that.constructor || this.nodemap !== that.nodemap || this.datamap !== that.datamap) return false;
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      if (kf(this.content[i2])(that.content[i2])) i2++;
      else return false;
      if (vf(this.content[i2])(that.content[i2])) i2++;
      else return false;
    }
    for (; i2 < this.content.length; i2++)
      if (!this.content[i2].eq(kf, vf, that.content[i2])) return false;
    return true;
  };
  MapNode.prototype.hash = function(vhash) {
    var h7 = this.datamap;
    for (var i2 = 0; i2 < popCount(this.datamap); i2++)
      h7 = h7 * 31 + vhash(this.content[i2 * 2 + 1]) | 0;
    for (var j = 0; j < popCount(this.nodemap); j++)
      h7 = h7 * 31 + this.content[this.content.length - j - 1].hash(vhash) | 0;
    return h7;
  };
  MapNode.prototype.size = function() {
    var res = popCount(this.datamap);
    for (var i2 = res * 2; i2 < this.content.length; i2++) res += this.content[i2].size();
    return res;
  };
  MapNode.prototype.imap = function(f) {
    var newContent = this.content.slice();
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      var k = this.content[i2++];
      var v2 = this.content[i2++];
      newContent[i2 - 2] = k;
      newContent[i2 - 1] = f(k)(v2);
    }
    for (; i2 < this.content.length; i2++)
      newContent[i2] = this.content[i2].imap(f);
    return new MapNode(this.datamap, this.nodemap, newContent);
  };
  MapNode.prototype.ifoldMap = function(m2, mappend, f) {
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      var k = this.content[i2++];
      var v2 = this.content[i2++];
      m2 = mappend(m2)(f(k)(v2));
    }
    for (; i2 < this.content.length; i2++)
      m2 = this.content[i2].ifoldMap(m2, mappend, f);
    return m2;
  };
  function lowestBit(n) {
    return n & -n;
  }
  function mergeState(bit, thisnode, thisdata, thatnode, thatdata) {
    var state3 = 0;
    state3 |= (bit & thisnode) !== 0 ? 1 : 0;
    state3 |= (bit & thisdata) !== 0 ? 2 : 0;
    state3 |= (bit & thatnode) !== 0 ? 4 : 0;
    state3 |= (bit & thatdata) !== 0 ? 8 : 0;
    return state3;
  }
  MapNode.prototype.unionWith = function(eq3, hash5, f, that, shift) {
    if (this.constructor !== that.constructor)
      throw "Trying to union a MapNode with something else";
    var thisDataIndex, thatDataIndex, thisNodeIndex, thatNodeIndex;
    var datamap = 0;
    var nodemap = 0;
    var data = [];
    var nodes = [];
    var skipmap = this.datamap | this.nodemap | that.datamap | that.nodemap;
    while (skipmap !== 0) {
      var bit = lowestBit(skipmap);
      skipmap &= ~bit;
      switch (mergeState(bit, this.nodemap, this.datamap, that.nodemap, that.datamap)) {
        case 1:
          thisNodeIndex = index3(this.nodemap, bit);
          nodemap |= bit;
          nodes.push(this.content[this.content.length - thisNodeIndex - 1]);
          break;
        case 2:
          thisDataIndex = index3(this.datamap, bit);
          datamap |= bit;
          data.push(this.content[thisDataIndex * 2], this.content[thisDataIndex * 2 + 1]);
          break;
        case 4:
          thatNodeIndex = index3(that.nodemap, bit);
          nodemap |= bit;
          nodes.push(that.content[that.content.length - thatNodeIndex - 1]);
          break;
        case 5:
          thisNodeIndex = index3(this.nodemap, bit);
          thatNodeIndex = index3(that.nodemap, bit);
          nodemap |= bit;
          nodes.push(
            this.content[this.content.length - thisNodeIndex - 1].unionWith(eq3, hash5, f, that.content[that.content.length - thatNodeIndex - 1], shift + 5)
          );
          break;
        case 6:
          thisDataIndex = index3(this.datamap, bit);
          thatNodeIndex = index3(that.nodemap, bit);
          var k = this.content[thisDataIndex * 2];
          var v2 = this.content[thisDataIndex * 2 + 1];
          var hk = hash5(k);
          var flippedF = function(a3) {
            return function(b2) {
              return f(b2)(a3);
            };
          };
          nodemap |= bit;
          nodes.push(that.content[that.content.length - thatNodeIndex - 1].insertWith(eq3, hash5, flippedF, k, hk, v2, shift + 5));
          break;
        case 8:
          thatDataIndex = index3(that.datamap, bit);
          datamap |= bit;
          data.push(that.content[thatDataIndex * 2], that.content[thatDataIndex * 2 + 1]);
          break;
        case 9:
          thatDataIndex = index3(that.datamap, bit);
          thisNodeIndex = index3(this.nodemap, bit);
          var k = that.content[thatDataIndex * 2];
          var v2 = that.content[thatDataIndex * 2 + 1];
          var hk = hash5(k);
          nodemap |= bit;
          nodes.push(this.content[this.content.length - thisNodeIndex - 1].insertWith(eq3, hash5, f, k, hk, v2, shift + 5));
          break;
        case 10:
          thisDataIndex = index3(this.datamap, bit);
          thatDataIndex = index3(that.datamap, bit);
          if (eq3(this.content[thisDataIndex * 2])(that.content[thatDataIndex * 2])) {
            datamap |= bit;
            data.push(this.content[thisDataIndex * 2], f(this.content[thisDataIndex * 2 + 1])(that.content[thatDataIndex * 2 + 1]));
          } else {
            nodemap |= bit;
            nodes.push(binaryNode(
              this.content[thisDataIndex * 2],
              hash5(this.content[thisDataIndex * 2]),
              this.content[thisDataIndex * 2 + 1],
              that.content[thatDataIndex * 2],
              hash5(that.content[thatDataIndex * 2]),
              that.content[thatDataIndex * 2 + 1],
              shift + 5
            ));
          }
          break;
      }
    }
    return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
  };
  MapNode.prototype.intersectionWith = function(Nothing2, Just2, eq3, hash5, f, that, shift) {
    if (this.constructor !== that.constructor)
      throw "Trying to intersect a MapNode with something else";
    var thisDataIndex, thatDataIndex, thisNodeIndex, thatNodeIndex;
    var datamap = 0;
    var nodemap = 0;
    var data = [];
    var nodes = [];
    var skipmap = (this.datamap | this.nodemap) & (that.datamap | that.nodemap);
    while (skipmap !== 0) {
      var bit = lowestBit(skipmap);
      skipmap &= ~bit;
      switch (mergeState(bit, this.nodemap, this.datamap, that.nodemap, that.datamap)) {
        case 5:
          thisNodeIndex = index3(this.nodemap, bit);
          thatNodeIndex = index3(that.nodemap, bit);
          var recRes = this.content[this.content.length - thisNodeIndex - 1].intersectionWith(Nothing2, Just2, eq3, hash5, f, that.content[that.content.length - thatNodeIndex - 1], shift + 5);
          if (isEmpty(recRes)) continue;
          if (recRes.isSingleton()) {
            datamap |= bit;
            data.push(recRes.content[0], recRes.content[1]);
          } else {
            nodemap |= bit;
            nodes.push(recRes);
          }
          break;
        case 6:
          thisDataIndex = index3(this.datamap, bit);
          thatNodeIndex = index3(that.nodemap, bit);
          var k = this.content[thisDataIndex * 2];
          var v2 = this.content[thisDataIndex * 2 + 1];
          var hk = hash5(k);
          var res = that.content[that.content.length - thatNodeIndex - 1].lookup(Nothing2, Just2, eq3, k, hk, shift + 5);
          if (res !== Nothing2) {
            datamap |= bit;
            data.push(k, f(v2)(res.value0));
          }
          break;
        case 9:
          thatDataIndex = index3(that.datamap, bit);
          thisNodeIndex = index3(this.nodemap, bit);
          var k = that.content[thatDataIndex * 2];
          var v2 = that.content[thatDataIndex * 2 + 1];
          var hk = hash5(k);
          var res = this.content[this.content.length - thisNodeIndex - 1].lookup(Nothing2, Just2, eq3, k, hk, shift + 5);
          if (res !== Nothing2) {
            datamap |= bit;
            data.push(k, f(res.value0)(v2));
          }
          break;
        case 10:
          thisDataIndex = index3(this.datamap, bit);
          thatDataIndex = index3(that.datamap, bit);
          if (eq3(this.content[thisDataIndex * 2])(that.content[thatDataIndex * 2])) {
            datamap |= bit;
            data.push(this.content[thisDataIndex * 2], f(this.content[thisDataIndex * 2 + 1])(that.content[thatDataIndex * 2 + 1]));
          }
          break;
      }
    }
    return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
  };
  MapNode.prototype.filterWithKey = function filterWithKey(f) {
    var datamap = 0;
    var nodemap = 0;
    var data = [];
    var nodes = [];
    var skipmap = this.datamap | this.nodemap;
    while (skipmap !== 0) {
      var bit = lowestBit(skipmap);
      skipmap &= ~bit;
      if ((this.datamap & bit) !== 0) {
        var dataIndex = index3(this.datamap, bit);
        var k = this.content[dataIndex * 2];
        var v2 = this.content[dataIndex * 2 + 1];
        if (f(k)(v2)) {
          datamap |= bit;
          data.push(k, v2);
        }
      } else {
        var nodeIndex = index3(this.nodemap, bit);
        var node = this.content[this.content.length - nodeIndex - 1].filterWithKey(f);
        if (isEmpty(node)) continue;
        if (node.isSingleton()) {
          datamap |= bit;
          data.push(node.content[0], node.content[1]);
        } else {
          nodemap |= bit;
          nodes.push(node);
        }
      }
    }
    return new MapNode(datamap, nodemap, data.concat(nodes.reverse()));
  };
  MapNode.prototype.travHelper = function() {
    function go2(vi, vm2, ni, nm, copy2) {
      if (vi < vm2)
        return function(v2) {
          return go2(vi + 1, vm2, ni, nm, function() {
            var res = copy2();
            res.content[vi * 2 + 1] = v2;
            return res;
          });
        };
      if (ni < nm)
        return function(n) {
          return go2(vi, vm2, ni + 1, nm, function() {
            var res = copy2();
            res.content[vm2 * 2 + ni] = n;
            return res;
          });
        };
      return copy2();
    }
    var vm = popCount(this.datamap);
    var self = this;
    return go2(0, vm, 0, this.content.length - vm * 2, function() {
      return new MapNode(self.datamap, self.nodemap, self.content.slice());
    });
  };
  MapNode.prototype.ifoldMap = function(m2, mappend, f) {
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      var k = this.content[i2++];
      var v2 = this.content[i2++];
      m2 = mappend(m2)(f(k)(v2));
    }
    for (; i2 < this.content.length; i2++)
      m2 = this.content[i2].ifoldMap(m2, mappend, f);
    return m2;
  };
  MapNode.prototype.itraverse = function(pure15, apply3, f) {
    var m2 = pure15(this.travHelper());
    for (var i2 = 0; i2 < popCount(this.datamap) * 2; ) {
      var k = this.content[i2++];
      var v2 = this.content[i2++];
      m2 = apply3(m2)(f(k)(v2));
    }
    for (; i2 < this.content.length; i2++)
      m2 = apply3(m2)(this.content[i2].itraverse(pure15, apply3, f));
    return m2;
  };
  MapNode.prototype.any = function(predicate) {
    for (var i2 = 1; i2 < popCount(this.datamap) * 2; i2 = i2 + 2) {
      var v2 = this.content[i2];
      if (predicate(v2)) {
        return true;
      }
    }
    i2--;
    for (; i2 < this.content.length; i2++) {
      if (this.content[i2].any(predicate)) {
        return true;
      }
    }
    return false;
  };
  function Collision(keys3, values2) {
    this.keys = keys3;
    this.values = values2;
  }
  Collision.prototype.lookup = function collisionLookup(Nothing2, Just2, keyEquals, key, keyHash, shift) {
    for (var i2 = 0; i2 < this.keys.length; i2++)
      if (keyEquals(key)(this.keys[i2]))
        return Just2(this.values[i2]);
    return Nothing2;
  };
  Collision.prototype.insert = function collisionInsert(keyEquals, hashFunction, key, keyHash, value12, shift) {
    var i2 = 0;
    for (; i2 < this.keys.length; i2++)
      if (keyEquals(key)(this.keys[i2]))
        break;
    return new Collision(
      copyAndOverwriteOrExtend1(this.keys, i2, key),
      copyAndOverwriteOrExtend1(this.values, i2, value12)
    );
  };
  Collision.prototype.insertMut = function collisionInsertMut(keyEquals, hashFunction, key, keyHash, value12, shift) {
    var i2 = 0;
    for (; i2 < this.keys.length; i2++)
      if (keyEquals(key)(this.keys[i2]))
        break;
    this.keys[i2] = key;
    this.values[i2] = value12;
  };
  Collision.prototype.insertWith = function collisionInsert2(keyEquals, hashFunction, f, key, keyHash, value12, shift) {
    var i2 = 0;
    for (; i2 < this.keys.length; i2++)
      if (keyEquals(key)(this.keys[i2]))
        return new Collision(
          copyAndOverwriteOrExtend1(this.keys, i2, key),
          copyAndOverwriteOrExtend1(this.values, i2, f(this.values[i2])(value12))
        );
    return new Collision(
      copyAndOverwriteOrExtend1(this.keys, i2, key),
      copyAndOverwriteOrExtend1(this.values, i2, value12)
    );
  };
  Collision.prototype.delet = function collisionDelete(keyEquals, key, keyHash, shift) {
    var i2 = 0;
    for (; i2 < this.keys.length; i2++)
      if (keyEquals(key)(this.keys[i2]))
        break;
    if (i2 === this.keys.length) return this;
    if (this.keys.length === 2)
      return new MapNode(1 << (keyHash & 31), 0, [this.keys[1 - i2], this.values[1 - i2]]);
    return new Collision(remove1(this.keys, i2), remove1(this.values, i2));
  };
  Collision.prototype.toArrayBy = function(f, res) {
    for (var i2 = 0; i2 < this.keys.length; i2++)
      res.push(f(this.keys[i2])(this.values[i2]));
  };
  Collision.prototype.isSingleton = function() {
    return false;
  };
  Collision.prototype.eq = function(kf, vf, that) {
    if (this.constructor !== that.constructor || this.keys.length !== that.keys.length) return false;
    outer:
      for (var i2 = 0; i2 < this.keys.length; i2++) {
        for (var j = 0; j < that.keys.length; j++) {
          if (kf(this.keys[i2])(that.keys[j])) {
            if (vf(this.values[i2])(that.values[j]))
              continue outer;
            else
              return false;
          }
        }
      }
    return true;
  };
  Collision.prototype.hash = function(vhash) {
    var h7 = 0;
    for (var i2 = 0; i2 < this.values.length; i2++)
      h7 += vhash(this.values[i2]);
    return h7;
  };
  Collision.prototype.size = function() {
    return this.keys.length;
  };
  Collision.prototype.imap = function(f) {
    var newValues = this.values.slice();
    for (var i2 = 0; i2 < this.values.length; i2++)
      newValues[i2] = f(this.keys[i2])(this.values[i2]);
    return new Collision(this.keys, newValues);
  };
  Collision.prototype.ifoldMap = function(m2, mappend, f) {
    for (var i2 = 0; i2 < this.keys.length; i2++)
      m2 = mappend(m2)(f(this.keys[i2])(this.values[i2]));
    return m2;
  };
  Collision.prototype.travHelper = function() {
    function go2(i2, m2, copy2) {
      if (i2 < m2)
        return function(v2) {
          return go2(i2 + 1, m2, function() {
            var res = copy2();
            res.values[i2] = v2;
            return res;
          });
        };
      return copy2();
    }
    var self = this;
    return go2(0, this.keys.length, function() {
      return new Collision(self.keys, self.values.slice());
    });
  };
  Collision.prototype.itraverse = function(pure15, apply3, f) {
    var m2 = pure15(this.travHelper());
    for (var i2 = 0; i2 < this.keys.length; i2++)
      m2 = apply3(m2)(f(this.keys[i2])(this.values[i2]));
    return m2;
  };
  Collision.prototype.unionWith = function(eq3, hash5, f, that, shift) {
    if (that.constructor !== Collision)
      throw "Trying to union a Collision with something else";
    var keys3 = [];
    var values2 = [];
    var added = Array(that.keys.length).fill(false);
    outer:
      for (var i2 = 0; i2 < this.keys.length; i2++) {
        for (var j = 0; j < that.keys.length; j++) {
          if (eq3(this.keys[i2])(that.keys[j])) {
            keys3.push(this.keys[i2]);
            values2.push(f(this.values[i2])(that.values[j]));
            added[j] = true;
            continue outer;
          }
        }
        keys3.push(this.keys[i2]);
        values2.push(this.values[i2]);
        added[j] = true;
      }
    for (var k = 0; k < that.keys.length; k++) {
      if (!added[k]) {
        keys3.push(that.keys[k]);
        values2.push(that.values[k]);
      }
    }
    return new Collision(keys3, values2);
  };
  Collision.prototype.intersectionWith = function(Nothing2, Just2, eq3, hash5, f, that, shift) {
    if (that.constructor !== Collision)
      throw "Trying to intersect a Collision with something else";
    var keys3 = [];
    var values2 = [];
    outer:
      for (var i2 = 0; i2 < this.keys.length; i2++) {
        for (var j = 0; j < that.keys.length; j++) {
          if (eq3(this.keys[i2])(that.keys[j])) {
            keys3.push(this.keys[i2]);
            values2.push(f(this.values[i2])(that.values[j]));
            continue outer;
          }
        }
      }
    if (keys3.length === 0)
      return empty7;
    if (keys3.length === 1)
      return new MapNode(1, 0, [keys3[0], values2[0]]);
    return new Collision(keys3, values2);
  };
  Collision.prototype.filterWithKey = function collisionFilterWithKey(f) {
    var keys3 = [];
    var values2 = [];
    for (var i2 = 0; i2 < this.keys.length; i2++) {
      var k = this.keys[i2];
      var v2 = this.values[i2];
      if (f(k)(v2)) {
        keys3.push(k);
        values2.push(v2);
      }
    }
    if (keys3.length === 0) return empty7;
    if (keys3.length === 1) return new MapNode(1, 0, [keys3[0], values2[0]]);
    return new Collision(keys3, values2);
  };
  Collision.prototype.any = function(predicate) {
    for (var i2 = 0; i2 < this.keys.length; i2++) {
      if (predicate(this.values[i2])) {
        return true;
      }
    }
    return false;
  };
  function mask(keyHash, shift) {
    return 1 << (keyHash >>> shift & 31);
  }
  function index3(map30, bit) {
    return popCount(map30 & bit - 1);
  }
  function popCount(n) {
    n = n - (n >> 1 & 1431655765);
    n = (n & 858993459) + (n >> 2 & 858993459);
    return (n + (n >> 4) & 252645135) * 16843009 >> 24;
  }
  function binaryNode(k1, kh1, v1, k2, kh2, v2, s2) {
    if (s2 >= 32) return new Collision([k1, k2], [v1, v2]);
    var b1 = kh1 >>> s2 & 31;
    var b2 = kh2 >>> s2 & 31;
    if (b1 !== b2) return new MapNode(1 << b1 | 1 << b2, 0, b1 >>> 0 < b2 >>> 0 ? [k1, v1, k2, v2] : [k2, v2, k1, v1]);
    return new MapNode(0, 1 << b1, [binaryNode(k1, kh1, v1, k2, kh2, v2, s2 + 5)]);
  }
  function overwriteTwoElements(a3, index4, v1, v2) {
    var res = a3.slice();
    res[index4] = v1;
    res[index4 + 1] = v2;
    return res;
  }
  function remove2(a3, index4) {
    var res = a3.slice();
    res.splice(index4, 2);
    return res;
  }
  function remove1(a3, index4) {
    var res = a3.slice();
    res.splice(index4, 1);
    return res;
  }
  function copyAndOverwriteOrExtend1(a3, index4, v2) {
    var res = a3.slice();
    res[index4] = v2;
    return res;
  }
  function remove2insert1(a3, removeIndex, insertIndex, v1) {
    var res = new Array(a3.length - 1);
    for (var i2 = 0; i2 < removeIndex; i2++) res[i2] = a3[i2];
    for (; i2 < insertIndex; i2++) res[i2] = a3[i2 + 2];
    res[i2++] = v1;
    for (; i2 < res.length; i2++) res[i2] = a3[i2 + 1];
    return res;
  }
  function insert22(a3, index4, v1, v2) {
    var res = new Array(a3.length + 2);
    for (var i2 = 0; i2 < index4; i2++) res[i2] = a3[i2];
    res[i2++] = v1;
    res[i2++] = v2;
    for (; i2 < res.length; i2++) res[i2] = a3[i2 - 2];
    return res;
  }
  function insert2remove1(a3, insertIndex, v1, v2, removeIndex) {
    var res = new Array(a3.length + 1);
    for (var i2 = 0; i2 < insertIndex; i2++) res[i2] = a3[i2];
    res[i2++] = v1;
    res[i2++] = v2;
    for (; i2 < removeIndex + 2; i2++) res[i2] = a3[i2 - 2];
    for (; i2 < res.length; i2++) res[i2] = a3[i2 - 1];
    return res;
  }
  var empty7 = new MapNode(0, 0, []);
  function lookupPurs(Nothing2, Just2, keyEquals, key, keyHash) {
    return function(m2) {
      return m2.lookup(Nothing2, Just2, keyEquals, key, keyHash, 0);
    };
  }
  function fromArrayPurs(keyEquals, hashFunction) {
    return function(kf) {
      return function(vf) {
        return function(a3) {
          var m2 = new MapNode(0, 0, []);
          for (var i2 = 0; i2 < a3.length; i2++) {
            var x = a3[i2];
            var k = kf(x);
            m2.insertMut(keyEquals, hashFunction, k, hashFunction(k), vf(x), 0);
          }
          return m2;
        };
      };
    };
  }
  function insertPurs(keyEquals, hashFunction) {
    return function(key) {
      return function(value12) {
        return function(m2) {
          return m2.insert(keyEquals, hashFunction, key, hashFunction(key), value12, 0);
        };
      };
    };
  }
  function deletePurs(keyEquals, key, keyHash) {
    return function(m2) {
      return m2.delet(keyEquals, key, keyHash, 0);
    };
  }
  function intersectionWithPurs(Nothing2, Just2, eq3, hash5, f) {
    return function(l2) {
      return function(r) {
        return l2.intersectionWith(Nothing2, Just2, eq3, hash5, f, r, 0);
      };
    };
  }
  function toArrayBy(f) {
    return function(m2) {
      var res = [];
      m2.toArrayBy(f, res);
      return res;
    };
  }
  function isEmpty(m2) {
    return m2.datamap === 0 && m2.nodemap === 0;
  }
  function size4(m2) {
    return m2.size();
  }
  function mapWithIndexPurs(f) {
    return function(m2) {
      return m2.imap(f);
    };
  }
  function foldMapWithIndexPurs(mempty2) {
    return function(mappend) {
      return function(f) {
        return function(m2) {
          return m2.ifoldMap(mempty2, mappend, f);
        };
      };
    };
  }

  // output/Data.Hashable/foreign.js
  function hashString(s2) {
    var h7 = 0;
    for (var i2 = 0; i2 < s2.length; i2++) {
      h7 = 31 * h7 + s2.charCodeAt(i2) | 0;
    }
    return h7;
  }

  // output/Record.Unsafe.Union/foreign.js
  function unsafeUnionFn(r1, r2) {
    var copy2 = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy2[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy2[k2] = r1[k2];
      }
    }
    return copy2;
  }

  // output/Record/index.js
  var set = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l2) {
          return function(b2) {
            return function(r) {
              return unsafeSet(reflectSymbol2(l2))(b2)(r);
            };
          };
        };
      };
    };
  };
  var merge = function() {
    return function() {
      return function(l2) {
        return function(r) {
          return unsafeUnionFn(l2, r);
        };
      };
    };
  };
  var get2 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function(l2) {
        return function(r) {
          return unsafeGet(reflectSymbol2(l2))(r);
        };
      };
    };
  };
  var modify5 = function(dictIsSymbol) {
    var set1 = set(dictIsSymbol)()();
    var get1 = get2(dictIsSymbol)();
    return function() {
      return function() {
        return function(l2) {
          return function(f) {
            return function(r) {
              return set1(l2)(f(get1(l2)(r)))(r);
            };
          };
        };
      };
    };
  };

  // output/Data.Hashable/index.js
  var hashableString = {
    hash: hashString,
    Eq0: function() {
      return eqString;
    }
  };
  var hashableInt = {
    hash: function(n) {
      return n;
    },
    Eq0: function() {
      return eqInt;
    }
  };
  var hash2 = function(dict) {
    return dict.hash;
  };
  var hashFoldable = function(dictFoldable) {
    var foldl2 = foldl(dictFoldable);
    return function(dictHashable) {
      var hash12 = hash2(dictHashable);
      return foldl2(function(h7) {
        return function(a3) {
          return (31 * h7 | 0) + hash12(a3) | 0;
        };
      })(1);
    };
  };
  var hashFoldable1 = /* @__PURE__ */ hashFoldable(foldableArray);
  var hashableArray = function(dictHashable) {
    var eqArray2 = eqArray(dictHashable.Eq0());
    return {
      hash: hashFoldable1(dictHashable),
      Eq0: function() {
        return eqArray2;
      }
    };
  };

  // output/Data.HashMap/index.js
  var bind5 = /* @__PURE__ */ bind(bindMaybe);
  var values = /* @__PURE__ */ toArrayBy(function(v2) {
    return function(v1) {
      return v1;
    };
  });
  var lookup8 = function(dictHashable) {
    var eq3 = eq(dictHashable.Eq0());
    var hash5 = hash2(dictHashable);
    return function(k) {
      return lookupPurs(Nothing.value, Just.create, eq3, k, hash5(k));
    };
  };
  var keys2 = /* @__PURE__ */ toArrayBy($$const);
  var intersectionWith = function(dictHashable) {
    var eq3 = eq(dictHashable.Eq0());
    var hash5 = hash2(dictHashable);
    return function(f) {
      return intersectionWithPurs(Nothing.value, Just.create, eq3, hash5, f);
    };
  };
  var insert6 = function(dictHashable) {
    return insertPurs(eq(dictHashable.Eq0()), hash2(dictHashable));
  };
  var functorWithIndexHashMap = {
    mapWithIndex: mapWithIndexPurs,
    Functor0: function() {
      return functorHashMap;
    }
  };
  var functorHashMap = {
    map: function(f) {
      return mapWithIndex(functorWithIndexHashMap)($$const(f));
    }
  };
  var fromArrayBy = function(dictHashable) {
    return fromArrayPurs(eq(dictHashable.Eq0()), hash2(dictHashable));
  };
  var fromArray = function(dictHashable) {
    return fromArrayBy(dictHashable)(fst)(snd);
  };
  var foldableWithIndexHashMap = {
    foldMapWithIndex: function(dictMonoid) {
      return foldMapWithIndexPurs(mempty(dictMonoid))(append(dictMonoid.Semigroup0()));
    },
    foldrWithIndex: function(f) {
      return foldrWithIndexDefault(foldableWithIndexHashMap)(f);
    },
    foldlWithIndex: function(f) {
      return foldlWithIndexDefault(foldableWithIndexHashMap)(f);
    },
    Foldable0: function() {
      return foldableHashMap;
    }
  };
  var foldableHashMap = {
    foldMap: function(dictMonoid) {
      return function(f) {
        return foldMapWithIndex(foldableWithIndexHashMap)(dictMonoid)($$const(f));
      };
    },
    foldr: function(f) {
      return foldrDefault(foldableHashMap)(f);
    },
    foldl: function(f) {
      return foldlDefault(foldableHashMap)(f);
    }
  };
  var $$delete3 = function(dictHashable) {
    var eq3 = eq(dictHashable.Eq0());
    var hash5 = hash2(dictHashable);
    return function(k) {
      return deletePurs(eq3, k, hash5(k));
    };
  };
  var alter3 = function(dictHashable) {
    var lookup14 = lookup8(dictHashable);
    var delete1 = $$delete3(dictHashable);
    var insert13 = insert6(dictHashable);
    return function(f) {
      return function(k) {
        return function(m2) {
          var v2 = f(lookup14(k)(m2));
          if (v2 instanceof Nothing) {
            return delete1(k)(m2);
          }
          ;
          if (v2 instanceof Just) {
            return insert13(k)(v2.value0)(m2);
          }
          ;
          throw new Error("Failed pattern match at Data.HashMap (line 313, column 15 - line 315, column 25): " + [v2.constructor.name]);
        };
      };
    };
  };
  var update = function(dictHashable) {
    var alter1 = alter3(dictHashable);
    return function(f) {
      return alter1(function(v2) {
        return bind5(v2)(f);
      });
    };
  };

  // output/Halogen.Svg.Attributes.Color/index.js
  var show2 = /* @__PURE__ */ show(showInt);
  var show1 = /* @__PURE__ */ show(showNumber);
  var RGB = /* @__PURE__ */ function() {
    function RGB2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    RGB2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new RGB2(value0, value1, value22);
        };
      };
    };
    return RGB2;
  }();
  var RGBA = /* @__PURE__ */ function() {
    function RGBA2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    RGBA2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new RGBA2(value0, value1, value22, value32);
          };
        };
      };
    };
    return RGBA2;
  }();
  var Named = /* @__PURE__ */ function() {
    function Named2(value0) {
      this.value0 = value0;
    }
    ;
    Named2.create = function(value0) {
      return new Named2(value0);
    };
    return Named2;
  }();
  var NoColor = /* @__PURE__ */ function() {
    function NoColor2() {
    }
    ;
    NoColor2.value = new NoColor2();
    return NoColor2;
  }();
  var printColor = function(v2) {
    if (v2 instanceof RGB) {
      return "rgb(" + (show2(v2.value0) + ("," + (show2(v2.value1) + ("," + (show2(v2.value2) + ")")))));
    }
    ;
    if (v2 instanceof RGBA) {
      return "rgba(" + (show2(v2.value0) + ("," + (show2(v2.value1) + ("," + (show2(v2.value2) + ("," + (show1(v2.value3) + ")")))))));
    }
    ;
    if (v2 instanceof Named) {
      return v2.value0;
    }
    ;
    if (v2 instanceof NoColor) {
      return "None";
    }
    ;
    throw new Error("Failed pattern match at Halogen.Svg.Attributes.Color (line 24, column 14 - line 28, column 20): " + [v2.constructor.name]);
  };

  // output/Halogen.Svg.Attributes.Orient/index.js
  var AutoOrient = /* @__PURE__ */ function() {
    function AutoOrient2() {
    }
    ;
    AutoOrient2.value = new AutoOrient2();
    return AutoOrient2;
  }();
  var AutoStartReverse = /* @__PURE__ */ function() {
    function AutoStartReverse2() {
    }
    ;
    AutoStartReverse2.value = new AutoStartReverse2();
    return AutoStartReverse2;
  }();
  var printOrient = function(v2) {
    if (v2 instanceof AutoOrient) {
      return "auto";
    }
    ;
    if (v2 instanceof AutoStartReverse) {
      return "auto-start-reverse";
    }
    ;
    throw new Error("Failed pattern match at Halogen.Svg.Attributes.Orient (line 20, column 15 - line 22, column 43): " + [v2.constructor.name]);
  };

  // output/Halogen.Svg.Attributes.Path/index.js
  var show3 = /* @__PURE__ */ show(showNumber);
  var Rel = /* @__PURE__ */ function() {
    function Rel2() {
    }
    ;
    Rel2.value = new Rel2();
    return Rel2;
  }();
  var Abs = /* @__PURE__ */ function() {
    function Abs2() {
    }
    ;
    Abs2.value = new Abs2();
    return Abs2;
  }();
  var z = "z";
  var toArrayString = /* @__PURE__ */ coerce();
  var renderCommand = function(cmd) {
    return function(s_) {
      if (cmd instanceof Rel) {
        return s_;
      }
      ;
      if (cmd instanceof Abs) {
        return toUpper(s_);
      }
      ;
      throw new Error("Failed pattern match at Halogen.Svg.Attributes.Path (line 81, column 24 - line 83, column 20): " + [cmd.constructor.name]);
    };
  };
  var renderCommand2Args = function(s_) {
    return function(ref3) {
      return function(a_2) {
        return function(b2) {
          return renderCommand(ref3)(s_) + (show3(a_2) + (", " + show3(b2)));
        };
      };
    };
  };
  var m = /* @__PURE__ */ renderCommand2Args("m");
  var l = /* @__PURE__ */ renderCommand2Args("l");

  // output/Halogen.Svg.Attributes/index.js
  var show4 = /* @__PURE__ */ show(showNumber);
  var y2 = /* @__PURE__ */ function() {
    var $22 = attr2("y2");
    return function($23) {
      return $22(show4($23));
    };
  }();
  var y1 = /* @__PURE__ */ function() {
    var $24 = attr2("y1");
    return function($25) {
      return $24(show4($25));
    };
  }();
  var x2 = /* @__PURE__ */ function() {
    var $28 = attr2("x2");
    return function($29) {
      return $28(show4($29));
    };
  }();
  var x1 = /* @__PURE__ */ function() {
    var $30 = attr2("x1");
    return function($31) {
      return $30(show4($31));
    };
  }();
  var strokeWidth = /* @__PURE__ */ function() {
    var $42 = attr2("stroke-width");
    return function($43) {
      return $42(show4($43));
    };
  }();
  var stroke = /* @__PURE__ */ function() {
    var $55 = attr2("stroke");
    return function($56) {
      return $55(printColor($56));
    };
  }();
  var refY = /* @__PURE__ */ function() {
    var $61 = attr2("refY");
    return function($62) {
      return $61(show4($62));
    };
  }();
  var refX = /* @__PURE__ */ function() {
    var $63 = attr2("refX");
    return function($64) {
      return $63(show4($64));
    };
  }();
  var orient = /* @__PURE__ */ function() {
    var $80 = attr2("orient");
    return function($81) {
      return $80(printOrient($81));
    };
  }();
  var markerWidth = /* @__PURE__ */ function() {
    var $86 = attr2("markerWidth");
    return function($87) {
      return $86(show4($87));
    };
  }();
  var markerHeight = /* @__PURE__ */ function() {
    var $90 = attr2("markerHeight");
    return function($91) {
      return $90(show4($91));
    };
  }();
  var id3 = /* @__PURE__ */ attr2("id");
  var fill = /* @__PURE__ */ function() {
    var $108 = attr2("fill");
    return function($109) {
      return $108(printColor($109));
    };
  }();
  var d = /* @__PURE__ */ function() {
    var $114 = attr2("d");
    var $115 = joinWith(" ");
    return function($116) {
      return $114($115(toArrayString($116)));
    };
  }();

  // output/Halogen.Svg.Elements/index.js
  var element3 = /* @__PURE__ */ elementNS("http://www.w3.org/2000/svg");
  var line = function(props) {
    return element3("line")(props)([]);
  };
  var marker = /* @__PURE__ */ element3("marker");
  var path = function(props) {
    return element3("path")(props)([]);
  };
  var svg = /* @__PURE__ */ element3("svg");
  var defs = /* @__PURE__ */ element3("defs");

  // output/Web.DOM.MutationObserver/foreign.js
  function mutationObserver(cb) {
    return function() {
      return new MutationObserver(function(mr, mo) {
        return cb(mr)(mo)();
      });
    };
  }
  function _observe(node) {
    return function(config) {
      return function(mo) {
        return function() {
          return mo.observe(node, config);
        };
      };
    };
  }

  // output/Web.DOM.MutationObserver/index.js
  var observe = function() {
    return _observe;
  };

  // output/Web.ResizeObserver/foreign.js
  function _resizeObserver(callback) {
    return new ResizeObserver(callback);
  }
  function _observe2(element4, options2, observer) {
    observer.observe(element4, options2);
  }

  // output/Web.ResizeObserver/index.js
  var modify6 = /* @__PURE__ */ modify5({
    reflectSymbol: function() {
      return "box";
    }
  })()();
  var merge2 = /* @__PURE__ */ merge()();
  var apply2 = /* @__PURE__ */ apply(/* @__PURE__ */ applyExceptT(monadIdentity));
  var map19 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var bind6 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadIdentity));
  var readProp2 = /* @__PURE__ */ readProp(monadIdentity);
  var readNumber2 = /* @__PURE__ */ readNumber(monadIdentity);
  var alt5 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var readArray2 = /* @__PURE__ */ readArray(monadIdentity);
  var applicativeExceptT2 = /* @__PURE__ */ applicativeExceptT(monadIdentity);
  var traverse2 = /* @__PURE__ */ traverse(traversableArray)(applicativeExceptT2);
  var pure10 = /* @__PURE__ */ pure(applicativeExceptT2);
  var BorderBox = /* @__PURE__ */ function() {
    function BorderBox2() {
    }
    ;
    BorderBox2.value = new BorderBox2();
    return BorderBox2;
  }();
  var ContentBox = /* @__PURE__ */ function() {
    function ContentBox2() {
    }
    ;
    ContentBox2.value = new ContentBox2();
    return ContentBox2;
  }();
  var DevicePixelContentBox = /* @__PURE__ */ function() {
    function DevicePixelContentBox2() {
    }
    ;
    DevicePixelContentBox2.value = new DevicePixelContentBox2();
    return DevicePixelContentBox2;
  }();
  var printBoxOption = function(v2) {
    if (v2 instanceof BorderBox) {
      return "border-box";
    }
    ;
    if (v2 instanceof ContentBox) {
      return "content-box";
    }
    ;
    if (v2 instanceof DevicePixelContentBox) {
      return "device-pixel-content-box";
    }
    ;
    throw new Error("Failed pattern match at Web.ResizeObserver (line 44, column 18 - line 47, column 54): " + [v2.constructor.name]);
  };
  var observe2 = function() {
    return function() {
      return function(element4) {
        var $26 = runEffectFn3(_observe2)(element4);
        var $27 = modify6($$Proxy.value)(printBoxOption);
        var $28 = flip(merge2)({
          box: ContentBox.value
        });
        return function($29) {
          return $26($27($28($29)));
        };
      };
    };
  };
  var normalizeEntry = function(entry) {
    var readBoxSize = function(boxSize) {
      return apply2(map19(function(blockSize) {
        return function(inlineSize) {
          return {
            blockSize,
            inlineSize
          };
        };
      })(bind6(readProp2("blockSize")(boxSize))(readNumber2)))(bind6(readProp2("inlineSize")(boxSize))(readNumber2));
    };
    var normalizeBoxSize = function(boxSize) {
      return fromRight([])(runExcept(alt5(bind6(readArray2(boxSize))(traverse2(readBoxSize)))(alt5(map19(singleton4)(readBoxSize(boxSize)))(pure10([])))));
    };
    return {
      target: entry.target,
      contentRect: entry.contentRect,
      borderBoxSize: normalizeBoxSize(entry.borderBoxSize),
      contentBoxSize: normalizeBoxSize(entry.contentBoxSize),
      devicePixelContentBoxSize: normalizeBoxSize(entry.devicePixelContentBoxSize)
    };
  };
  var cmapEffectFn2Arg0 = function(f) {
    return function(effFn) {
      return function(a3, b2) {
        return effFn(f(a3), b2);
      };
    };
  };
  var resizeObserver = /* @__PURE__ */ function() {
    var $30 = runEffectFn1(_resizeObserver);
    var $31 = cmapEffectFn2Arg0(map(functorArray)(normalizeEntry));
    return function($32) {
      return $30($31(mkEffectFn2($32)));
    };
  }();

  // output/Lib.Arrow/index.js
  var discard5 = /* @__PURE__ */ discard(discardUnit);
  var bind7 = /* @__PURE__ */ bind(bindHalogenM);
  var discard23 = /* @__PURE__ */ discard5(bindHalogenM);
  var observe3 = /* @__PURE__ */ observe();
  var observe1 = /* @__PURE__ */ observe2()();
  var logShow2 = /* @__PURE__ */ logShow(showString);
  var map20 = /* @__PURE__ */ map(functorArray);
  var append5 = /* @__PURE__ */ append(semigroupArray);
  var printResize = function(event) {
    return function(listener) {
      return function(records) {
        return function(observer) {
          return function __do2() {
            notify(listener)(event)();
            return unit;
          };
        };
      };
    };
  };
  var printMut = function(event) {
    return function(listener) {
      return function(records) {
        return function(observer) {
          return function __do2() {
            notify(listener)(event)();
            return unit;
          };
        };
      };
    };
  };
  var initObserver = function(dictMonadEffect) {
    var liftEffect7 = liftEffect(monadEffectHalogenM(dictMonadEffect));
    return function(event) {
      return function(listener) {
        return bind7(getRef("BenefitsContainer"))(function(rootL) {
          if (rootL instanceof Just) {
            var node = toNode2(rootL.value0);
            return bind7(liftEffect7(mutationObserver(printMut(event)(listener))))(function(mObserver) {
              return bind7(liftEffect7(resizeObserver(printResize(event)(listener))))(function(rObserver) {
                return discard23(liftEffect7(observe3(node)({
                  attributes: true,
                  childList: true,
                  subtree: true
                })(mObserver)))(function() {
                  return liftEffect7(observe1(rootL.value0)({
                    box: BorderBox.value
                  })(rObserver));
                });
              });
            });
          }
          ;
          if (rootL instanceof Nothing) {
            return liftEffect7(logShow2("no root"));
          }
          ;
          throw new Error("Failed pattern match at Lib.Arrow (line 126, column 3 - line 134, column 37): " + [rootL.constructor.name]);
        });
      };
    };
  };
  var fromToForRounded = function(origin2) {
    return function(from2) {
      return function(to) {
        var tCY = to.y + to.height / 2;
        var tCX = to.x + to.width / 2;
        var r2 = to.width / 2;
        var r1 = from2.width / 2;
        var fCY = from2.y + from2.height / 2;
        var fCX = from2.x + from2.width / 2;
        var dy = to.y - from2.y;
        var dx = to.x - from2.x;
        var dL = sqrt(dx * dx + dy * dy);
        var x12 = dx / dL * r1 + fCX + origin2.value0;
        var x22 = -(dx / dL) * r2 + tCX + origin2.value0;
        var y12 = dy / dL * r1 + fCY + origin2.value1;
        var y22 = -(dy / dL) * r2 + tCY + origin2.value1;
        return new Tuple(x12, new Tuple(y12, new Tuple(x22, y22)));
      };
    };
  };
  var arrowHead = /* @__PURE__ */ function() {
    var p2 = [m(Abs.value)(0)(0), l(Abs.value)(10)(5), l(Abs.value)(0)(10), z];
    return marker([id3("arrowhead"), refX(5), refY(5), markerWidth(600), markerHeight(600), orient(AutoStartReverse.value)])([path([d(p2), fill(new Named("black"))])]);
  }();
  var arrows = function(rawArrows) {
    var elems = map20(function(v2) {
      return line([x1(v2.value0), y1(v2.value1.value0), x2(v2.value1.value1.value0), y2(v2.value1.value1.value1), stroke(new Named("black")), strokeWidth(3)]);
    })(rawArrows);
    var defs2 = defs([])([arrowHead]);
    return svg([id2("arrows")])(append5([defs2])(elems));
  };

  // output/Data.HashSet/index.js
  var identity10 = /* @__PURE__ */ identity(categoryFn);
  var HashSet = function(x) {
    return x;
  };
  var isEmpty2 = function(v2) {
    return isEmpty(v2);
  };
  var intersection = function(dictHashable) {
    var intersectionWith2 = intersectionWith(dictHashable);
    return function(v2) {
      return function(v1) {
        return intersectionWith2($$const)(v2)(v1);
      };
    };
  };
  var insert7 = function(dictHashable) {
    var insert13 = insert6(dictHashable);
    return function(a3) {
      return function(v2) {
        return insert13(a3)(unit)(v2);
      };
    };
  };
  var fromArray2 = function(dictHashable) {
    var $105 = fromArrayBy(dictHashable)(identity10)($$const(unit));
    return function($106) {
      return HashSet($105($106));
    };
  };
  var empty8 = empty7;
  var $$delete4 = function(dictHashable) {
    var delete1 = $$delete3(dictHashable);
    return function(a3) {
      return function(v2) {
        return delete1(a3)(v2);
      };
    };
  };

  // output/Lib.Benefit.Types/index.js
  var show5 = /* @__PURE__ */ show(showInt);
  var hash3 = /* @__PURE__ */ hash2(/* @__PURE__ */ hashableArray(hashableInt));
  var hash1 = /* @__PURE__ */ hash2(hashableString);
  var Pos = /* @__PURE__ */ function() {
    function Pos2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Pos2.create = function(value0) {
      return function(value1) {
        return new Pos2(value0, value1);
      };
    };
    return Pos2;
  }();
  var Always = /* @__PURE__ */ function() {
    function Always2() {
    }
    ;
    Always2.value = new Always2();
    return Always2;
  }();
  var ForTags = /* @__PURE__ */ function() {
    function ForTags2(value0) {
      this.value0 = value0;
    }
    ;
    ForTags2.create = function(value0) {
      return new ForTags2(value0);
    };
    return ForTags2;
  }();
  var ForPrice = /* @__PURE__ */ function() {
    function ForPrice2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ForPrice2.create = function(value0) {
      return function(value1) {
        return new ForPrice2(value0, value1);
      };
    };
    return ForPrice2;
  }();
  var ForBill = /* @__PURE__ */ function() {
    function ForBill2(value0) {
      this.value0 = value0;
    }
    ;
    ForBill2.create = function(value0) {
      return new ForBill2(value0);
    };
    return ForBill2;
  }();
  var ForProduct = /* @__PURE__ */ function() {
    function ForProduct2(value0) {
      this.value0 = value0;
    }
    ;
    ForProduct2.create = function(value0) {
      return new ForProduct2(value0);
    };
    return ForProduct2;
  }();
  var showSkillPos = {
    show: function(v2) {
      return "(" + (show5(v2.value0) + ("," + (show5(v2.value1) + ")")));
    }
  };
  var eqSkillPos = {
    eq: function(v2) {
      return function(v1) {
        return v2.value0 === v1.value0 && v2.value1 === v1.value1;
      };
    }
  };
  var hashableSkillPos = {
    hash: function(v2) {
      return hash3([v2.value0, v2.value1]);
    },
    Eq0: function() {
      return eqSkillPos;
    }
  };
  var showSkillName = {
    show: function(v2) {
      return v2;
    }
  };
  var eqSkillName = {
    eq: function(v2) {
      return function(v1) {
        return v2 === v1;
      };
    }
  };
  var hashSkillName = {
    hash: function(v2) {
      return hash1(v2);
    },
    Eq0: function() {
      return eqSkillName;
    }
  };

  // output/Lib.Classes/index.js
  var map21 = /* @__PURE__ */ map(functorArray);
  var cl = ClassName;
  var cls = function(c2) {
    return classes(map21(cl)(c2));
  };
  var base2 = "base";

  // output/Lib.Product.Types/index.js
  var hash4 = /* @__PURE__ */ hash2(hashableString);
  var Tag = function(x) {
    return x;
  };
  var eqTag = {
    eq: function(v2) {
      return function(v1) {
        return v2 === v1;
      };
    }
  };
  var hashTag = {
    hash: function(v2) {
      return hash4(v2);
    },
    Eq0: function() {
      return eqTag;
    }
  };

  // output/Lib.Benefit.Skill/index.js
  var map23 = /* @__PURE__ */ map(functorArray);
  var bind8 = /* @__PURE__ */ bind(bindMaybe);
  var lookup9 = /* @__PURE__ */ lookup8(hashSkillName);
  var lookup13 = /* @__PURE__ */ lookup8(hashableSkillPos);
  var show6 = /* @__PURE__ */ show(showInt);
  var map110 = /* @__PURE__ */ map(functorMaybe);
  var insert8 = /* @__PURE__ */ insert6(hashableSkillPos);
  var fromArrayBy2 = /* @__PURE__ */ fromArrayBy(hashableSkillPos);
  var fromArrayBy1 = /* @__PURE__ */ fromArrayBy(hashSkillName);
  var intersection2 = /* @__PURE__ */ intersection(hashTag);
  var maximumBy2 = /* @__PURE__ */ maximumBy(foldableArray);
  var compare2 = /* @__PURE__ */ compare(ordNumber);
  var map24 = /* @__PURE__ */ map(functorHashMap);
  var sum2 = /* @__PURE__ */ sum(foldableHashMap)(semiringInt);
  var tgs = /* @__PURE__ */ function() {
    var $89 = fromArray2(hashTag);
    var $90 = map23(Tag);
    return function($91) {
      return ForProduct.create(ForTags.create($89($90($91))));
    };
  }();
  var skill5 = {
    name: "\u0421\u043B\u0430\u0434\u043A\u0430\u044F \u0436\u0438\u0437\u043D\u044C",
    icon: "assets/icons/dessert.svg",
    benefit: {
      condition: /* @__PURE__ */ tgs(["Milky"]),
      power: 0.15
    },
    description: "\u043D\u0430 \u0434\u0435\u0441\u0435\u0440\u0442\u044B",
    fancyText: "\u041B\u0443\u0447\u0448\u0435 \u0447\u0430\u0448\u043A\u0438 \u043A\u043E\u0444\u0435 \u043C\u043E\u0436\u0435\u0442 \u0431\u044B\u0442\u044C \u0442\u043E\u043B\u044C\u043A\u043E \u0447\u0430\u0448\u043A\u0430 \u043A\u043E\u0444\u0435 \u0441 \u043F\u0438\u0440\u043E\u0433\u043E\u043C",
    requirements: ["\u0422\u0435\u043C\u043D\u044B\u0439 \u043C\u0430\u0433"],
    acquired: false,
    available: false
  };
  var skill4 = {
    name: "\u0417\u0435\u0440\u043D\u043E \u0438\u0441\u0442\u0438\u043D\u044B",
    icon: "assets/icons/beans.svg",
    benefit: {
      condition: /* @__PURE__ */ tgs(["Beans"]),
      power: 0.1
    },
    description: "\u043D\u0430 \u043A\u043E\u0444\u0435 \u0432 \u0437\u0435\u0440\u043D\u0430\u0445",
    fancyText: "\u041A\u043E\u0444\u0435 \u0432 \u0437\u0435\u0440\u043D\u0430\u0445 \u2014 \u044D\u0442\u043E \u043D\u0435 \u043F\u0440\u043E\u0441\u0442\u043E \u043D\u0430\u043F\u0438\u0442\u043E\u043A, \u044D\u0442\u043E \u0446\u0435\u043B\u0430\u044F \u0444\u0438\u043B\u043E\u0441\u043E\u0444\u0438\u044F",
    requirements: ["\u0422\u0435\u043C\u043D\u044B\u0439 \u043C\u0430\u0433"],
    acquired: false,
    available: false
  };
  var skill3 = {
    name: "\u0422\u0435\u043C\u043D\u044B\u0439 \u043C\u0430\u0433",
    icon: "assets/icons/black_coffee.svg",
    benefit: {
      condition: /* @__PURE__ */ tgs(["Black"]),
      power: 0.05
    },
    description: "\u043D\u0430 \u0444\u0438\u043B\u044C\u0442\u0440-\u043A\u043E\u0444\u0435",
    fancyText: "\u0427\u0435\u0440\u043D\u044B\u0439-\u0447\u0435\u0440\u043D\u044B\u0439 \u0447\u0435\u043B\u043E\u0432\u0435\u043A \u0432 \u0447\u0435\u0440\u043D\u043E\u0439-\u0447\u0435\u0440\u043D\u043E\u0439 \u043A\u043E\u043C\u043D\u0430\u0442\u0435 \u043F\u044C\u0435\u0442 \u0447\u0435\u0440\u043D\u044B\u0439-\u0447\u0435\u0440\u043D\u044B\u0439 \u043A\u043E\u0444\u0435",
    requirements: ["\u0414\u0435\u0431\u044E\u0442\u0430\u043D\u0442"],
    acquired: false,
    available: true
  };
  var skill2 = {
    name: "\u0410\u043B\u0445\u0438\u043C\u0438\u043A",
    icon: "assets/icons/milk_coffee.svg",
    benefit: {
      condition: /* @__PURE__ */ tgs(["Milky"]),
      power: 0.05
    },
    description: "\u043D\u0430 \u043A\u043E\u0444\u0435\u0439\u043D\u044B\u0435 \u043A\u043E\u043A\u0442\u0435\u0439\u043B\u0438",
    fancyText: "\u0412 \u0432\u0435\u0447\u043D\u043E\u043C \u043F\u043E\u0438\u0441\u043A\u0435 \u0438\u0434\u0435\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u0441\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u044F \u043A\u043E\u0444\u0435, \u0441\u0438\u0440\u043E\u043F\u0430 \u0438 \u043C\u043E\u043B\u043E\u043A\u0430",
    requirements: ["\u0414\u0435\u0431\u044E\u0442\u0430\u043D\u0442"],
    acquired: false,
    available: true
  };
  var skill1 = /* @__PURE__ */ function() {
    return {
      name: "\u0414\u0435\u0431\u044E\u0442\u0430\u043D\u0442",
      icon: "assets/icons/debutant.svg",
      benefit: {
        condition: new ForProduct(Always.value),
        power: 0.02
      },
      description: "\u043D\u0430 \u0432\u0441\u0451",
      fancyText: "\u041D\u0430\u0448\u0435 \u043F\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435 \u0442\u043E\u043B\u044C\u043A\u043E \u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F \u2014 \u043F\u043E\u0441\u0442\u0430\u0440\u0430\u0435\u043C\u0441\u044F \u0441\u0434\u0435\u043B\u0430\u0442\u044C \u0435\u0433\u043E \u044F\u0440\u043A\u0438\u043C \u0438 \u0431\u043E\u0434\u0440\u044F\u0449\u0438\u043C",
      requirements: [],
      acquired: true,
      available: true
    };
  }();
  var renderSkillFancyText = function(skill) {
    return p([cls(["skillFlavor"])])([text5(skill.fancyText)]);
  };
  var renderPercent = function(multiplyer) {
    var percent = round2(multiplyer * 100);
    return div2([cls(["percent"])])([text5(show6(percent) + "%")]);
  };
  var renderSkillDescription = function(skill) {
    return p([cls(["skillEffect"])])([text5("\u0421\u043A\u0438\u0434\u043A\u0430 "), renderPercent(skill.benefit.power), text5(" " + skill.description)]);
  };
  var renderSkillDescriptionShort = function(skill) {
    return p([cls(["skillEffect"])])([renderPercent(skill.benefit.power), text5(" " + skill.description)]);
  };
  var payBill = function(skillTree2) {
    return function(bill) {
      return {
        total: bill.total,
        discountAmount: 0,
        totalAfterDiscount: bill.total - 0 | 0
      };
    };
  };
  var learnSkill = function(pos) {
    return function(skillTree2) {
      var skillToLearn = lookup13(pos)(skillTree2.skills);
      var updatedSkill = map110(function(skill) {
        return {
          available: skill.available,
          benefit: skill.benefit,
          description: skill.description,
          fancyText: skill.fancyText,
          icon: skill.icon,
          name: skill.name,
          requirements: skill.requirements,
          acquired: true
        };
      })(skillToLearn);
      var newSkills = function() {
        if (updatedSkill instanceof Nothing) {
          return new Tuple(skillTree2, Nothing.value);
        }
        ;
        if (updatedSkill instanceof Just) {
          return new Tuple({
            links: skillTree2.links,
            shortCuts: skillTree2.shortCuts,
            skills: insert8(pos)(updatedSkill.value0)(skillTree2.skills)
          }, new Just(updatedSkill.value0));
        }
        ;
        throw new Error("Failed pattern match at Lib.Benefit.Skill (line 242, column 15 - line 244, column 92): " + [updatedSkill.constructor.name]);
      }();
      return newSkills;
    };
  };
  var getAvailableSkills = function(v2) {
    return filter(function(skill) {
      return skill.acquired;
    })(values(v2.skills));
  };
  var fromFlatSkillTree = function(flatSkillTree1) {
    var skills = fromArrayBy2(function(v2) {
      return v2.value0;
    })(function(v2) {
      return v2.value1;
    })(flatSkillTree1);
    var shortCuts = fromArrayBy1(function(v2) {
      return v2.value1.name;
    })(function(v2) {
      return v2.value0;
    })(flatSkillTree1);
    var makeLinkFromSkillNames = function(fromSkill) {
      return function(toSkill) {
        return bind8(lookup9(fromSkill)(shortCuts))(function(fromPos) {
          return bind8(lookup9(toSkill)(shortCuts))(function(toPos) {
            return new Just([new Tuple(fromPos, toPos)]);
          });
        });
      };
    };
    var makeLinksForSkill = function(skill) {
      return concatMap(fromMaybe([]))(map23(function(fromSkillName) {
        return makeLinkFromSkillNames(fromSkillName)(skill.name);
      })(skill.requirements));
    };
    var links = concat(map23(makeLinksForSkill)(values(skills)));
    return {
      skills,
      shortCuts,
      links
    };
  };
  var flatSkillTree = /* @__PURE__ */ function() {
    return [new Tuple(new Pos(1, 0), skill1), new Tuple(new Pos(0, 1), skill2), new Tuple(new Pos(2, 1), skill3), new Tuple(new Pos(1, 2), skill4), new Tuple(new Pos(3, 2), skill5)];
  }();
  var discountedProductFromProduct = function(product5) {
    return {
      product: product5,
      costAfterDiscount: product5.cost,
      appliedSkill: Nothing.value
    };
  };
  var checkProductCodition = function(v2) {
    return function(v1) {
      if (v2 instanceof Always) {
        return true;
      }
      ;
      if (v2 instanceof ForTags) {
        return !isEmpty2(intersection2(v1.tags)(v2.value0));
      }
      ;
      if (v2 instanceof ForPrice) {
        if (v2.value0 instanceof LT) {
          return v1.cost < v2.value1;
        }
        ;
        if (v2.value0 instanceof EQ) {
          return v1.cost === v2.value1;
        }
        ;
        if (v2.value0 instanceof GT) {
          return v1.cost > v2.value1;
        }
        ;
        throw new Error("Failed pattern match at Lib.Benefit.Skill (line 163, column 60 - line 166, column 22): " + [v2.value0.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Lib.Benefit.Skill (line 160, column 1 - line 160, column 63): " + [v2.constructor.name, v1.constructor.name]);
    };
  };
  var checkBillCondition = function(v2) {
    return function(v1) {
      if (v2.value0 instanceof LT) {
        return v1.total < v2.value1;
      }
      ;
      if (v2.value0 instanceof EQ) {
        return v1.total === v2.value1;
      }
      ;
      if (v2.value0 instanceof GT) {
        return v1.total > v2.value1;
      }
      ;
      throw new Error("Failed pattern match at Lib.Benefit.Skill (line 169, column 66 - line 172, column 23): " + [v2.value0.constructor.name]);
    };
  };
  var checkSkillCondition = function(bill) {
    return function(product5) {
      return function(skill) {
        if (skill.benefit.condition instanceof ForBill) {
          return checkBillCondition(skill.benefit.condition.value0)(bill);
        }
        ;
        if (skill.benefit.condition instanceof ForProduct) {
          return checkProductCodition(skill.benefit.condition.value0)(product5);
        }
        ;
        throw new Error("Failed pattern match at Lib.Benefit.Skill (line 194, column 42 - line 196, column 79): " + [skill.benefit.condition.constructor.name]);
      };
    };
  };
  var chooseSkillForProduct = function(bill) {
    return function(skills) {
      return function(product5) {
        return maximumBy2(function(sk1) {
          return function(sk2) {
            return compare2(sk1.benefit.power)(sk2.benefit.power);
          };
        })(filter(checkSkillCondition(bill)(product5))(skills));
      };
    };
  };
  var applySkill = function(product5) {
    return function(skill) {
      var dP = discountedProductFromProduct(product5);
      var discountAmount = toNumber(product5.cost) * skill.benefit.power;
      var costAfterDiscount = product5.cost - round2(discountAmount) | 0;
      var appSk = new Just(skill);
      return {
        product: dP.product,
        costAfterDiscount,
        appliedSkill: appSk
      };
    };
  };
  var maybeApplySkill = function(position2) {
    return function(mSkill) {
      if (mSkill instanceof Just) {
        return applySkill(position2)(mSkill.value0);
      }
      ;
      if (mSkill instanceof Nothing) {
        return discountedProductFromProduct(position2);
      }
      ;
      throw new Error("Failed pattern match at Lib.Benefit.Skill (line 180, column 35 - line 182, column 51): " + [mSkill.constructor.name]);
    };
  };
  var applySkillsForBill = function(skillTree2) {
    return function(bill) {
      var skillsToApply = getAvailableSkills(skillTree2);
      var selectSkill = chooseSkillForProduct(bill)(skillsToApply);
      var discountedPositions = map24(function(v2) {
        var dPos = maybeApplySkill(v2.value0)(selectSkill(v2.value0));
        return new Tuple(dPos, v2.value1);
      })(bill.positions);
      var totalAfterDiscount = sum2(map24(function(v2) {
        return v2.value0.costAfterDiscount * v2.value1 | 0;
      })(discountedPositions));
      var dBill = {
        positions: discountedPositions,
        totalAfterDiscount,
        total: bill.total
      };
      return dBill;
    };
  };

  // output/Lib.Text/index.js
  var skillsHeader = "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0441\u043A\u0438\u0434\u043A\u0438";
  var skillHeader = "\u0411\u041E\u041D\u0423\u0421\u042B";
  var productsHeader = "\u0422\u043E\u0432\u0430\u0440\u044B";
  var payButtonText = "\u041D\u0430\u043A\u043E\u043F\u0438\u0442\u044C \u0431\u0430\u043B\u043B\u044B";
  var marketMegaHeader = "\u0412\u044B\u0431\u0438\u0440\u0430\u0439\u0442\u0435 \u0442\u043E\u0432\u0430\u0440\u044B, \u0441\u043C\u043E\u0442\u0440\u0438\u0442\u0435 \u043D\u0430 \u0441\u043A\u0438\u0434\u043A\u0438, \u043A\u043E\u043F\u0438\u0442\u0435 \u0431\u0430\u043B\u043B\u044B";
  var levelHeader = "\u0423\u0420\u041E\u0412\u0415\u041D\u042C";
  var learnButtonText = "\u041F\u043E\u043B\u0443\u0447\u0438\u0442\u044C";
  var learnButtonNotEnoughText = "\u041D\u0435\u0445\u0432\u0430\u0442\u0430\u0435\u0442 \u0431\u043E\u043D\u0443\u0441\u043E\u0432";
  var learnButtonDisabledText = "\u041D\u0435\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u043E";
  var learnButtonAlreadyText = "\u0423\u0436\u0435 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043E";
  var expHeader = "\u0411\u0410\u041B\u041B\u042B";
  var effListHeader = "\u0412\u0430\u0448\u0438 \u0441\u043A\u0438\u0434\u043A\u0438";
  var discountText = "\u0421\u043A\u0438\u0434\u043A\u0430";
  var billHeader = "\u0427\u0435\u043A";
  var billExp = "\u0411\u0430\u043B\u043B\u044B";
  var billDiscount = "\u041F\u043E\u0441\u043B\u0435 \u0441\u043A\u0438\u0434\u043E\u043A";
  var billCost = "\u0418\u0442\u043E\u0433\u043E";

  // output/Lib.Benefit.EffectsList/index.js
  var append6 = /* @__PURE__ */ append(semigroupArray);
  var map25 = /* @__PURE__ */ map(functorArray);
  var effectsList = function(visible) {
    return function(skills) {
      var renderListItem = function(skill) {
        return li_([renderSkillDescriptionShort(skill)]);
      };
      var classes2 = append6(["effectsList"])(function() {
        if (visible) {
          return [];
        }
        ;
        return ["hidden"];
      }());
      return div2([cls(classes2)])([h2([])([text5(effListHeader)]), ul_(map25(renderListItem)(skills))]);
    };
  };

  // output/Lib.Icon/index.js
  var imgIcon = function(iconName) {
    return img([src9(iconName), cls(["icon"])]);
  };

  // output/Lib.Benefit/index.js
  var show7 = /* @__PURE__ */ show(showSkillPos);
  var bind9 = /* @__PURE__ */ bind(bindHalogenM);
  var get3 = /* @__PURE__ */ get(monadStateHalogenM);
  var discard6 = /* @__PURE__ */ discard(discardUnit)(bindHalogenM);
  var modify_3 = /* @__PURE__ */ modify_(monadStateHalogenM);
  var pure11 = /* @__PURE__ */ pure(applicativeHalogenM);
  var put2 = /* @__PURE__ */ put(monadStateHalogenM);
  var traverse3 = /* @__PURE__ */ traverse(traversableArray)(applicativeHalogenM);
  var fromArray3 = /* @__PURE__ */ fromArray(hashableSkillPos);
  var for_3 = /* @__PURE__ */ for_(applicativeHalogenM)(foldableMaybe);
  var lookup10 = /* @__PURE__ */ lookup8(hashableSkillPos);
  var eq2 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqSkillPos));
  var append12 = /* @__PURE__ */ append(semigroupArray);
  var show12 = /* @__PURE__ */ show(showSkillName);
  var map26 = /* @__PURE__ */ map(functorArray);
  var show22 = /* @__PURE__ */ show(showInt);
  var bind15 = /* @__PURE__ */ bind(bindMaybe);
  var pure13 = /* @__PURE__ */ pure(applicativeMaybe);
  var PayBill = /* @__PURE__ */ function() {
    function PayBill2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PayBill2.create = function(value0) {
      return function(value1) {
        return new PayBill2(value0, value1);
      };
    };
    return PayBill2;
  }();
  var ApplySkill = /* @__PURE__ */ function() {
    function ApplySkill2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ApplySkill2.create = function(value0) {
      return function(value1) {
        return new ApplySkill2(value0, value1);
      };
    };
    return ApplySkill2;
  }();
  var ReceiveExp = /* @__PURE__ */ function() {
    function ReceiveExp2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ReceiveExp2.create = function(value0) {
      return function(value1) {
        return new ReceiveExp2(value0, value1);
      };
    };
    return ReceiveExp2;
  }();
  var ResetTree = /* @__PURE__ */ function() {
    function ResetTree2(value0) {
      this.value0 = value0;
    }
    ;
    ResetTree2.create = function(value0) {
      return new ResetTree2(value0);
    };
    return ResetTree2;
  }();
  var SelectSkill = /* @__PURE__ */ function() {
    function SelectSkill2(value0) {
      this.value0 = value0;
    }
    ;
    SelectSkill2.create = function(value0) {
      return new SelectSkill2(value0);
    };
    return SelectSkill2;
  }();
  var CloseSkill = /* @__PURE__ */ function() {
    function CloseSkill2() {
    }
    ;
    CloseSkill2.value = new CloseSkill2();
    return CloseSkill2;
  }();
  var LearnSkill = /* @__PURE__ */ function() {
    function LearnSkill2() {
    }
    ;
    LearnSkill2.value = new LearnSkill2();
    return LearnSkill2;
  }();
  var UpdateArrows = /* @__PURE__ */ function() {
    function UpdateArrows2() {
    }
    ;
    UpdateArrows2.value = new UpdateArrows2();
    return UpdateArrows2;
  }();
  var Init = /* @__PURE__ */ function() {
    function Init2() {
    }
    ;
    Init2.value = new Init2();
    return Init2;
  }();
  var refLabelFromSkillPos = function(skillPos) {
    return "skill-" + show7(skillPos);
  };
  var progressByLevel = function(curExp) {
    return function(curLevel) {
      return function(curSkillPoints) {
        var expToNextLevel = curLevel * 3e3 | 0;
        var isLevelUp = curExp >= expToNextLevel;
        var result = function() {
          if (isLevelUp) {
            return progressByLevel(curExp - expToNextLevel | 0)(curLevel + 1 | 0)(curSkillPoints + 1 | 0);
          }
          ;
          return new Tuple(curExp, new Tuple(curLevel, curSkillPoints));
        }();
        return result;
      };
    };
  };
  var receiveExp = function(exp2) {
    return function(state3) {
      var totalExp = state3.experience + exp2 | 0;
      var v2 = progressByLevel(totalExp)(state3.level)(state3.skillPoints);
      var newExpToNextLevel = v2.value1.value0 * 3e3 | 0;
      return {
        skillTree: state3.skillTree,
        size: state3.size,
        selectedSkill: state3.selectedSkill,
        acquiredSkills: state3.acquiredSkills,
        skillForDescriptions: state3.skillForDescriptions,
        skillTreeArrowData: state3.skillTreeArrowData,
        level: v2.value1.value0,
        experience: v2.value0,
        experienceToNextLevel: newExpToNextLevel,
        skillPoints: v2.value1.value1
      };
    };
  };
  var newState = function(size5) {
    var skTree = fromFlatSkillTree(flatSkillTree);
    return {
      skillTree: skTree,
      skillPoints: 1,
      size: size5,
      selectedSkill: Nothing.value,
      skillForDescriptions: new Just(new Pos(0, 1)),
      acquiredSkills: getAvailableSkills(skTree),
      level: 1,
      experience: 0,
      experienceToNextLevel: 3e3,
      skillTreeArrowData: Nothing.value
    };
  };
  var handleQuery = function(v2) {
    if (v2 instanceof PayBill) {
      return bind9(get3)(function(skTree) {
        var payedBill = payBill(skTree.skillTree)(v2.value0);
        return discard6(modify_3(receiveExp(payedBill.total)))(function() {
          return pure11(new Just(v2.value1(payedBill)));
        });
      });
    }
    ;
    if (v2 instanceof ApplySkill) {
      return bind9(get3)(function(skTree) {
        var discountedBill2 = applySkillsForBill(skTree.skillTree)(v2.value0);
        return pure11(new Just(v2.value1(discountedBill2)));
      });
    }
    ;
    if (v2 instanceof ReceiveExp) {
      return discard6(modify_3(receiveExp(v2.value0)))(function() {
        return pure11(new Just(v2.value1));
      });
    }
    ;
    if (v2 instanceof ResetTree) {
      return bind9(get3)(function(oldState) {
        var freshState = function() {
          var v1 = newState(oldState.size);
          return {
            acquiredSkills: v1.acquiredSkills,
            experience: v1.experience,
            experienceToNextLevel: v1.experienceToNextLevel,
            level: v1.level,
            selectedSkill: v1.selectedSkill,
            size: v1.size,
            skillForDescriptions: v1.skillForDescriptions,
            skillPoints: v1.skillPoints,
            skillTree: v1.skillTree,
            skillTreeArrowData: oldState.skillTreeArrowData
          };
        }();
        return discard6(put2(freshState))(function() {
          return pure11(new Just(v2.value0));
        });
      });
    }
    ;
    throw new Error("Failed pattern match at Lib.Benefit (line 325, column 15 - line 345, column 21): " + [v2.constructor.name]);
  };
  var getSkillBoundingRect = function(dictMonadEffect) {
    var liftEffect7 = liftEffect(monadEffectHalogenM(dictMonadEffect));
    return function(skillPos) {
      var refL = refLabelFromSkillPos(skillPos);
      return bind9(getRef(refL))(function(el) {
        if (el instanceof Just) {
          return bind9(liftEffect7(getBoundingClientRect(el.value0)))(function(boundingRect) {
            return pure11(new Just(new Tuple(skillPos, boundingRect)));
          });
        }
        ;
        if (el instanceof Nothing) {
          return pure11(Nothing.value);
        }
        ;
        throw new Error("Failed pattern match at Lib.Benefit (line 293, column 3 - line 297, column 28): " + [el.constructor.name]);
      });
    };
  };
  var updateArrows = function(dictMonadEffect) {
    var liftEffect7 = liftEffect(monadEffectHalogenM(dictMonadEffect));
    var getSkillBoundingRect1 = getSkillBoundingRect(dictMonadEffect);
    return bind9(get3)(function(state3) {
      return bind9(getRef("SkillTable"))(function(mRootEl) {
        var allSkillCoords = keys2(state3.skillTree.skills);
        return bind9(liftEffect7(windowImpl))(function(w) {
          return bind9(liftEffect7(scrollX(w)))(function(scX) {
            return bind9(liftEffect7(scrollY(w)))(function(scY) {
              return bind9(traverse3(getSkillBoundingRect1)(allSkillCoords))(function(mCoordToRect) {
                var coordToRect = catMaybes(mCoordToRect);
                var rectMap = fromArray3(coordToRect);
                return for_3(mRootEl)(function(rootEl) {
                  return bind9(liftEffect7(getBoundingClientRect(rootEl)))(function(rootRect) {
                    return modify_3(function(s2) {
                      var $81 = {};
                      for (var $82 in s2) {
                        if ({}.hasOwnProperty.call(s2, $82)) {
                          $81[$82] = s2[$82];
                        }
                        ;
                      }
                      ;
                      $81.skillTreeArrowData = new Just({
                        skillTRect: rootRect,
                        skillsRectMap: rectMap,
                        origin: new Tuple(scX, scY)
                      });
                      return $81;
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  };
  var skillTree = function(dictMonadEffect) {
    var liftEffect7 = liftEffect(monadEffectHalogenM(dictMonadEffect));
    var updateArrows1 = updateArrows(dictMonadEffect);
    var initObserver2 = initObserver(dictMonadEffect);
    var renderCell = function(state3) {
      return function(row) {
        return function(column) {
          var skillPos = new Pos(column, row);
          var skill = lookup10(skillPos)(state3.skillTree.skills);
          var refL = refLabelFromSkillPos(skillPos);
          var cellClass = function() {
            if (skill instanceof Just) {
              return [cls(["cellContainer"])];
            }
            ;
            if (skill instanceof Nothing) {
              return [cls(["empty"])];
            }
            ;
            throw new Error("Failed pattern match at Lib.Benefit (line 283, column 19 - line 285, column 39): " + [skill.constructor.name]);
          }();
          var c2 = function() {
            if (skill instanceof Just) {
              var skillIcon = imgIcon(skill.value0.icon);
              var isSelectedClass = function() {
                var $87 = eq2(new Just(skillPos))(state3.selectedSkill);
                if ($87) {
                  return [cl("selected")];
                }
                ;
                return [];
              }();
              var isAvailableClass = function() {
                if (skill.value0.available) {
                  return [];
                }
                ;
                return [cl("locked")];
              }();
              var isAcquiredClass = function() {
                if (skill.value0.acquired) {
                  return [cl("learned")];
                }
                ;
                return [];
              }();
              var classes2 = append12([cl("skill")])(append12(isAcquiredClass)(append12(isSelectedClass)(isAvailableClass)));
              return [div_([button([classes(classes2), onClick(function(v2) {
                return new SelectSkill(skillPos);
              }), ref2(refL)])([skillIcon]), text5(show12(skill.value0.name))])];
            }
            ;
            if (skill instanceof Nothing) {
              return [];
            }
            ;
            throw new Error("Failed pattern match at Lib.Benefit (line 263, column 11 - line 282, column 22): " + [skill.constructor.name]);
          }();
          return td(cellClass)(c2);
        };
      };
    };
    var renderRows = function(state3) {
      return function(row) {
        var endColI = state3.size.value1 - 1 | 0;
        return tr_(map26(renderCell(state3)(row))(range2(0)(endColI)));
      };
    };
    var renderArrows = function(state3) {
      return function(arrData) {
        var makeRawLine = function(v2) {
          var toRect = lookup10(v2.value1)(arrData.skillsRectMap);
          var fromRect = lookup10(v2.value0)(arrData.skillsRectMap);
          var v1 = new Tuple(fromRect, toRect);
          if (v1.value0 instanceof Just && v1.value1 instanceof Just) {
            var v22 = fromToForRounded(arrData.origin)(v1.value0.value0)(v1.value1.value0);
            return new Just(new Tuple(v22.value0, new Tuple(v22.value1.value0, new Tuple(v22.value1.value1.value0, v22.value1.value1.value1))));
          }
          ;
          return Nothing.value;
        };
        var rawLines = catMaybes(map26(makeRawLine)(state3.skillTree.links));
        return arrows(rawLines);
      };
    };
    var handleAction = function(v2) {
      if (v2 instanceof Init) {
        return bind9(liftEffect7(create3))(function(v1) {
          return discard6(updateArrows1)(function() {
            return discard6(initObserver2(UpdateArrows.value)(v1.listener))(function() {
              return bind9(subscribe2(v1.emitter))(function() {
                return pure11(unit);
              });
            });
          });
        });
      }
      ;
      if (v2 instanceof UpdateArrows) {
        return updateArrows1;
      }
      ;
      if (v2 instanceof SelectSkill) {
        return modify_3(function(state3) {
          var $113 = {};
          for (var $114 in state3) {
            if ({}.hasOwnProperty.call(state3, $114)) {
              $113[$114] = state3[$114];
            }
            ;
          }
          ;
          $113.selectedSkill = new Just(v2.value0);
          $113.skillForDescriptions = new Just(v2.value0);
          return $113;
        });
      }
      ;
      if (v2 instanceof CloseSkill) {
        return modify_3(function(state3) {
          var $117 = {};
          for (var $118 in state3) {
            if ({}.hasOwnProperty.call(state3, $118)) {
              $117[$118] = state3[$118];
            }
            ;
          }
          ;
          $117.selectedSkill = Nothing.value;
          return $117;
        });
      }
      ;
      if (v2 instanceof LearnSkill) {
        return bind9(get3)(function(skTree) {
          var v1 = new Tuple(skTree.selectedSkill, skTree.skillPoints);
          if (v1.value0 instanceof Nothing) {
            return pure11(unit);
          }
          ;
          if (v1.value1 === 0) {
            return pure11(unit);
          }
          ;
          if (v1.value0 instanceof Just) {
            var v22 = learnSkill(v1.value0.value0)(skTree.skillTree);
            var updatedAcquiredSkills = function() {
              if (v22.value1 instanceof Just) {
                return snoc(skTree.acquiredSkills)(v22.value1.value0);
              }
              ;
              if (v22.value1 instanceof Nothing) {
                return skTree.acquiredSkills;
              }
              ;
              throw new Error("Failed pattern match at Lib.Benefit (line 141, column 39 - line 143, column 49): " + [v22.value1.constructor.name]);
            }();
            return put2(function() {
              var $128 = {};
              for (var $129 in skTree) {
                if ({}.hasOwnProperty.call(skTree, $129)) {
                  $128[$129] = skTree[$129];
                }
                ;
              }
              ;
              $128.skillTree = v22.value0;
              $128.acquiredSkills = updatedAcquiredSkills;
              $128.skillPoints = v1.value1 - 1 | 0;
              return $128;
            }());
          }
          ;
          throw new Error("Failed pattern match at Lib.Benefit (line 136, column 7 - line 148, column 12): " + [v1.constructor.name]);
        });
      }
      ;
      throw new Error("Failed pattern match at Lib.Benefit (line 121, column 18 - line 148, column 12): " + [v2.constructor.name]);
    };
    var arrowW = function(state3) {
      if (state3.skillTreeArrowData instanceof Just) {
        return [renderArrows(state3)(state3.skillTreeArrowData.value0)];
      }
      ;
      if (state3.skillTreeArrowData instanceof Nothing) {
        return [];
      }
      ;
      throw new Error("Failed pattern match at Lib.Benefit (line 227, column 5 - line 229, column 20): " + [state3.skillTreeArrowData.constructor.name]);
    };
    var render = function(state3) {
      var isEnoughSkillPoints = state3.skillPoints > 0;
      var exp2 = show22(state3.experience) + ("/" + show22(state3.experienceToNextLevel));
      var levelW = function() {
        var skillPointsCls = [cls(["column", "skillPoints"])];
        var skillPointsAttr = function() {
          var $139 = state3.skillPoints > 0;
          if ($139) {
            return [attr2("data-active")("true")];
          }
          ;
          return [attr2("data-active")("false")];
        }();
        var skprop = append12(skillPointsCls)(skillPointsAttr);
        var skillPointsT = div2(skprop)([text5(skillHeader), div2([cls(["pointsValue"])])([text5(show22(state3.skillPoints))])]);
        var levelT = div2([cls(["column", "level"])])([text5(levelHeader), div_([text5(show22(state3.level))])]);
        var expT = div2([cls(["column", "experience"])])([text5(expHeader), div_([text5(exp2)])]);
        return div2([cls(["topbar"])])([levelT, skillPointsT, expT]);
      }();
      var endRowI = state3.size.value0 - 1 | 0;
      var clasess = append12(["skillDescription"])(function() {
        if (state3.selectedSkill instanceof Just) {
          return [];
        }
        ;
        if (state3.selectedSkill instanceof Nothing) {
          return ["hidden"];
        }
        ;
        throw new Error("Failed pattern match at Lib.Benefit (line 155, column 43 - line 157, column 32): " + [state3.selectedSkill.constructor.name]);
      }());
      var mDescription = bind15(state3.skillForDescriptions)(function(selectedSkill) {
        return bind15(lookup10(selectedSkill)(state3.skillTree.skills))(function(skill) {
          var learn = function() {
            var v2 = new Tuple(skill.available, new Tuple(isEnoughSkillPoints, skill.acquired));
            if (v2.value0 && (v2.value1.value0 && !v2.value1.value1)) {
              return button([cls(["learnButton", "normal"]), onClick(function(v1) {
                return LearnSkill.value;
              })])([text5(learnButtonText)]);
            }
            ;
            if (!v2.value0) {
              return div2([cls(["learnButton", "disabled"])])([text5(learnButtonDisabledText)]);
            }
            ;
            if (v2.value1.value1) {
              return div2([cls(["learnButton", "already"])])([text5(learnButtonAlreadyText)]);
            }
            ;
            if (v2.value0 && !v2.value1.value0) {
              return div2([cls(["learnButton", "disabled"])])([text5(learnButtonNotEnoughText)]);
            }
            ;
            throw new Error("Failed pattern match at Lib.Benefit (line 163, column 13 - line 171, column 98): " + [v2.constructor.name]);
          }();
          return pure13([div2([cls(clasess)])([button([cls(["closeButton"]), onClick(function(v2) {
            return CloseSkill.value;
          })])([text5("x")]), h3([])([text5(show12(skill.name))]), renderSkillDescription(skill), renderSkillFancyText(skill), learn])]);
        });
      });
      var descriptionW = fromMaybe([div2([cls(["skillDescription", "hidden"])])([])])(mDescription);
      var isEffListVisible = isJust(mDescription);
      return div2([ref2("BenefitsContainer"), cls(["benefitsContainer"])])(append12([div2([classes([cl("skillTreeContainer")])])(append12([div2([cls([base2])])([table([ref2("SkillTable"), cls(["skillTreeTable"])])(map26(renderRows(state3))(range2(0)(endRowI)))])])(arrowW(state3)))])([div2([cls(["rightBar"])])([levelW, div2([cls(["extraInfo"])])(append12([effectsList(isEffListVisible)(state3.acquiredSkills)])(descriptionW))])]));
    };
    return mkComponent({
      initialState: newState,
      render,
      "eval": mkEval({
        receive: defaultEval.receive,
        finalize: defaultEval.finalize,
        handleAction,
        handleQuery,
        initialize: new Just(Init.value)
      })
    });
  };
  var _skillTree = /* @__PURE__ */ function() {
    return $$Proxy.value;
  }();

  // output/Lib.Bill.Common/index.js
  var IncreaseProductCount = /* @__PURE__ */ function() {
    function IncreaseProductCount2(value0) {
      this.value0 = value0;
    }
    ;
    IncreaseProductCount2.create = function(value0) {
      return new IncreaseProductCount2(value0);
    };
    return IncreaseProductCount2;
  }();
  var DecreaseProductCount = /* @__PURE__ */ function() {
    function DecreaseProductCount2(value0) {
      this.value0 = value0;
    }
    ;
    DecreaseProductCount2.create = function(value0) {
      return new DecreaseProductCount2(value0);
    };
    return DecreaseProductCount2;
  }();
  var RemoveProductFromBill = /* @__PURE__ */ function() {
    function RemoveProductFromBill2(value0) {
      this.value0 = value0;
    }
    ;
    RemoveProductFromBill2.create = function(value0) {
      return new RemoveProductFromBill2(value0);
    };
    return RemoveProductFromBill2;
  }();
  var Pay = /* @__PURE__ */ function() {
    function Pay2() {
    }
    ;
    Pay2.value = new Pay2();
    return Pay2;
  }();
  var $$Set = /* @__PURE__ */ function() {
    function $$Set2(value0) {
      this.value0 = value0;
    }
    ;
    $$Set2.create = function(value0) {
      return new $$Set2(value0);
    };
    return $$Set2;
  }();
  var _bill = /* @__PURE__ */ function() {
    return $$Proxy.value;
  }();

  // output/Lib.Bill.DiscountedBill/index.js
  var sum3 = /* @__PURE__ */ sum(foldableArray)(semiringInt);
  var map27 = /* @__PURE__ */ map(functorArray);
  var alter4 = /* @__PURE__ */ alter3(hashableString);
  var discard7 = /* @__PURE__ */ discard(discardUnit)(bindHalogenM);
  var modify_4 = /* @__PURE__ */ modify_(monadStateHalogenM);
  var pure14 = /* @__PURE__ */ pure(applicativeHalogenM);
  var show8 = /* @__PURE__ */ show(showInt);
  var show13 = /* @__PURE__ */ show(showSkillName);
  var append7 = /* @__PURE__ */ append(semigroupArray);
  var not3 = /* @__PURE__ */ not(/* @__PURE__ */ heytingAlgebraFunction(heytingAlgebraBoolean));
  var put3 = /* @__PURE__ */ put(monadStateHalogenM);
  var AddProductToBill = /* @__PURE__ */ function() {
    function AddProductToBill3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    AddProductToBill3.create = function(value0) {
      return function(value1) {
        return new AddProductToBill3(value0, value1);
      };
    };
    return AddProductToBill3;
  }();
  var ResetBill = /* @__PURE__ */ function() {
    function ResetBill2(value0) {
      this.value0 = value0;
    }
    ;
    ResetBill2.create = function(value0) {
      return new ResetBill2(value0);
    };
    return ResetBill2;
  }();
  var recalcTotal = function(bill) {
    var newTotal = sum3(map27(function(v2) {
      return v2.value0.product.cost * v2.value1 | 0;
    })(values(bill.positions)));
    return {
      positions: bill.positions,
      totalAfterDiscount: bill.totalAfterDiscount,
      total: newTotal
    };
  };
  var newDBill = {
    total: 0,
    positions: empty7,
    totalAfterDiscount: 0
  };
  var isEmptyBill = function(bill) {
    return size4(bill.positions) === 0;
  };
  var addProduct = function(product5) {
    return function(bill) {
      var updatedPositions = alter4(function(v2) {
        if (v2 instanceof Nothing) {
          return new Just(new Tuple(product5, 1));
        }
        ;
        if (v2 instanceof Just) {
          return new Just(new Tuple(v2.value0.value0, v2.value0.value1 + 1 | 0));
        }
        ;
        throw new Error("Failed pattern match at Lib.Bill.DiscountedBill (line 177, column 7 - line 179, column 65): " + [v2.constructor.name]);
      })(product5.product.name)(bill.positions);
      return recalcTotal({
        total: bill.total,
        totalAfterDiscount: bill.totalAfterDiscount,
        positions: updatedPositions
      });
    };
  };
  var handleQuery2 = function(v2) {
    if (v2 instanceof AddProductToBill) {
      return discard7(modify_4(addProduct(v2.value0)))(function() {
        return pure14(new Just(v2.value1));
      });
    }
    ;
    if (v2 instanceof ResetBill) {
      return discard7(modify_4($$const(newDBill)))(function() {
        return pure14(new Just(v2.value0));
      });
    }
    ;
    throw new Error("Failed pattern match at Lib.Bill.DiscountedBill (line 145, column 15 - line 151, column 21): " + [v2.constructor.name]);
  };
  var discountedBill = /* @__PURE__ */ function() {
    var renderDiscountedProduct = function(v2) {
      var total = [text5(" = "), text5(show8(v2.value0.costAfterDiscount * v2.value1 | 0)), text5(" \u058F")];
      var skillPart = function() {
        if (v2.value0.appliedSkill instanceof Nothing) {
          return new Left([div2([classes([cl("itemPrice")])])([text5(show8(v2.value0.product.cost))])]);
        }
        ;
        if (v2.value0.appliedSkill instanceof Just) {
          return new Right(new Tuple([div2([classes([cl("striked"), cl("itemPrice")])])([text5(show8(v2.value0.product.cost))]), text5(show8(v2.value0.costAfterDiscount))], [text5(show13(v2.value0.appliedSkill.value0.name))]));
        }
        ;
        throw new Error("Failed pattern match at Lib.Bill.DiscountedBill (line 55, column 19 - line 61, column 12): " + [v2.value0.appliedSkill.constructor.name]);
      }();
      var name15 = [div2([cls(["itemName"])])([text5(v2.value0.product.name)])];
      var increaseCButton = [button([onClick(function(v1) {
        return new IncreaseProductCount(v2.value0.product.name);
      }), cls(["controlButton"])])([text5("+")])];
      var decreaseCButton = [button([onClick(function(v1) {
        return new DecreaseProductCount(v2.value0.product.name);
      }), cls(["controlButton"])])([text5("-")])];
      var commonDetails = [text5(show8(v2.value1)), text5(" x ")];
      var result = function() {
        if (skillPart instanceof Left) {
          return [tr_([td_(decreaseCButton), td_(name15), td([cls(["itemDetails"])])(append7(commonDetails)(append7(skillPart.value0)(total)))])];
        }
        ;
        if (skillPart instanceof Right) {
          return [tr_([td_(increaseCButton), td_(name15), td([cls(["itemDetails"])])(append7(commonDetails)(append7(skillPart.value0.value0)(total)))]), tr_([td_(decreaseCButton), td_([text5(discountText)]), td_([div2([cls(["discount"])])(skillPart.value0.value1)])])];
        }
        ;
        throw new Error("Failed pattern match at Lib.Bill.DiscountedBill (line 83, column 16 - line 102, column 12): " + [skillPart.constructor.name]);
      }();
      return li([cls(["billItem"])])([table([cls(["billRecord"])])(result)]);
    };
    var render = function(state3) {
      var total = div2([cls(["column", "total"])])([text5(billDiscount), div2([cls(["amount"])])([text5(show8(state3.totalAfterDiscount))])]);
      var tail = function() {
        var $59 = not3(isEmptyBill)(state3);
        if ($59) {
          return [button([onClick(function(v2) {
            return Pay.value;
          }), cls(["btn", "payBtn"])])([text5(payButtonText)])];
        }
        ;
        return [];
      }();
      var products = values(state3.positions);
      var exp2 = div2([cls(["column", "exp"])])([text5(billExp), div2([cls(["amount"])])([text5(show8(state3.total))])]);
      var costCls = function() {
        var $60 = state3.total === 0;
        if ($60) {
          return ["amount"];
        }
        ;
        return ["amount", "striked"];
      }();
      var cost = div2([cls(["column", "cost"])])([text5(billCost), div2([cls(costCls)])([text5(show8(state3.total))])]);
      var billList = ul([cls(["billList"])])(map27(renderDiscountedProduct)(products));
      var billFooter = div2([cls(["billFooter"])])(append7([div2([cls(["summary"])])([cost, total, exp2])])(tail));
      return div2([classes([cl("bill")])])([h1_([text5(billHeader)]), div2([cls([base2, "billContent"])])([billList, billFooter])]);
    };
    var initialState = function(dBill) {
      return dBill;
    };
    var handleAction = function(v2) {
      if (v2 instanceof $$Set) {
        return put3(v2.value0);
      }
      ;
      return raise(v2);
    };
    return mkComponent({
      initialState,
      render,
      "eval": mkEval({
        initialize: defaultEval.initialize,
        finalize: defaultEval.finalize,
        handleAction,
        handleQuery: handleQuery2,
        receive: function($63) {
          return Just.create($$Set.create($63));
        }
      })
    });
  }();

  // output/Lib.Bill.SimpleBill/index.js
  var sum4 = /* @__PURE__ */ sum(foldableArray)(semiringInt);
  var map28 = /* @__PURE__ */ map(functorArray);
  var $$delete5 = /* @__PURE__ */ $$delete3(hashableString);
  var update2 = /* @__PURE__ */ update(hashableString);
  var alter5 = /* @__PURE__ */ alter3(hashableString);
  var recalcTotal2 = function(bill1) {
    var newTotal = sum4(map28(function(v2) {
      return v2.value0.cost * v2.value1 | 0;
    })(values(bill1.positions)));
    return {
      positions: bill1.positions,
      total: newTotal
    };
  };
  var newBill = {
    total: 0,
    positions: empty7
  };
  var deleteProduct = function(productName) {
    return function(bill1) {
      return recalcTotal2({
        total: bill1.total,
        positions: $$delete5(productName)(bill1.positions)
      });
    };
  };
  var changeProdCount = function(d2) {
    return function(productName) {
      return function(bill1) {
        var updatedPositions = update2(function(v2) {
          var newCount = v2.value1 + d2 | 0;
          var $37 = newCount === 0;
          if ($37) {
            return Nothing.value;
          }
          ;
          return new Just(new Tuple(v2.value0, newCount));
        })(productName)(bill1.positions);
        return recalcTotal2({
          total: bill1.total,
          positions: updatedPositions
        });
      };
    };
  };
  var addProduct2 = function(product5) {
    return function(bill1) {
      var updatedPositions = alter5(function(v2) {
        if (v2 instanceof Nothing) {
          return new Just(new Tuple(product5, 1));
        }
        ;
        if (v2 instanceof Just) {
          return new Just(new Tuple(v2.value0.value0, v2.value0.value1 + 1 | 0));
        }
        ;
        throw new Error("Failed pattern match at Lib.Bill.SimpleBill (line 111, column 7 - line 113, column 65): " + [v2.constructor.name]);
      })(product5.name)(bill1.positions);
      return recalcTotal2({
        total: bill1.total,
        positions: updatedPositions
      });
    };
  };

  // output/Lib.Product/index.js
  var fromArrayBy3 = /* @__PURE__ */ fromArrayBy(hashableString);
  var fromArray4 = /* @__PURE__ */ fromArray2(hashTag);
  var append8 = /* @__PURE__ */ append(semigroupArray);
  var show9 = /* @__PURE__ */ show(showInt);
  var map29 = /* @__PURE__ */ map(functorArray);
  var modify_5 = /* @__PURE__ */ modify_(monadStateHalogenM);
  var insert9 = /* @__PURE__ */ insert7(hashableString);
  var $$delete6 = /* @__PURE__ */ $$delete4(hashableString);
  var AddProductToBill2 = /* @__PURE__ */ function() {
    function AddProductToBill3(value0) {
      this.value0 = value0;
    }
    ;
    AddProductToBill3.create = function(value0) {
      return new AddProductToBill3(value0);
    };
    return AddProductToBill3;
  }();
  var AddProduct = /* @__PURE__ */ function() {
    function AddProduct2(value0) {
      this.value0 = value0;
    }
    ;
    AddProduct2.create = function(value0) {
      return new AddProduct2(value0);
    };
    return AddProduct2;
  }();
  var OpenProductDescription = /* @__PURE__ */ function() {
    function OpenProductDescription2(value0) {
      this.value0 = value0;
    }
    ;
    OpenProductDescription2.create = function(value0) {
      return new OpenProductDescription2(value0);
    };
    return OpenProductDescription2;
  }();
  var CloseProductDescription = /* @__PURE__ */ function() {
    function CloseProductDescription2(value0) {
      this.value0 = value0;
    }
    ;
    CloseProductDescription2.create = function(value0) {
      return new CloseProductDescription2(value0);
    };
    return CloseProductDescription2;
  }();
  var storeFromList = function(products) {
    return fromArrayBy3(function(p2) {
      return p2.name;
    })(function(p2) {
      return p2;
    })(products);
  };
  var product4 = {
    name: "\u0412\u0438\u0448\u043D\u0435\u0432\u044B\u0439 \u043F\u0438\u0440\u043E\u0433",
    tags: /* @__PURE__ */ fromArray4(["Pastry"]),
    cost: 1800,
    description: "\u0418\u0441\u043F\u0435\u0447\u0435\u043D \u0441\u0435\u0433\u043E\u0434\u043D\u044F \u0443\u0442\u0440\u043E\u043C",
    image: "assets/pictures/cherry_pie.jpg"
  };
  var product3 = {
    name: "\u0417\u0435\u0440\u043D\u043E \xAB\u041A\u0435\u043D\u0438\u044F\xBB",
    tags: /* @__PURE__ */ fromArray4(["Beans"]),
    cost: 3e3,
    description: "\u0417\u0435\u0440\u043D\u043E \u0434\u043B\u044F \u043A\u043E\u0444\u0435\u043C\u0430\u0448\u0438\u043D\u044B \u0438\u0437 \u0441\u0430\u043C\u043E\u0439 \u041A\u043E\u043B\u0443\u043C\u0431\u0438\u0438",
    image: "assets/pictures/beans_crop.jpg"
  };
  var product2 = {
    name: "\u0412\u0430\u043D\u0438\u043B\u044C\u043D\u044B\u0439 \u043B\u0430\u0442\u0442\u0435",
    tags: /* @__PURE__ */ fromArray4(["Milky", "Coffee"]),
    cost: 2200,
    description: "\u041A\u043E\u043A\u0442\u0435\u0439\u043B\u044C \u0438\u0437 \u043A\u043E\u0444\u0435, \u043C\u043E\u043B\u043E\u043A\u0430 \u0438 \u0441\u0438\u0440\u043E\u043F\u0430",
    image: "assets/pictures/latte_crop.jpg"
  };
  var product1 = {
    name: "\u0424\u0438\u043B\u044C\u0442\u0440 \xAB\u042D\u0444\u0438\u043E\u043F\u0438\u044F\xBB",
    tags: /* @__PURE__ */ fromArray4(["Black", "Coffee"]),
    cost: 1500,
    description: "\u041D\u0435\u0441\u0442\u0430\u0440\u0435\u044E\u0449\u0430\u044F \u043A\u043B\u0430\u0441\u0441\u0438\u043A\u0430",
    image: "assets/pictures/espresso_crop.jpg"
  };
  var chopByTwo = function(arr) {
    var v2 = take(2)(arr);
    if (v2.length === 0) {
      return [];
    }
    ;
    if (v2.length === 1) {
      return [[v2[0]]];
    }
    ;
    if (v2.length === 2) {
      var xs = drop(2)(arr);
      return append8([[v2[0], v2[1]]])(chopByTwo(xs));
    }
    ;
    return [];
  };
  var tableStore = function(products) {
    var rows4 = chopByTwo(products);
    var makeProductButton = function(product5) {
      var pic = img([src9(product5.image), cls(["productImage"])]);
      return td([cls(["product"])])([div_([pic, div2([cls(["productCost"])])([text5(show9(product5.cost)), text5(" \u058F")]), button([onClick(function(v2) {
        return new AddProduct(product5);
      }), cls(["productButton"])])([text5(product5.name)])])]);
    };
    var makeCell = function(product5) {
      return makeProductButton(product5);
    };
    var makeRow = function(productRow) {
      return tr([cls(["productRow"])])(map29(makeCell)(productRow));
    };
    return div2([classes([cl("productStore")])])([h1_([text5(productsHeader)]), table([cls(["productTable"])])(map29(makeRow)(rows4))]);
  };
  var allProducts = [product1, product2, product3, product4];
  var productStore = /* @__PURE__ */ function() {
    var render = function(state3) {
      var products = values(state3.store);
      return tableStore(products);
    };
    var initialState = function(v2) {
      return {
        store: storeFromList(allProducts),
        isOpened: empty8
      };
    };
    var handleAction = function(v2) {
      if (v2 instanceof AddProduct) {
        return raise(new AddProductToBill2(v2.value0));
      }
      ;
      if (v2 instanceof OpenProductDescription) {
        return modify_5(function(state3) {
          return {
            isOpened: insert9(v2.value0)(state3.isOpened),
            store: state3.store
          };
        });
      }
      ;
      if (v2 instanceof CloseProductDescription) {
        return modify_5(function(state3) {
          return {
            isOpened: $$delete6(v2.value0)(state3.isOpened),
            store: state3.store
          };
        });
      }
      ;
      throw new Error("Failed pattern match at Lib.Product (line 131, column 18 - line 137, column 92): " + [v2.constructor.name]);
    };
    return mkComponent({
      initialState,
      render,
      "eval": mkEval({
        handleQuery: defaultEval.handleQuery,
        receive: defaultEval.receive,
        initialize: defaultEval.initialize,
        finalize: defaultEval.finalize,
        handleAction
      })
    });
  }();
  var _store = /* @__PURE__ */ function() {
    return $$Proxy.value;
  }();

  // output/Main/index.js
  var skillTreeIsSymbol = {
    reflectSymbol: function() {
      return "skillTree";
    }
  };
  var slot_2 = /* @__PURE__ */ slot_()(skillTreeIsSymbol)(ordUnit);
  var slot2 = /* @__PURE__ */ slot();
  var slot1 = /* @__PURE__ */ slot2({
    reflectSymbol: function() {
      return "productStore";
    }
  })(ordUnit);
  var slot22 = /* @__PURE__ */ slot2({
    reflectSymbol: function() {
      return "bill";
    }
  })(ordUnit);
  var bind10 = /* @__PURE__ */ bind(bindHalogenM);
  var get4 = /* @__PURE__ */ get(monadStateHalogenM);
  var request2 = /* @__PURE__ */ request()(skillTreeIsSymbol)(ordUnit);
  var for_4 = /* @__PURE__ */ for_(applicativeHalogenM)(foldableMaybe);
  var put4 = /* @__PURE__ */ put(monadStateHalogenM);
  var discard8 = /* @__PURE__ */ discard(discardUnit)(bindHalogenM);
  var tell3 = /* @__PURE__ */ tell2()(skillTreeIsSymbol)(ordUnit);
  var Reset = /* @__PURE__ */ function() {
    function Reset2() {
    }
    ;
    Reset2.value = new Reset2();
    return Reset2;
  }();
  var StoreA = /* @__PURE__ */ function() {
    function StoreA2(value0) {
      this.value0 = value0;
    }
    ;
    StoreA2.create = function(value0) {
      return new StoreA2(value0);
    };
    return StoreA2;
  }();
  var BillA = /* @__PURE__ */ function() {
    function BillA2(value0) {
      this.value0 = value0;
    }
    ;
    BillA2.create = function(value0) {
      return new BillA2(value0);
    };
    return BillA2;
  }();
  var treeShape = /* @__PURE__ */ function() {
    return new Tuple(3, 4);
  }();
  var newRootState = {
    bill: newBill,
    discountedBill: newDBill
  };
  var fromStoreOutput = /* @__PURE__ */ function() {
    return StoreA.create;
  }();
  var fromBillOutput = /* @__PURE__ */ function() {
    return BillA.create;
  }();
  var benWizRoot = function(dictMonadEffect) {
    var skillTree2 = skillTree(dictMonadEffect);
    var render = function(s2) {
      return div2([classes([cl("widget")])])([h1([])([text5(skillsHeader)]), button([onClick(function(v2) {
        return Reset.value;
      }), cls(["resetButton"])])([text5("\u21BB")]), slot_2(_skillTree)(unit)(skillTree2)(treeShape), div2([])([h1([])([text5(marketMegaHeader)]), div2([cls(["market"])])([slot1(_store)(unit)(productStore)(unit)(fromStoreOutput), slot22(_bill)(unit)(discountedBill)(s2.discountedBill)(fromBillOutput)])])]);
    };
    var initialState = function(v2) {
      return newRootState;
    };
    var handleStoreA = function(v2) {
      return bind10(get4)(function(state3) {
        var nBill = addProduct2(v2.value0)(state3.bill);
        return bind10(request2(_skillTree)(unit)(ApplySkill.create(nBill)))(function(nDBill) {
          return for_4(nDBill)(function(dBill) {
            return put4({
              bill: nBill,
              discountedBill: dBill
            });
          });
        });
      });
    };
    var handleBillA = function(v2) {
      if (v2 instanceof $$Set) {
        return put4({
          bill: newBill,
          discountedBill: v2.value0
        });
      }
      ;
      if (v2 instanceof Pay) {
        return bind10(get4)(function(state3) {
          return discard8(tell3(_skillTree)(unit)(ReceiveExp.create(state3.discountedBill.total)))(function() {
            return put4(newRootState);
          });
        });
      }
      ;
      if (v2 instanceof IncreaseProductCount) {
        return bind10(get4)(function(state3) {
          var nBill = changeProdCount(1)(v2.value0)(state3.bill);
          return bind10(request2(_skillTree)(unit)(ApplySkill.create(nBill)))(function(nDBill) {
            return for_4(nDBill)(function(dBill) {
              return put4({
                bill: nBill,
                discountedBill: dBill
              });
            });
          });
        });
      }
      ;
      if (v2 instanceof DecreaseProductCount) {
        return bind10(get4)(function(state3) {
          var nBill = changeProdCount(-1 | 0)(v2.value0)(state3.bill);
          return bind10(request2(_skillTree)(unit)(ApplySkill.create(nBill)))(function(nDBill) {
            return for_4(nDBill)(function(dBill) {
              return put4({
                bill: nBill,
                discountedBill: dBill
              });
            });
          });
        });
      }
      ;
      if (v2 instanceof RemoveProductFromBill) {
        return bind10(get4)(function(state3) {
          var nBill = deleteProduct(v2.value0)(state3.bill);
          return bind10(request2(_skillTree)(unit)(ApplySkill.create(nBill)))(function(nDBill) {
            return for_4(nDBill)(function(dBill) {
              return put4({
                bill: nBill,
                discountedBill: dBill
              });
            });
          });
        });
      }
      ;
      throw new Error("Failed pattern match at Main (line 129, column 17 - line 155, column 73): " + [v2.constructor.name]);
    };
    var handleAction = function(v2) {
      if (v2 instanceof BillA) {
        return handleBillA(v2.value0);
      }
      ;
      if (v2 instanceof StoreA) {
        return handleStoreA(v2.value0);
      }
      ;
      if (v2 instanceof Reset) {
        return discard8(put4(newRootState))(function() {
          return tell3(_skillTree)(unit)(ResetTree.create);
        });
      }
      ;
      throw new Error("Failed pattern match at Main (line 85, column 18 - line 90, column 57): " + [v2.constructor.name]);
    };
    return mkComponent({
      initialState,
      render,
      "eval": mkEval({
        handleQuery: defaultEval.handleQuery,
        receive: defaultEval.receive,
        initialize: defaultEval.initialize,
        finalize: defaultEval.finalize,
        handleAction
      })
    });
  };
  var benWizRoot1 = /* @__PURE__ */ benWizRoot(monadEffectAff);
  var main2 = /* @__PURE__ */ runHalogenAff(/* @__PURE__ */ bind(bindAff)(awaitBody)(function(body2) {
    return runUI2(benWizRoot1)(unit)(body2);
  }));

  // <stdin>
  main2();
})();
